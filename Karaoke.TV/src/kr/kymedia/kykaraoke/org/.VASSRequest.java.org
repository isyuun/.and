package kr.kymedia.kykaraoke;

import java.io.*;

import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;

import android.os.*;
import android.util.*;

public class VASSRequest extends Thread implements Const {
	Handler m_handler;
	
	String m_strVASSDomain = "";
	String m_strSTBID = "";
	String m_strMACAddress = "";
	String m_strUrl = "";
	String m_strResult = "";
	String m_strPurchaseResult = "";
	
	int m_iRequestID = 0;
	String m_strProduct = "";

	static InputStream en;
	
	final String CLASS = "VASSRequest";
	
	public VASSRequest(Handler h) {
		m_handler= h;
		en = null;
	}
	
	public void sendMessage(int state) {
		Bundle b = new Bundle();
		b.putInt("state", state);
		
		Message msg = m_handler.obtainMessage();
		msg.setData(b);
		m_handler.sendMessage(msg);
	}
	
	public void setVASSParam(String page, String stbid, String mac) {
		m_strVASSDomain = page;
		m_strSTBID = stbid;
		m_strMACAddress = mac;
		
		// bgkimt VASS 테스트 아이디들로 픽스한다(임시)
		
		//m_strVASSDomain = "http://vass.hanafostv.com:8080/service/serviceAction.hm?";
		//m_strSTBID = "DAE7F8FA-EE64-11DF-A530-FF677D27FE51";
		//m_strMACAddress = "0:21:4C:DA:FE:B2";
		
	}
	
	/*
	 * 1. 1일 이용권 구매		purchasePpvProduct
	 * 2. 1일 이용권 조회		checkPurchasePpvProduct
	 * 3. 월/년 이용권 구매	purchasePpxProduct
	 * 4. 월/년 이용권 조회	checkPurchasePpmProduct
	 * 5. promise				년 이용권 구매 시에만 10으로 입력
	 */
	public void setVASSUrl(String m, String password) {
		m_strUrl = m_strVASSDomain;
		m_strUrl = m_strUrl + "m=" + m;
		m_strUrl = m_strUrl + "&stb_id=" + m_strSTBID;
		
		if (m_iRequestID == REQUEST_VASS_PASSWORD_FOR_DAY || m_iRequestID == REQUEST_VASS_PASSWORD_FOR_MONTH) {
			m_strUrl = m_strUrl + "&purchase_passwd=" + password;
			return;
		}
		
		switch(m_iRequestID)
		{
			case REQUEST_VASS_DAY_PURCHASE :
			case REQUEST_VASS_DAY_CHECK :
				if (m_strProduct == SMART_STB) {
					m_strUrl = m_strUrl + "&id_product=" + VASS_PRODUCT_ID_DAY_STB;
				} else {
					m_strUrl = m_strUrl + "&id_product=" + VASS_PRODUCT_ID_DAY_BOX;
				}
				break;
			case REQUEST_VASS_MONTH_PURCHASE :
			case REQUEST_VASS_MONTH_CHECK :
				if (m_strProduct == SMART_STB) {
					m_strUrl = m_strUrl + "&id_product=" + VASS_PRODUCT_ID_MONTH_STB;
				} else {
					m_strUrl = m_strUrl + "&id_product=" + VASS_PRODUCT_ID_MONTH_BOX;
				}
				break;
		}
		
		m_strUrl = m_strUrl + "&mac_address=" + m_strMACAddress;
	}
	
	public void setRequestID(int requestID) {
		m_iRequestID = requestID;
	}
	
	public void setProduct(String product) {
		m_strProduct = product;
	}
	
	@Override
	public void run() {
		try{
			sendRequest();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void sendRequest() {
		try{
			DefaultHttpClient client = new DefaultHttpClient();
			
			//String url = URLEncoder.encode(m_strUrl, "UTF-8");
			HttpPost post = new HttpPost(m_strUrl);
			LOG(CLASS, "[" + m_strUrl + "]");
			/*
			HttpParams param = client.getParams();
			HttpConnectionParams.setConnectionTimeout(param, 5000);
			HttpConnectionParams.setSoTimeout(param, 5000);
			*/
			HttpResponse response = client.execute(post);
			
			HttpEntity httpEntity = response.getEntity();
            en = httpEntity.getContent();
		} catch (UnsupportedEncodingException e) {
            e.printStackTrace();
        } catch (ClientProtocolException e) {
            e.printStackTrace();
        } catch (IOException e) {
            e.printStackTrace();
        }
		
		try{
			BufferedReader bufReader = new BufferedReader(new InputStreamReader(en, "UTF-8"));
			
			String line = null;
			String result = "";
			int iReadCount = 0;
			
			while((line = bufReader.readLine()) != null) {
				if (iReadCount > 0) {
					result += "\r\n";
				}
				
				result += line;
				iReadCount++;
			}
			
			parseVASSResult(result);
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void parseVASSResult(String response) {
		LOG(CLASS, "[VASS Response] " + response);
		
		m_strResult = "";
		String result[] = response.split("RETURN_DATA=");
		
		LOG(CLASS, result[1]);
		
		m_strResult = result[1].substring(0, 1);
		
		if (m_strResult.equals("Y") || m_strResult.equals("N")) {
			switch(m_iRequestID)
			{
			case REQUEST_VASS_DAY_PURCHASE :
				m_strPurchaseResult = result[1];
				sendMessage(COMPLETE_VASS_DAY_PURCHASE);
				break;
			case REQUEST_VASS_DAY_CHECK :
				sendMessage(COMPLETE_VASS_DAY_CHECK);
				break;
			case REQUEST_VASS_MONTH_PURCHASE :
				m_strPurchaseResult = result[1];
				sendMessage(COMPLETE_VASS_MONTH_PURCHASE);
				break;
			case REQUEST_VASS_MONTH_CHECK :
				sendMessage(COMPLETE_VASS_MONTH_CHECK);
				break;
			case REQUEST_VASS_YEAR_PURCHASE :
				sendMessage(COMPLETE_VASS_YEAR_PURCHASE);
				break;
			case REQUEST_VASS_YEAR_CHECK :
				sendMessage(COMPLETE_VASS_YEAR_CHECK);
				break;
			case REQUEST_VASS_PASSWORD_FOR_DAY :
				sendMessage(COMPLETE_VASS_PASSWORD_FOR_DAY);
				break;
			case REQUEST_VASS_PASSWORD_FOR_MONTH :
				sendMessage(COMPLETE_VASS_PASSWORD_FOR_MONTH);
				break;
			}
		}
	}
	
	private void LOG(String tag, String msg) {
		if (P_DEBUG == "debug") {
			Log.i(tag, msg);
		}
	}
}
