package kr.kymedia.kykaraoke;

import java.io.*;

import org.apache.http.*;
import org.apache.http.client.*;
import org.apache.http.client.methods.*;
import org.apache.http.impl.client.*;

import android.os.*;
import android.util.*;

public class Download extends Thread implements Const {
	private static final String CLASSNAME = "DONW";
	
	String mUrl, mFileName;
	int mType;
	Handler mHandler;
	String newPath;
	
	public void setType(int type){
		mType = type;
	}
	
	public void setUrl(String url){
		mUrl = url;
	}
	
	public void setFileName(String fileName){
		mFileName = fileName;
	}
	
	public Download(Handler h){
		mHandler = h;
	}
	
	public void sendMessage(int state){
		Bundle b = new Bundle();
		b.putInt("state", state);
		
		Message msg = mHandler.obtainMessage();
		msg.setData(b);
		mHandler.sendMessage(msg);
	}
	
    @Override
	public void run(){
    	int fileType = mType;
    	
		String sdpath = newPath;
		
		HttpClient downClient = new DefaultHttpClient();		
		HttpGet testHttpGet = new HttpGet(mUrl);
		LOG(CLASSNAME, "httpget mUrl = " + mUrl);
		
		try {
			HttpResponse testResponse = downClient.execute(testHttpGet);
			LOG(CLASSNAME, "excute");
			
			HttpEntity downEntity = testResponse.getEntity();
			if (downEntity != null) {
				LOG(CLASSNAME, "entity not null");
				
				int BUFFER_SIZE = 1024 * 10;
				byte[] buffer = new byte[BUFFER_SIZE];
				
				InputStream testInputStream = null;
				testInputStream = downEntity.getContent();
				LOG(CLASSNAME, "getcontent");
				BufferedInputStream testInputBuf = new BufferedInputStream(testInputStream, BUFFER_SIZE);
				
				File file = null;
				file = new File(sdpath + File.separator + mFileName);
				file.createNewFile();
				LOG(CLASSNAME, "createnewfile");
				FileOutputStream testFileOutputStream = new FileOutputStream(file, false);
				BufferedOutputStream testOutputBuf = new BufferedOutputStream(testFileOutputStream, BUFFER_SIZE);
				
				int readSize = -1;
				
				while((readSize = testInputBuf.read(buffer)) != -1) {
					LOG(CLASSNAME, "readSize = " + String.valueOf(readSize));
					testOutputBuf.write(buffer, 0, readSize);
				}
				
				switch(fileType){
				case FILE_ARTIST_IMAGE :
					LOG(CLASSNAME, "COMPLETE_ARTIST_IMAGE");
					sendMessage(COMPLETE_ARTIST_IMAGE);
					break;
				case FILE_SONG :
					LOG(CLASSNAME, "COMPLETE_SONG");
					sendMessage(COMPLETE_SONG);
					break;
				case FILE_LISTEN :
					LOG(CLASSNAME, "COMPLETE_LISTEN");
					sendMessage(COMPLETE_LISTEN);
					break;
				case FILE_LISTEN_OTHER :
					LOG(CLASSNAME, "COMPLETE_LISTEN_OTHER_DOWN");
					sendMessage(COMPLETE_LISTEN_OTHER_DOWN);
					break;
				}
				
				LOG(CLASSNAME, "write end");
				testOutputBuf.flush();
				
				testInputBuf.close();
				testFileOutputStream.close();
				testOutputBuf.close();
			}
		} catch (Exception e){
			testHttpGet.abort();
			LOG(CLASSNAME, "execute fail");
		}
	}
    
    private void LOG(String tag, String msg) {
		if (P_DEBUG == "debug") {
			Log.i(tag, msg);
		}
	}
}