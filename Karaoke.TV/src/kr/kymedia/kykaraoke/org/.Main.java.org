package kr.kymedia.kykaraoke;

import java.io.*;
import java.text.*;
import java.util.*;

import com.dasan.product.SystemInfo;

import android.annotation.*;
import android.app.*;
import android.content.*;
import android.graphics.*;
import android.graphics.Bitmap.Config;
import android.graphics.drawable.*;
import android.net.wifi.*;
import android.os.*;
import android.text.*;
import android.util.*;
import android.view.*;
import android.view.ViewGroup.LayoutParams;
import android.view.animation.*;
import android.view.inputmethod.*;
import android.widget.*;
import android.widget.TextView.OnEditorActionListener;

//for box
import com.dasan.micapi.Miclib;

public class Main extends Activity implements Const {
	LinearLayout m_layoutList;
	LinearLayout m_layoutSubMenu;
	LinearLayout m_layoutContent;
	LinearLayout m_layoutSongListDetail;
	public LinearLayout m_layoutListeningOther = null;
	LinearLayout m_layoutLoading;
	LinearLayout m_layoutMessageOK;
	
	Remote remote = new Remote();
	KPRequest requestKP;
	KPRequest requestKPPlayedTime;
	VASSRequest requestVASS;
	Download download;
	Util util;
	Util util_profileHome = null;
	Util util_profile01 = null;
	Util util_profile02 = null;
	Util util_profile03 = null;
	Util util_profile04 = null;
	Util util_profile05 = null;
	Util util_profile06 = null;
	Util util_profile07 = null;
	Util util_profile08 = null;
	Util util_profileListeningOther = null;
	ListenPlay listen = null;
	
	// Common
	String m_strSTBIDOrigin = "";
	String sdPath = "";
	String m_strMainBackgroundVideoUrl = "";
	public String m_iVender = P_DEVICE;
	int m_iPaneState = HOME;
	int m_iListBackgroundResourceID;
	int m_iRequestPage = 1;
	boolean m_bShowMessage = false;
	boolean m_bListAlreadyReflashed = false;
	boolean m_bIsHiddenMenu = false;
	final String CLASS = "Main";
	private Typeface m_typeface;
	public static Activity ActivityMain = null;
	Drawable m_drawBackground;
	public static final int IME_SHOW = 9999;
	
	// KP
	String m_strRequestDoamin = "";
	String m_strAppName = "";
	String m_strDebug = "";
	String m_strMarket = "";
	String m_strVersion = "";
	String m_strMid = "";
	String m_strSTBID = "";
	String m_strAccount = "";
	String m_strNCode = "";
	String m_strLCode = "";
	String m_strModel = "";
	String m_strMac = "";
	String m_strMacOrigin = "";
	String m_strOS = "";
	String m_strOSVersion = "";
	String m_strAPIVersion = "";
	String m_strPassType = TICKET_NONE;
	String m_strPassCount = "";
	String m_strAPIKey = "";
	
	// 점수
	LinearLayout m_layoutScore;
	Timer m_timerHideScore = null;
	Timer m_timerStartNextSong = null;
	
	Timer m_timerStartCurrentSong = null;
	
	// 메세지 박스
	LinearLayout m_layoutMessageCommon = null;
	Timer m_timerHideMessageCommon = null;
	LinearLayout m_layoutMessageOkCancel = null;
	Timer m_timerHideMessageOkCancel = null;
	Timer m_timerShowMessageNotResponse = null;
	TaskShowMessageNotResponse m_taskShowMessageNotResponse = null;
	int m_iMessageOkCancelFocus = CANCEL;
	boolean m_bIsExit = false;
	
	// 곡번호 검색
	String m_strInputNumber = "00000";
	String m_strRequestInputNumber = "";
	String m_strNumberSearchResult = "";
	String m_strSearchID = "";
	boolean m_bIsNumberSearch = false;
	boolean m_bHaveNumberSearchResult = false;
	
	// 이용권 구매
	String m_strVASSPassword = "";
	String m_strHasTicket = TICKET_NONE;
	boolean m_bIsFocusedOnTicket = false;
	boolean m_bIsFocusedOnPassNumber = false;
	boolean m_bIsGoToCertifyMessage = false;
	boolean m_bIsGoToPurchaseMessage = false;
	
	// 이용권
	int m_iProcessTicket = 0;
	int m_iTicketMessageFocusX = 1;
	int m_iTicketMessageFocusY = 1;
	LinearLayout m_layoutPPV = null;
	String m_strInputPass[] = {"0", "0", "0", "0"};
	
	// 인증 센터 - 휴대폰 번호 입력
	String m_strHPNumber = "";
	String m_strCertifyedHPNumber = "";
	LinearLayout m_layoutCertifyHP = null;
	
	// 인증 센터 - 인증 번호 입력
	String m_strInputAuthNumber = "";
	LinearLayout m_layoutCertify = null;
	
	// 이벤트
	LinearLayout m_layoutEventHP = null;
	
	// 홈
	String m_strMainSingID = "";
	String m_strMainEventID;
	String m_strMainCustomerID;
	ImageView m_imgProfileHome = null;
	LinearLayout m_layoutHome = null;
	
	// 반주곡 리스트
	int m_iSongListItemCount = 0;
	int m_iCurrentSongListPage = 1;
	int m_iCurrentViewSongListPage;
	int m_iTotalSongListPage = 1;
	boolean m_bIsGenre = false;
	ArrayList<String> arrayIsFavor = new ArrayList<String>();
	ArrayList<SongListItem> arraySongListItem = new ArrayList<SongListItem>();
	
	// 애창곡
	boolean m_bIsRefreshFavorList = false;
	String m_strRequestFavorSongID;
	
	// 녹음곡 리스트
	int m_iSetListenItemCount = 0;
	int m_iListenItemCount = 0;
	int m_iCurrentListenListPage = 1;
	int m_iCurrentViewListenListPage = 1;
	int m_iTotalListenListPage;
	ImageView m_imgProfile01 = null;
	ImageView m_imgProfile02 = null;
	ImageView m_imgProfile03 = null;
	ImageView m_imgProfile04 = null;
	ImageView m_imgProfile05 = null;
	ImageView m_imgProfile06 = null;
	ImageView m_imgProfile07 = null;
	ImageView m_imgProfile08 = null;
	ImageView m_imgProfileOther = null;
	LinearLayout m_layoutListenListFocus = null;
	ArrayList<ListenListItem> arrayListenListItem = new ArrayList<ListenListItem>();
	
	// 이 녹음곡의 다른 사람 녹음곡
	int m_iSetListenOtherItemCount = 0;
	int m_iListenOtherItemCount = 0;
	int m_iCurrentListenOtherListPage = 1;
	int m_iCurrentViewListenOtherListPage = 1;
	int m_iTotalListenOtherListPage;
	int m_iListenOtherRequestPage = 1;
	String m_strListenOtherListSongID = "";
	
	// 공지사항or이용안내
	int m_iCurrentCustomerListPage = 1;
	int m_iCustomerListItemCount;
	int m_iCurrentViewCustomerListPage;
	int m_iTotalCustomerListPage;
	int m_iCustomerListDetailTotalPage = 1;
	int m_iCurrentCustomerListDetailPage = 1;
	String m_strRequestCustomerDetailID;
	LinearLayout m_layoutCustomerList;
	LinearLayout m_layoutCustomerListEvent;
	ArrayList<CustomerListItem> arrayCustomerListItem = new ArrayList<CustomerListItem>();
	ArrayList<String> arrayCustomerDetailUrl = new ArrayList<String>();
	
	// 공지사항or이용안내 상세
	int m_iCustomerListDetailPage = 1;
	String m_strCustomerListDetailTitle;
	String m_strCustomerListDetailDate;
	int m_iEnterCustomerMenu = 0;
	
	// 이벤트 상세
	String m_strEventDetailType = "";
	String m_strEventDetailTerm = "";
	String m_strEventDetailStats = "";
	boolean m_bIsEventDetail = false;
	boolean m_bDisplayingCustomerDetail = false;
	Bitmap m_bitMapEventOn = null;
	Bitmap m_bitMapEventOff = null;
	
	// 이벤트 응모
	String m_strEventPopupMessage01 = "";
	String m_strEventPopupMessage02 = "";
	String m_strEventPopupMessage03 = "";
	String m_strEventHP = "";
	
	// 검색 기능
	int m_iSearchSelfMode = TITLE;
	int m_iSearchLetterMode;
	int m_iSearchLetterDisplay = ON;
	String m_strSearchWord = "";
	
	// 검색 리스트
	int m_iSearchListItemCount = 0;
	int m_iCurrentSearchListPage = 1;
	int m_iCurrentViewSearchListPage = 1;
	int m_iTotalSearchListPage;
	int m_iRequestSearchListPage = 1;
	ArrayList<SongListItem> arraySearchListItem = new ArrayList<SongListItem>();
	
	// 반주곡 재생
	public String m_strRequestPlaySongID = "";
	String m_strPlaySongUrl = "";
	String m_strPlayVideoUrl = "";
	String m_strPlaySongType = "";
	ArrayList<String> arrPlayList = new ArrayList<String>();
	ArrayList<String> arrStartPlayList = new ArrayList<String>();
	
	// 녹음곡 재생
	String m_strRequestListenSongID = "";
	String m_strMainRequestListenSongID = "";
	String m_strListenSongUrl = "";
	String m_strListeningTitle = "";
	String m_strListeningNick = "";
	String m_strListeningRecommand = "";
	String m_strListeningSongID = "";
	LinearLayout m_layoutListen;
	ArrayList<String> arrListeningOthersRecordID = new ArrayList<String>();
	
	// 이용권 구매
	String m_strPurchaseResult = "";
	
	int m_iPlayVideoCount = 1;
	Video video = (Video)Video.ActivityVideo;
	
	int m_iDisplayWidth = 0;
	int m_iDisplayHeight = 0;
	
	// 휴대폰 인증
	boolean m_bIsCertifyedUser = false;
	boolean m_bIsCertifyTimerActivated = false;
	boolean m_bIsCertifyTimerActivatedPopup = false;
	CountDownTimer m_cdTimer = null;
	CountDownTimer m_cdTimerPopup = null;
	int m_iCertifyTimerMin = 3;
	int m_iCertifyTimerSec = 0;
	int m_iCertifyTimerMinPopup = 3;
	int m_iCertifyTimerSecPopup = 0;
	int m_iAuthModify = 0;
	String m_strResponseAuthNumber = "";
	Util util_certifyProfile = null;
	ImageView m_imgCertifyProfile = null;
	
	// (마이)녹음곡
	boolean m_bIsMyRecordReCertifyBtnFocused = false;
	Util util_myRecordProfile = null;
	ImageView m_imgMyRecordProfile = null;
	
	ImageView m_imgMainQuickBtn01 = null;
	ImageView m_imgMainQuickBtn02 = null;
	Util util_mainQuickBtnOn01 = null;
	Util util_mainQuickBtnOff01 = null;
	Util util_mainQuickBtnOn02 = null;
	Util util_mainQuickBtnOff02 = null;
	SubMenuItem submenuQuickBtn02 = new SubMenuItem();
	
	TicketItem ticketitem01 = new TicketItem();
	TicketItem ticketitem02 = new TicketItem();
	
	boolean m_bPlayMenuBackground = false;
	int m_iCouponFocus = 1;
	String m_strCouponSerial = "";
	Util util_shopItem01 = null;
	Util util_shopItem02 = null;
	Bitmap m_bitMapShopItem01 = null;
	Bitmap m_bitMapShopItem02 = null;
	boolean m_bCouponUser = false;
	String m_strCouponTerm = "";
	Bitmap m_bitMapKYLogo = null;
	Util util_kyLogo = null;
	
	int m_iVideoState = STOP;
	
	boolean m_bIsFocusedOnBook = false;
	
	Util util_MIC = null;
	Bitmap m_bitMapMic = null;
	
	boolean m_bIsBeforeRegistMyRecord = true;
	
	boolean m_bIsLongLoading = false;
    
    //for BOX
    SystemInfo si = new SystemInfo();
    SystemInfo bi = new SystemInfo();
    boolean m_bLoadMICLibrary = false;

	@SuppressLint({ "InlinedApi", "NewApi" })
	@SuppressWarnings("deprecation")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		ActivityMain = Main.this;
		
		
		//for BOX
		try {
			if (m_iVender == SMART_BOX) {
				System.loadLibrary("mic");
				m_bLoadMICLibrary = true;
			}
		} catch (Throwable e) {
			m_bLoadMICLibrary = false;
		}
		
		
		// KP Params
		m_strRequestDoamin = REQUEST_DOMAIN;
		if (m_iVender == SMART_BOX) {
			m_strAppName = P_APPNAME_BOX;
		} else {
			m_strAppName = P_APPNAME_STB;
		}
		m_strDebug = P_DEBUG;
		m_strMarket = P_MARKET;
		m_strVersion = P_VER;
		m_strMid = "";
		m_strSTBID = "";
		m_strAccount = "";
		m_strNCode = P_NCODE;
		m_strLCode = P_LCODE;
		m_strModel = "";
		m_strMac = "";
		m_strOS = P_OS;
		m_strOSVersion = P_OSVER;
		m_strAPIVersion = P_APIVER;
		m_strPassType = TICKET_NONE;
		m_strPassCount = "";
		if (m_iVender == SMART_BOX) {
			m_strAPIKey = P_APIKEY_BOX;
		} else {
			m_strAPIKey = P_APIKEY_STB;
		}		
		SettingBaseLayout();
		
		setContentView(m_layoutHome);
		//if (m_iVender != SMART_TEST) {
			HideVirtualRemote();
		//}
		
		// 세탑이면 홈 프로필 이미지 위치 보정
		if (m_iVender == SMART_STB) {
			LinearLayout layoutTopBlank = (LinearLayout)findViewById(R.id.layout_main_listen_top_blank);
			LinearLayout layoutBottomBlank = (LinearLayout)findViewById(R.id.layout_main_listen_bottom_blank);
			LinearLayout layoutLeftBlank = (LinearLayout)findViewById(R.id.layout_main_listen_bottom_left);
			LinearLayout layoutRightBlank = (LinearLayout)findViewById(R.id.layout_main_listen_bottom_right);
			
			LinearLayout.LayoutParams lpTop = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
			lpTop.setMargins(0, 0, 0,0);
			lpTop.weight = 243; // 241
			layoutTopBlank.setLayoutParams(lpTop);
			
			LinearLayout.LayoutParams lpBottom = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
			lpBottom.setMargins(0, 0, 0,0);
			lpBottom.weight = 32; // 34
			layoutBottomBlank.setLayoutParams(lpBottom);
			
			LinearLayout.LayoutParams lpLeft = new LinearLayout.LayoutParams(0, LayoutParams.FILL_PARENT);
			lpLeft.setMargins(0, 0, 0,0);
			lpLeft.weight = 103; // 101
			layoutLeftBlank.setLayoutParams(lpLeft);
			
			LinearLayout.LayoutParams lpRight = new LinearLayout.LayoutParams(0, LayoutParams.FILL_PARENT);
			lpRight.setMargins(0, 0, 0,0);
			lpRight.weight = 86; // 88
			layoutRightBlank.setLayoutParams(lpRight);
		}
		
		sdPath = getApplicationContext().getExternalFilesDir(null) + "";
		
		if (m_iVender != SMART_BOX) {
			m_typeface = Typeface.createFromAsset(getAssets(), "yun.ttf.mp3");
		} else {
			m_typeface = Typeface.createFromAsset(getAssets(), "nanum.ttf.mp3");
		}
		
	    ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    /*
	     * STBID, MAC을 조작하고 싶을 때 사용한다
	     * DAE7F8FA-EE64-11DF-A530-FF677D27FE51 0:21:4C:DA:FE:B2
	     * 2405403C-885F-11E1-B168-1197FB8290F3 0:8:B9:2B:97:FD
	     * 8F71FD70-50E2-11E3-9C8F-07238ADCC295 0:8:B9:CD:D:9A
	     */
	    
	    if (m_iVender == SMART_STB) {
	    	Bundle bundle = getIntent().getExtras();
	    	m_strSTBID = bundle.getString("STBID");
	    	//STBID = "8F71FD70-50E2-11E3-9C8F-07238ADCC295";
	    	m_strMacOrigin = bundle.getString("MAC");
	    	
	    	if (m_strMacOrigin.substring(0, 1).equals("0")) {
				m_strMac = m_strMacOrigin.substring(1, m_strMacOrigin.length());
			} else {
				m_strMac = m_strMacOrigin;
			}
			
			m_strMac = m_strMac.replace(":0", ":");
	    	m_strSTBIDOrigin = bundle.getString("STBIDOrigin");
	    	m_strModel = bundle.getString("MODELNAME");
	    	//m_strMacOrigin = "0:8:B9:CD:D:9A";
	    	//m_strModel = "TEST";
	    } else if (m_iVender == SMART_BOX) {
	    	String STBID = SystemInfo.GetSystemProperty("STB_ID");
	    	//String STBID = "8F71FD70-50E2-11E3-9C8F-07238ADCC295";
	    	
	    	int i = 0;
			while(i < STBID.length()) {
				if (!STBID.substring(i, i + 1).equals("{") && !STBID.substring(i, i + 1).equals("}")) {
					m_strSTBIDOrigin = m_strSTBIDOrigin + STBID.substring(i, i + 1);
				}
				
				i++;
			}
	    	
	    	m_strSTBID = Base64.encodeToString(m_strSTBIDOrigin.getBytes(), Base64.NO_WRAP);
	    	m_strMacOrigin = SystemInfo.GetSystemProperty("ETHERNET_MAC");
	    	//m_strMacOrigin = "0:8:B9:CD:D:9A";
	    	
	    	if (m_strMacOrigin.substring(0, 1).equals("0")) {
				m_strMac = m_strMacOrigin.substring(1, m_strMacOrigin.length());
			} else {
				m_strMac = m_strMacOrigin;
			}
			
			m_strMac = m_strMac.replace(":0", ":");
	    	
	    	m_strModel = SystemInfo.GetSystemProperty("MODEL_NAME");
	    	//m_strModel = "TEST";
	    	
	    	if (m_bLoadMICLibrary) {
	    		ShowMessageCommon(CLOSE_AUTO_MID_BOTTOMRIGHT, getString(R.string.info), "체감 상 반주곡 음량이 작게 들릴 수 있습니다.\r\n노래방 실행 및 종료 시에 볼륨을 조절해주세요.");
	    	} else {
	    		ShowMessageCommon(CLOSE_AUTO_MID_BOTTOMRIGHT, getString(R.string.info), "현재 USB 마이크를 사용할 수 없습니다.\r\nB box 설정 메뉴에서 소프트웨어 업데이트 해주세요.");
	    	}
	    } else {
	    	m_strSTBIDOrigin = "8F71FD70-50E2-11E3-9C8F-07238ADCC295";
	    	m_strSTBID = "8F71FD70-50E2-11E3-9C8F-07238ADCC295";
	    	m_strMacOrigin = "0:8:B9:CD:D:9A";
	    	m_strMac = "0:8:B9:CD:D:9A";
	    	m_strModel = "TEST";
	    }
	    
	    /*
	     * STB로 시작했는데 모델명을 취득해보니 UHD더라
	     */
	    if (m_iVender == SMART_STB) {
		    if (m_strModel.equals("BHX-UH200")) {
		    	m_iVender = SMART_UHD;
		    	m_strAppName = P_APPNAME_UHD;
				m_strAPIKey = P_APIKEY_UHD;
		    }
	    }
	    
	    Display display = getWindow().getWindowManager().getDefaultDisplay();
        Point displaySize = new Point();
        display.getSize(displaySize);
        m_iDisplayWidth = displaySize.x;
        m_iDisplayHeight = displaySize.y;
        
        /*
         * 취득한 세탑 정보 등을 화면에 뿌릴 때 쓴다 (상단 예약곡 텍스트뷰)
         * TextView txtEngageListMain = (TextView)findViewById(R.id.txt_top_engage_list_main);
         * txtEngageListMain.setText(m_iDisplayWidth + "_" + m_iDisplayHeight);
         */
        
        m_imgMainQuickBtn02 = (ImageView)findViewById(R.id.img_main_quick_2);
        
        if (m_iVender != SMART_TEST) {
        	VASS(REQUEST_VASS_DAY_CHECK);
        } else {
	        //테스트인 경우 VASS를 통하지 않기 위해 임의의 이용권 정보 넣고 바로 메인으로 간다
	        TextView txtBottomProductMonth = (TextView)findViewById(R.id.txt_bottom_product);
	        txtBottomProductMonth.setText("You have monthly ticket");
			
			m_strHasTicket = TICKET_MONTH;
			m_strPassType = m_strHasTicket;
			
			KP(REQUEST_MAIN, KP_0000, MAIN, MENU);
        }
        
        if (!m_bPlayMenuBackground) {
        	LinearLayout layoutBackground = (LinearLayout)findViewById(R.id.layout_main);
			layoutBackground.setBackgroundResource(R.drawable.bg);
        }
	}
	
	@Override
	protected void onStart() {
		if (P_DEVICE == SMART_BOX) {
			//for BOX
			if (m_bLoadMICLibrary) {
				Miclib.openMic();
			}
        }
		
		super.onStart();
	}
	
	@Override
	protected void onStop() {
		if (P_DEVICE == SMART_BOX) {
			//for BOX
			if (m_bLoadMICLibrary) {
				Miclib.closeMic();
			}
        }
		
		// 1. 반주곡 STOP 
		Play playActivity = (Play)Play.ActivityPlay;
		if (playActivity != null) {
			StopPlaying(STOP);
		}
		
		// 2. 녹음곡 STOP
		if (listen != null) {
			if (listen.isListening()) {
				exitListening();
			}
		}
		
		super.onStop();
	}
	
	@Override
	protected void onDestroy() {
		ActivityMain = null;
		
		super.onDestroy();
	}
	
	@Override
	protected void onPause() {
		super.onPause();
		/*
		 * Bbox 예약 시청 알림 팝업
		 */
		
		// 1. 반주곡 재생 중이면 배경화면을 이미지로 전환 
		Play playActivity = (Play)Play.ActivityPlay;
		if (playActivity != null) {
			/*
			if (video.isPlaying() && getVideoState() == STOP) {
				video.stopBackgroundVideo(m_strMainBackgroundVideoUrl, PAUSE);
				
				Intent intent = new Intent(Main.this, Play.class);
				intent.addFlags(Intent.FLAG_ACTIVITY_REORDER_TO_FRONT);
				startActivity(intent);
				
				TaskPauseVideo temp = new TaskPauseVideo();
				Timer tSetPause = new Timer();
				tSetPause.schedule(temp, 500);
			}
			*/
			StopPlaying(STOP);
			ShowMessageCommon(CLOSE_AUTO_LONG, getString(R.string.info), "다른 서비스의 실행으로 반주곡이 중지되었습니다.");
		}
		
		// 2. 녹음곡 중지
		if (listen != null) {
			if (listen.isListening()) {
				exitListening();
				ShowMessageCommon(CLOSE_AUTO_LONG, getString(R.string.info), "다른 서비스의 실행으로 녹음곡이 중지되었습니다.");
			}
		}
	}
	
	@Override
	protected void onResume() {
		super.onResume();
	}
	
	class TaskPauseVideo extends TimerTask {
		@Override
		public void run() {
			setVideoState(PAUSE);
	   }
	}
	
	public void resume() {
		video.startBackgroundVideo(m_strPlayVideoUrl, REDRAW);
	}
	
	public int getVideoState() {
		return m_iVideoState;
	}
	
	public void setVideoState(int state) {
		m_iVideoState = state;
	}
	
	@SuppressLint("CutPasteId")
	public void setContentViewKaraoke(View view) {
		boolean bInit = false;
		
		String strEngage = "";
		String strEngageList = "";
		String strSongNumber = "00000";
		
		TextView txtEngage = (TextView)findViewById(R.id.txt_top_engage);
		
		if (txtEngage != null) {
			TextView txtEngageList = (TextView)findViewById(R.id.txt_top_engage_list);
			TextView txtSongNumber = (TextView)findViewById(R.id.txt_top_song_number);
			
			strEngage = (String)txtEngage.getText();
			strEngageList = (String)txtEngageList.getText();
			strSongNumber = (String)txtSongNumber.getText();
		} else {
			txtEngage = (TextView)findViewById(R.id.txt_top_engage_main);
			TextView txtEngageList = (TextView)findViewById(R.id.txt_top_engage_list_main);
			TextView txtSongNumber = (TextView)findViewById(R.id.txt_top_song_number);
			
			strEngage = (String)txtEngage.getText();
			strEngageList = (String)txtEngageList.getText();
			strSongNumber = (String)txtSongNumber.getText();
		}
		
		TextView txtProductBefore = (TextView)findViewById(R.id.txt_bottom_product);
		String strProduct = (String)txtProductBefore.getText();
		
		if (view == m_layoutHome) {
			m_iPaneState = HOME;
			m_layoutHome.setVisibility(View.VISIBLE);
		} else {
			m_iPaneState = LIST;
			m_layoutHome.setVisibility(View.INVISIBLE);
		}
		
		if (m_layoutSubMenu == null) {
			bInit = true;
		}
		setContentView(view);
		
		if (bInit) {
			//if (m_iVender != SMART_TEST) {
				HideVirtualRemote();
			//}
			
			// 2Depth 서브메뉴
			m_layoutSubMenu = (LinearLayout)findViewById(R.id.layout_sub_menu);
			
			// 3Depth 컨텐츠
			m_layoutContent = (LinearLayout)findViewById(R.id.layout_content);
		}
		
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    TextView txtProductAfter = (TextView)findViewById(R.id.txt_bottom_product);
	    txtProductAfter.setText(strProduct);
	    
	    // 상단 예약 현황을 새로 갱신
	    if (view == m_layoutHome) {
	    	if (!strEngage.equals("")) {
	    		TextView txtEngageMain = (TextView)findViewById(R.id.txt_top_engage_main);
	    		TextView txtEngageListMain = (TextView)findViewById(R.id.txt_top_engage_list_main);
	    		
	    		
	    		txtEngageMain.setText(strEngage);
	    		txtEngageListMain.setText(strEngageList);
	    	}

	    	if (!strSongNumber.equals("00000")) {
	    		SetTopNumber(strSongNumber);
	    	}
	    	
	    	if (!m_bPlayMenuBackground) {
	    		if (!isPlaying()) {
	    			LOG(CLASS, "show main bg");
	    			LinearLayout layoutBackground = (LinearLayout)findViewById(R.id.layout_main);
	    			layoutBackground.setBackgroundResource(R.drawable.bg);
	    		} else {
	    			LinearLayout layoutBackground = (LinearLayout)findViewById(R.id.layout_main);
	    			layoutBackground.setBackgroundResource(R.drawable.blank);
	    		}
	        }
	    	
	    	ImageView logo = (ImageView)findViewById(R.id.img_ky_logo);
			logo.setImageBitmap(m_bitMapKYLogo);
	    } else {
	    	if (!strEngage.equals("")) {
	    		TextView txtEngageMain = (TextView)findViewById(R.id.txt_top_engage);
	    		TextView txtEngageListMain = (TextView)findViewById(R.id.txt_top_engage_list);
	    		
	    		txtEngageMain.setText(strEngage);
	    		txtEngageListMain.setText(strEngageList);
	    	}

	    	if (!strSongNumber.equals("00000")) {
	    		SetTopNumber(strSongNumber);
	    	}
	    	
	    	if (!m_bPlayMenuBackground) {
	    		if (!isPlaying()) {
	    			LOG(CLASS, "show list bg");
	    			LinearLayout layoutBackground = (LinearLayout)findViewById(R.id.list);
	    			layoutBackground.setBackgroundResource(R.drawable.bg);
	    		} else {
	    			LinearLayout layoutBackground = (LinearLayout)findViewById(R.id.list);
	    			layoutBackground.setBackgroundResource(R.drawable.blank);
	    		}
	        }
	    	
	    	ImageView logo = (ImageView)findViewById(R.id.img_ky_logo_list);
			logo.setImageBitmap(m_bitMapKYLogo);
	    }
	    
	    // 하단 가이드 텍스트를 새로 갱신
 		if (m_iVender != SMART_BOX) {
 			if (m_bIsHiddenMenu) {
 				if (isPlaying()) {
 					SetBottomGuideText01(R.drawable.common_btn_green, getString(R.string.menu_bottom_open));			// 메뉴 닫힘 = 메뉴 열기
 				}
 			} else {
 				if (isPlaying()) {
 					SetBottomGuideText01(R.drawable.common_btn_green, getString(R.string.menu_bottom_close));			// 메뉴 열림 = 메뉴 닫기
 				}
 			}
 			
			if (isPlaying()) {
				SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_stop_song));		// 반주곡 재생 = 반주곡 중지
			} else {
				if (arrPlayList.size() > 0) {
					SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_start_song));	// 반주곡 중지 = 반주곡 시작
				}
			}
 		} else {
 			if (m_bIsHiddenMenu) {
 				if (isPlaying()) {
 					SetBottomGuideText01(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_open));			// 메뉴 닫힘 = 메뉴 열기
 				}
 			} else {
 				if (isPlaying()) {
 					SetBottomGuideText01(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_close));			// 메뉴 열림 = 메뉴 닫기
 				}
 			}
 			
			if (isPlaying()) {
				SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_stop_song));		// 반주곡 재생 = 반주곡 중지
			} else {
				if (arrPlayList.size() > 0) {
					SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_start_song));	// 반주곡 중지 = 반주곡 시작
				}
			}
 		}
	}
	
	public void addViewKaraoke(LinearLayout layout, View view) {
		if (view == m_layoutCustomerList || view == m_layoutCustomerListEvent) {
			m_bDisplayingCustomerDetail = false;
		}
		
		layout.removeAllViews();
		layout.addView(view);

		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	}
	
	public void setGlobalFont(ViewGroup root) {
	    for(int i = 0; i < root.getChildCount(); i++) {
	        View child = root.getChildAt(i);
	        
	        if (child instanceof TextView) {
	        	((TextView)child).setTypeface(m_typeface);
	        } else if (child instanceof ViewGroup) {
	            setGlobalFont((ViewGroup)child);
	        }
	    }
	    
	    if (m_iVender != SMART_TEST) {
		    for(int i = 0; i < root.getChildCount(); i++) {
				 View child = root.getChildAt(i);
				 
				 child.setFocusable(false);
				 child.setFocusableInTouchMode(false);
		    }
	    }
	}
	
	public void clearAllFocus() {
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
		 for(int i = 0; i < root.getChildCount(); i++) {
			 View child = root.getChildAt(i);
			 
			 child.setFocusable(false);
			 child.setFocusableInTouchMode(false);
		 }
	}
	
	public void hideBackground() {
		LinearLayout layoutBackground = null;
		
		if (m_iPaneState == HOME) {
			layoutBackground = (LinearLayout)findViewById(R.id.layout_main);
		} else {
			layoutBackground = (LinearLayout)findViewById(R.id.list);
		}
		
		layoutBackground.setBackgroundResource(R.drawable.blank);
	}
	
	public void showBackground() {
		LinearLayout layoutBackground = null;
		
		if (m_iPaneState == HOME) {
			layoutBackground = (LinearLayout)findViewById(R.id.layout_main);
		} else {
			layoutBackground = (LinearLayout)findViewById(R.id.list);
		}
		
		layoutBackground.setBackgroundResource(R.drawable.bg);
	}
	
	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (event.getRepeatCount() == 0) {
			if (keyCode == KeyEvent.KEYCODE_HOME) {
				video.finish();
				finish();
			}
			
			// 로딩 중이면 RETURN키 제외한 입력 차단
			if (m_layoutLoading != null) {
				if (keyCode == KeyEvent.KEYCODE_BACK) {
					if (!m_bIsLongLoading) {
						HideLoading();
					} else {
						return false;
					}
				} else {
					return false;
				}
			}
			
			// 메세지박스 떠있으면 차단
			if (m_layoutMessageOkCancel != null) {
				if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
					m_iMessageOkCancelFocus = OK;
					Button btnOK = (Button)findViewById(R.id.btn_message_okcancel_ok);
					Button btnCancel = (Button)findViewById(R.id.btn_message_okcancel_cancel);
					btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
					btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
				} else if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
					m_iMessageOkCancelFocus = CANCEL;
					Button btnOK = (Button)findViewById(R.id.btn_message_okcancel_ok);
					Button btnCancel = (Button)findViewById(R.id.btn_message_okcancel_cancel);
					btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);
					btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
				}
				
				if (keyCode == KeyEvent.KEYCODE_BACK) {
					HideMessageOkCancel();
				}
				
				if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_DPAD_CENTER ) {
					// 이용권 구매 메뉴로 가겠냐는 메세지에서 [확인] 또는 [취소] 선택했을 때, 녹음곡 감상 상태였으면 다시 메뉴로 돌려준다
					if (m_bIsGoToPurchaseMessage) {
						if (remote.m_iState == STATE_LISTENING) {
							RemoveListenDisplay();
							ShowMenu();
						}
					}
					
					if (m_iMessageOkCancelFocus == OK) {
						HideMessageOkCancel();
						
						if (m_bIsGoToPurchaseMessage) {
							m_bListAlreadyReflashed = false;
							
							remote.m_iSubMainMenuFocus = 4;
							remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
							
							clickMainMenu();
						} else {
							video.finish();
							finish();
						}
					} else {
						HideMessageOkCancel();
					}
				}
				return false;
			}
			
			if (m_bShowMessage) {
				if (keyCode == KeyEvent.KEYCODE_BACK ||
						keyCode == KeyEvent.KEYCODE_ENTER ||
						keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
					if (m_bIsExit) {
						video.finish();
						finish();
					} else {
						HideMessageBoxOk();
					}
				}
				return false;
			}
			
			if (CheckNumberKey(keyCode)) {
				if (!m_bIsFocusedOnPassNumber) {
					ShowNumberSearch(keyCode);
				} else {
					inputPPXPass(keyCode);
				}
				return false;
			}
			
			if (m_bIsNumberSearch) {
				if (keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
					if (m_bHaveNumberSearchResult) {
						m_strSearchID = m_strInputNumber;
						HideNumberSearch();
						AddEngageSong(m_strSearchID);
						
						// 140422 재생 중이 아닐 때만 '예약곡 시작' 으로 바뀌도록 함
						if (!isPlaying()) {
							if (m_iVender != SMART_BOX) {
								SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
							} else {
								SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
							}
						}
					}
				} else if (keyCode == KeyEvent.KEYCODE_BACK) {
					HideNumberSearch();
				}
				
				return false;
			}
			
			// 재생 중인 메뉴 숨김 상태면 특정 키 제외 입력 차단
			if (m_bIsHiddenMenu && isPlaying()) {
				if (keyCode != KeyEvent.KEYCODE_BACK &&
						keyCode != KeyEvent.KEYCODE_PROG_BLUE &&
						keyCode != KeyEvent.KEYCODE_MEDIA_FAST_FORWARD && 
						keyCode != KeyEvent.KEYCODE_PROG_RED &&
						keyCode != KeyEvent.KEYCODE_MEDIA_REWIND &&
						keyCode != KeyEvent.KEYCODE_PROG_YELLOW &&
						keyCode != KeyEvent.KEYCODE_MEDIA_STOP &&
						keyCode != KeyEvent.KEYCODE_PROG_GREEN &&
						keyCode != KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {
					return false;
				}
			}
			
			if (keyCode == KeyEvent.KEYCODE_CHANNEL_UP) {
				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), "CHANNEL_UP");
				return false;
			}
			
			if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {																// RIGHT
				remote.inputKey(RIGHT);
				setGUI(RIGHT);
			} else if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {														// LEFT
				remote.inputKey(LEFT);
				setGUI(LEFT);
			} else if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {															// UP
				remote.inputKey(UP);
				setGUI(UP);
			} else if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {														// DOWN
				if (remote.m_iState == STATE_SONG_LIST || remote.m_iState == STATE_MY_LIST) {
					if (CheckNotContentsSongList()) {
						setGUI(RIGHT);
						return false;
					}
				} else if (remote.m_iState == STATE_CUSTOMER_LIST) {
					if (CheckNotContentsCustomerList()) {
						setGUI(RIGHT);
						return false;
					}
				} else if (remote.m_iState == STATE_SEARCH_LIST) {
					if (CheckNotContentsSearchList()) {
						setGUI(RIGHT);
						return false;
					}
				} else if (remote.m_iState == STATE_MY_RECORD_LIST) {
					if (CheckNotContentsMyRecordList()) {
						setGUI(RIGHT);
						return false;
					}
				}
				remote.inputKey(DOWN);
				setGUI(DOWN);
			} else if (keyCode == KeyEvent.KEYCODE_ENTER) {																// ENTER
				clickGUI();
			} else if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER) {
				clickGUI();
			} else if (keyCode == KeyEvent.KEYCODE_BACK) {																// BACK
				// 숨김 상태고 반주곡 재생 중이면 메뉴 다시 보여주고 반주곡 중지 처리
				if (m_bIsHiddenMenu && isPlaying()) {
					StopPlaying(STOP);
					return false;
				}
				
				// 어떤 화면에서 Back키를 눌렀는지 저장해두었다가, 종료할지 말지를 결정
				int temp = remote.m_iState;
				
				exitGUI();
				
				if (temp == STATE_MAIN_MENU) {
					m_bIsGoToPurchaseMessage = false;
					ShowMessageOkCancel(getString(R.string.exit), getString(R.string.exit_app));
				}
				return false;
			} else if (keyCode == KeyEvent.KEYCODE_PROG_RED) {															// RED
				RemoveListenDisplay();
				goHome();
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_MEDIA_REWIND) {
				RemoveListenDisplay();
				goHome();
			} else if (keyCode == KeyEvent.KEYCODE_PROG_GREEN) {														// GREEN
				if (m_iVender == SMART_BOX) {
					LOG(CLASS, "GREEN, [KEYCODE_PROG_GREEN]");
					
					// 재생 중일 때
					if (isPlaying()) {
						// 재생 중지
						StopPlaying(STOP);
					} else {
					// 재생 중이 아닐 때
						String strNextSong = getEngageSong();
						
						if (!strNextSong.equals("")) {
							RemoveListenDisplay();
							
							// 예약곡이 있으면 예약곡 시작
							deleteEngageSong();
							m_strRequestPlaySongID = strNextSong;
							KP(REQUEST_SONG_PLAY, KP_1016, "", "");
						}
					}
				} else {
					if (isPlaying()) {
						LOG(CLASS, "GREEN, [KEYCODE_PROG_GREEN] Now Playing");
						
						if (m_bIsHiddenMenu) {
							LOG(CLASS, "GREEN, SHOW");
							ShowMenu();
						} else {
							LOG(CLASS, "GREEN, HIDE");
							HideMenu();
						}
					}
				}
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {
				LOG(CLASS, "GREEN, [KEYCODE_MEDIA_PLAY_PAUSE]");
				
				// 재생 중일 때
				if (isPlaying()) {
					// 재생 중지
					StopPlaying(STOP);
				} else {
				// 재생 중이 아닐 때
					String strNextSong = getEngageSong();
					
					if (!strNextSong.equals("")) {
						RemoveListenDisplay();
						
						// 예약곡이 있으면 예약곡 시작
						deleteEngageSong();
						m_strRequestPlaySongID = strNextSong;
						KP(REQUEST_SONG_PLAY, KP_1016, "", "");
					}
				}
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_PROG_YELLOW) {													// YELLOW
				if (m_iVender != SMART_BOX) {
					LOG(CLASS, "YELLOW, [KEYCODE_PROG_YELLOW]");
					
					// 재생 중일 때
					if (isPlaying()) {
						// 재생 중지
						StopPlaying(STOP);
					} else {
					// 재생 중이 아닐 때
						String strNextSong = getEngageSong();
						
						if (!strNextSong.equals("")) {
							RemoveListenDisplay();
							
							// 예약곡이 있으면 예약곡 시작
							deleteEngageSong();
							m_strRequestPlaySongID = strNextSong;
							KP(REQUEST_SONG_PLAY, KP_1016, "", "");
						}
					}
				} else {
					if (isPlaying()) {
						LOG(CLASS, "YELLOW, [KEYCODE_PROG_YELLOW] Now Playing");
						
						if (m_bIsHiddenMenu) {
							LOG(CLASS, "YELLOW, SHOW");
							ShowMenu();
						} else {
							LOG(CLASS, "YELLOW, HIDE");
							HideMenu();
						}
					}
				}
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_MEDIA_STOP) {
				LOG(CLASS, "YELLOW, [KEYCODE_MEDIA_STOP]");
				
				if (isPlaying()) {
					LOG(CLASS, "YELLOW, [KEYCODE_MEDIA_STOP] Now Playing");
					
					if (m_bIsHiddenMenu) {
						LOG(CLASS, "YELLOW, SHOW");
						ShowMenu();
					} else {
						LOG(CLASS, "YELLOW, HIDE");
						HideMenu();
					}
				}
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_PROG_BLUE) {													// BLUE
				
				if (m_bIsCertifyTimerActivated) {
					m_cdTimer.cancel();
				}
				
				RemoveListenDisplay();
				goSearch();
				
				return true;
			} else if (keyCode == KeyEvent.KEYCODE_MEDIA_FAST_FORWARD) {
				
				if (m_bIsCertifyTimerActivated) {
					m_cdTimer.cancel();
				}
				
				RemoveListenDisplay();
				goSearch();
				
				return true;
			}
		}

		return super.onKeyDown(keyCode, event);
	}
	
	void onBtnMainSing(View view) {
		remote.m_iMainMenuFocus = 1;
		clickMainMenu();
	}
	
	void onBtnMainListen(View view) {
		remote.m_iMainMenuFocus = 2;
		clickMainMenu();
	}
	
	void onBtnMainMy(View view) {
		remote.m_iMainMenuFocus = 3;
		clickMainMenu();
	}
	
	void onBtnMainShop(View view) {
		remote.m_iMainMenuFocus = 4;
		clickMainMenu();
	}
	
	void onBtnMainCustomer(View view) {
		remote.m_iMainMenuFocus = 5;
		clickMainMenu();
	}
	
	void onBtnSubMainSing(View view) {
		remote.m_iMainMenuFocus = 1;
		clickMainMenu();
	}
	
	void onBtnSubMainListen(View view) {
		remote.m_iMainMenuFocus = 2;
		clickMainMenu();
	}
	
	void onBtnSubMainMy(View view) {
		remote.m_iMainMenuFocus = 3;
		clickMainMenu();
	}
	
	void onBtnSubMainShop(View view) {
		remote.m_iMainMenuFocus = 4;
		clickMainMenu();
	}
	
	void onBtnSubMainCustomer(View view) {
		remote.m_iMainMenuFocus = 5;
		clickMainMenu();
	}
	
	public void onClickBtnLeft(View view) {
		if (m_layoutMessageOkCancel != null) {
			m_iMessageOkCancelFocus = OK;
			Button btnOK = (Button)findViewById(R.id.btn_message_okcancel_ok);
			Button btnCancel = (Button)findViewById(R.id.btn_message_okcancel_cancel);
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
			return;
		}
					
		remote.inputKey(LEFT);
		
		setGUI(LEFT);
	}
	
	public void onClickBtnRight(View view) {
		if (m_layoutMessageOkCancel != null) {
			m_iMessageOkCancelFocus = CANCEL;
			Button btnOK = (Button)findViewById(R.id.btn_message_okcancel_ok);
			Button btnCancel = (Button)findViewById(R.id.btn_message_okcancel_cancel);
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
			return;
		}
		
		remote.inputKey(RIGHT);
		
		setGUI(RIGHT);
	}
	
	public void onClickBtnUp(View view) {
		remote.inputKey(UP);
		setGUI(UP);
	}
	
	public void onClickBtnDown(View view) {
		if (remote.m_iState == STATE_SONG_LIST || remote.m_iState == STATE_MY_LIST) {
			if (CheckNotContentsSongList()) {
				setGUI(RIGHT);
				return;
			}
		} else if (remote.m_iState == STATE_CUSTOMER_LIST) {
			if (CheckNotContentsCustomerList()) {
				setGUI(RIGHT);
				return;
			}
		} else if (remote.m_iState == STATE_SEARCH_LIST) {
			if (CheckNotContentsSearchList()) {
				setGUI(RIGHT);
				return;
			}
		} else if (remote.m_iState == STATE_MY_RECORD_LIST) {
			if (CheckNotContentsMyRecordList()) {
				setGUI(RIGHT);
				return;
			}
		}
		remote.inputKey(DOWN);
		setGUI(DOWN);
	}
	
	public void onClickBtnEnter(View view) {
		if (m_layoutMessageOkCancel != null) {
			HideMessageOkCancel();
		}
		
		if (m_bIsHiddenMenu) {
			StopPlaying(STOP);
			return;
		}
		
		if (m_bShowMessage) {
			if (m_bIsExit) {
				video.finish();
				finish();
			} else {
				HideMessageBoxOk();
			}
			return;
		}
		
		if (m_bIsNumberSearch) {
			if (m_bHaveNumberSearchResult) {
				m_strSearchID = m_strInputNumber;
				HideNumberSearch();
				AddEngageSong(m_strSearchID);
			}
			return;
		}
		
		clickGUI();
	}
	
	public void onClickBtnReturn(View view) {
		if (m_layoutMessageOkCancel != null) {
			HideMessageOkCancel();
		}
		
		if (m_bShowMessage) {
			if (m_bIsExit) {
				video.finish();
				finish();
			} else {
				HideMessageBoxOk();
			}
			return;
		}
		
		if (m_bIsNumberSearch) {
			HideNumberSearch();
			return;
		}
		
		if (m_bIsHiddenMenu && isPlaying()) {
			StopPlaying(STOP);
			return;
		}
		
		int temp = remote.m_iState;
		
		exitGUI();
		
		if (temp == STATE_MAIN_MENU) {
			m_bIsGoToPurchaseMessage = false;
			ShowMessageOkCancel(getString(R.string.exit), getString(R.string.exit_app));
		}
	}
	
	public void onClickBtnRed(View view) {
		RemoveListenDisplay();
		goHome();
	}
	
	public void onClickBtnGreen(View view) {
		RemoveListenDisplay();
		
		if (m_iVender == SMART_BOX) {
			// 재생 중일 때
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(STOP);
			} else {
			// 재생 중이 아닐 때
				String strNextSong = getEngageSong();
				
				if (!strNextSong.equals("")) {
					// 예약곡이 있으면 예약곡 시작
					deleteEngageSong();
					m_strRequestPlaySongID = strNextSong;
					KP(REQUEST_SONG_PLAY, KP_1016, "", "");
				} else {
					// 예약곡이 없으면 인기곡 이동
					if (m_bIsHiddenMenu) {
						ShowMenu();
					}
						
					remote.m_iSubMainMenuFocus = 1;
					remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
					m_bListAlreadyReflashed = false;
					
					clickMainMenu();
				}
			}
		} else {
			if (isPlaying()) {
				LOG(CLASS, "GREEN, Now Playing");
				
				if (m_bIsHiddenMenu) {
					LOG(CLASS, "GREEN, SHOW");
					ShowMenu();
				} else {
					LOG(CLASS, "GREEN, HIDE");
					HideMenu();
				}
			}
		}
	}
	
	public void onClickBtnYellow(View view) {
		RemoveListenDisplay();
		
		if (m_iVender != SMART_BOX) {
			// 재생 중일 때
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(STOP);
			} else {
			// 재생 중이 아닐 때
				String strNextSong = getEngageSong();
				
				if (!strNextSong.equals("")) {
					// 예약곡이 있으면 예약곡 시작
					deleteEngageSong();
					m_strRequestPlaySongID = strNextSong;
					KP(REQUEST_SONG_PLAY, KP_1016, "", "");
				} else {
					// 예약곡이 없으면 인기곡 이동
					if (m_bIsHiddenMenu) {
						ShowMenu();
					}
						
					remote.m_iSubMainMenuFocus = 1;
					remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
					m_bListAlreadyReflashed = false;
					
					clickMainMenu();
				}
			}
		} else {
			if (isPlaying()) {
				if (m_bIsHiddenMenu) {
					ShowMenu();
				} else {
					HideMenu();
				}
			}
		}
	}
	
	public void onClickBtnBlue(View view) {
		RemoveListenDisplay();
		goSearch();
	}
	
	public void onClickBtnHide(View view) {
		HideVirtualRemote();
	}
	
	public void onClickBtnNum1(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_1);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_1);
		}
	}
	
	public void onClickBtnNum2(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_2);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_2);
		}
	}
	
	public void onClickBtnNum3(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_3);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_3);
		}
	}
	
	public void onClickBtnNum4(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_4);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_4);
		}
	}
	
	public void onClickBtnNum5(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_5);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_5);
		}
	}
	
	public void onClickBtnNum6(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_6);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_6);
		}
	}
	
	public void onClickBtnNum7(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_7);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_7);
		}
	}
	
	public void onClickBtnNum8(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_8);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_8);
		}
	}
	
	public void onClickBtnNum9(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_9);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_9);
		}
	}
	
	public void onClickBtnNum0(View view) {
		if (!m_bIsFocusedOnPassNumber) {
			ShowNumberSearch(KeyEvent.KEYCODE_0);
		} else {
			inputPPXPass(KeyEvent.KEYCODE_0);
		}
	}
	
	protected void setGUI(int keyID) {
		switch(remote.m_iState)
		{
		case STATE_MAIN_MENU :
			displayMainMenu(keyID);
			break;
		case STATE_SUB_MAIN_MENU :
			displaySubMainMenu(keyID);
			break;
		case STATE_SING_SUB_MENU :
			displaySingSubMenu(keyID);
			break;
		case STATE_SING_SUB_GENRE :
			displaySingSubGenreMenu(keyID);
			break;
		case STATE_SONG_LIST :
			displaySongList(keyID);
			break;
		case STATE_SONG_LIST_DETAIL :
			displaySongListDetail(keyID); 
			break;
		case STATE_MY_SUB_MENU :
			displayMySubMenu(keyID);
			break;
		case STATE_MY_LIST :
			displayMyList(keyID);
			break;
		case STATE_SHOP_SUB_MENU :
			displayShopSubMenu(keyID);
			break;
		case STATE_SHOP_TICKET :
			displayShopTicket(keyID);
			break;
		case STATE_MESSAGE_PPV_INFO :
			displayPPVInfo(keyID);
			break;
		case STATE_MESSAGE_PPV_PASS :
			displayPPXPass(keyID);
			break;
		case STATE_MESSAGE_PPM_NOTICE :
			displayPPMNotice(keyID);
			break;
		case STATE_MESSAGE_GO_CERTIFY :
			displayGOCertify(keyID);
			break;
		case STATE_SHOP_CERTIFY :
			displayShopCertify(keyID);
			break;
		case STATE_CUSTOMER_SUB_MENU :
			displayCustomerSubMenu(keyID);
			break;
		case STATE_CUSTOMER_LIST :
		case STATE_CUSTOMER_LIST_EVENT :
			displayCustomerList(keyID);
			break;
		case STATE_CUSTOMER_LIST_DETAIL :
			displayCustomerDetail(keyID);
			break;
		case STATE_SEARCH_SUB_MENU :
			displaySearchSubMenu(keyID);
			break;
		case STATE_SEARCH_SELF :
			displaySearchSelf(keyID);
			break;
		case STATE_SEARCH_LETTER_KOR :
			displaySearchLetter(keyID);
			break;
		case STATE_SEARCH_LETTER_ENG :
			displaySearchLetter(keyID);
			break;
		case STATE_SEARCH_LETTER_NUM :
			displaySearchLetter(keyID);
			break;
		case STATE_SEARCH_LIST :
			displaySearchList(keyID);
			break;
		case STATE_LISTEN_SUB_MENU :
			displayListenSubMenu(keyID);
			break;
		case STATE_LISTEN_LIST :
			displayListenList(keyID);
			break;
		case STATE_SEARCH_LIST_DETAIL :
			displaySongListDetail(keyID); 
			break;
		case STATE_LISTENING :
			displayListeing(keyID);
			break;
		case STATE_LISTENING_OTEHR :
			displayListenOther(keyID);
			break;
		case STATE_CERTIFY_HP :
		case STATE_EVENT_HP :
			displayCertifyHP(keyID);
			break;
		case STATE_CERTIFY :
			displayCertify(keyID);
			break;
		case STATE_MY_RECORD_LIST :
			displayMyRecordList(keyID);
			break;
		case STATE_MY_RECORD_NONE :
		case STATE_MY_RECORD_BEFORE :
			displayMyRecordNone(keyID);
			break;
		}
	}
	
	protected void clickGUI() {
		switch(remote.m_iState)
		{
		case STATE_MAIN_MENU :
			clickMainMenu();
			break;
		case STATE_SUB_MAIN_MENU :
			clickSubMainMenu();
			break;
		case STATE_SING_SUB_MENU :
			clickSingSubMenu();
			break;
		case STATE_SING_SUB_GENRE :
			clickSingSubGenreMenu();
			break;
		case STATE_SONG_LIST :
			clickSongList();
			break;
		case STATE_SONG_LIST_DETAIL :
			clickSongListDetail();
			break;
		case STATE_SHOP_SUB_MENU :
			clickShopSubMenu();
			break;
		case STATE_CUSTOMER_SUB_MENU :
			clickCustomerSubMenu();
			break;
		case STATE_CUSTOMER_LIST :
		case STATE_CUSTOMER_LIST_EVENT :
			clickCustomerList();
			break;
		case STATE_CUSTOMER_LIST_DETAIL :
			clickEventDetail();
			break;
		case STATE_SEARCH_SUB_MENU :
			clickSearchSubMenu();
			break;
		case STATE_SEARCH_SELF :
			clickSearchSelf();
			break;
		case STATE_SEARCH_LETTER_KOR :
			clickSearchLetter();
			break;
		case STATE_SEARCH_LETTER_ENG :
			clickSearchLetter();
			break;
		case STATE_SEARCH_LETTER_NUM :
			clickSearchLetter();
			break;
		case STATE_SEARCH_LIST :
			clickSearchList();
			break;
		case STATE_LISTEN_SUB_MENU :
			clickListenSubMenu();
			break;
		case STATE_LISTEN_LIST :
			clickListenList();
			break;
		case STATE_MY_SUB_MENU :
			clickMySubMenu();
			break;
		case STATE_MY_LIST :
			clickSongList();
			break;
		case STATE_SEARCH_LIST_DETAIL :
			clickSearchListDetail();
			break;
		case STATE_LISTENING : 
			clickListening();
			break;
		case STATE_SHOP_CERTIFY :
			clickShopCertify();
			break;
		case STATE_CERTIFY_HP :
		case STATE_EVENT_HP :
			clickCertifyHP();
			break;
		case STATE_CERTIFY :
			clickCertify();
			break;
		case STATE_LISTENING_OTEHR :
			clickListeningOther();
			break;
		case STATE_SHOP_TICKET :
			clickShopTicket();
			break;
		case STATE_MESSAGE_PPV_INFO :
			clickPPVInfo();
			break;
		case STATE_MESSAGE_PPV_PASS :
			clickPPXPass();
			break;
		case STATE_MESSAGE_PPM_NOTICE :
			clickPPMNotice();
			break;
		case STATE_MESSAGE_GO_CERTIFY :
			clickGOCertify();
			break;
		case STATE_MESSAGE_PPV_SUCCESS :
			exitPPV();
			break;
		case STATE_MY_RECORD_LIST :
			clickListenList();
			break;
		case STATE_MY_RECORD_NONE :
		case STATE_MY_RECORD_BEFORE :
			clickMyRecordNone();
			break;
		}
	}
	
	protected void exitGUI() {
		LOG(CLASS, "STATE Exit = " + String.valueOf(remote.m_iState));
		
		switch(remote.m_iState)
		{
		case STATE_MAIN_MENU :
			break;
		case STATE_SUB_MAIN_MENU :
			goHome();
			break;
		case STATE_SING_SUB_MENU :
			exitSingSubMenu();
			break;
		case STATE_SING_SUB_GENRE :
			exitSingSubGenreMenu();
			break;
		case STATE_SONG_LIST :
			exitSongList();
			break;
		case STATE_SONG_LIST_DETAIL :
			exitSongListDetail();
			break;
		case STATE_MY_SUB_MENU :
			exitMySubMenu();
			break;
		case STATE_MY_LIST :
			exitMyList();
			break;
		case STATE_SHOP_SUB_MENU :
			exitShopSubMenu();
			break;
		case STATE_SHOP_TICKET :
			exitTicket();
			break;
		case STATE_MESSAGE_PPV_INFO :
		case STATE_MESSAGE_PPV_PASS :
		case STATE_MESSAGE_PPV_SUCCESS :
		case STATE_MESSAGE_PPM_NOTICE :
		case STATE_MESSAGE_GO_CERTIFY :
			exitPPV();
			break;
		case STATE_SHOP_CERTIFY :
			exitCertify();
			break;
		case STATE_CUSTOMER_SUB_MENU :
			exitCustomerSubMenu();
			break;
		case STATE_CUSTOMER_LIST :
		case STATE_CUSTOMER_LIST_EVENT :
			exitCustomerList();
			break;
		case STATE_CUSTOMER_LIST_DETAIL :
			exitCustomerListDetail();
			break;
		case STATE_SEARCH_SUB_MENU :
			exitSearchSubMenu();
			break;
		case STATE_SEARCH_SELF :
			exitSearchSelf();
			break;
		case STATE_SEARCH_LETTER_KOR :
		case STATE_SEARCH_LETTER_ENG :
		case STATE_SEARCH_LETTER_NUM :
			exitSearchLetter();
			break;
		case STATE_LISTEN_LIST :
			exitListenList();
			break;
		case STATE_LISTEN_SUB_MENU :
			exitListenSubMenu();
			break;
		case STATE_LISTENING :
			exitListening();
			break;
		case STATE_SEARCH_LIST_DETAIL :
			exitSearchListDetail();
			break;
		case STATE_SEARCH_LIST :
			exitSearchList();
			break;
		case STATE_LISTENING_OTEHR :
			exitListeningOther();
			break;
		case STATE_CERTIFY_HP :
		case STATE_EVENT_HP :
			exitCertifyHP();
			break;
		case STATE_CERTIFY :
			exitCertifyNumber();
			break;
		case STATE_MY_RECORD_LIST :
			exitMyRecordList();
			break;
		case STATE_MY_RECORD_NONE :
		case STATE_MY_RECORD_BEFORE :
			exitMyRecordNone();
			break;
		}
	}
	
	@SuppressWarnings("deprecation")
	public void clickMainMenu() {
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout layoutSubMenu = null, layoutContent = null;
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		Button btnSubMain = null;
		
		switch(remote.m_iMainMenuFocus)
		{
		case 1 :
			remote.m_iState = STATE_SING_SUB_MENU;
			remote.m_iSubMainMenuFocus = 1;
			
			if (!m_bListAlreadyReflashed) {
				setContentViewKaraoke(m_layoutList);
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.sing_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				layoutContent = (LinearLayout)inf.inflate(R.layout.sing_list, null);
				layoutContent.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutContent);
				
				displaySubMainMenu(NONE);
				
				displaySingSubMenu(INIT);
			} else {
				Button btnSingSubHot = (Button)findViewById(R.id.btn_sing_sub_hot);
				btnSingSubHot.setBackgroundResource(R.drawable.tab_focus_on);
			}
			
			m_bListAlreadyReflashed = false;
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_sing);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_01_focus);
			break;
		case 2 :
			remote.m_iState = STATE_LISTEN_SUB_MENU;
			remote.m_iSubMainMenuFocus = 2;
			remote.m_iListenSubMenuFocus = 1;
			
			if (!m_bListAlreadyReflashed) {
				setContentViewKaraoke(m_layoutList);
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.listen_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				layoutContent = (LinearLayout)inf.inflate(R.layout.listen_list, null);
				layoutContent.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutContent);
				
				displaySubMainMenu(NONE);
			}
			
			m_bListAlreadyReflashed = false;
			
			Button btnListenSubNow = (Button)findViewById(R.id.btn_listen_sub_now);
			btnListenSubNow.setBackgroundResource(R.drawable.tab_focus_on);
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_listen);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_02_focus);
			break;
		case 3 :
			remote.m_iState = STATE_MY_SUB_MENU;
			remote.m_iSubMainMenuFocus = 3;
			
			if (!m_bListAlreadyReflashed) {
				setContentViewKaraoke(m_layoutList);
			
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.my_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				layoutContent = (LinearLayout)inf.inflate(R.layout.my_list, null);
				layoutContent.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutContent);

				displaySubMainMenu(NONE);
			}
			
			m_bListAlreadyReflashed = false;
			
			Button btnMySubRecent = (Button)findViewById(R.id.btn_my_sub_recent);
			btnMySubRecent.setBackgroundResource(R.drawable.tab_focus_on);
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_my);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_03_focus);
			break;
		case 4 :
			setContentViewKaraoke(m_layoutList);
			
			remote.m_iState = STATE_SHOP_SUB_MENU;
			remote.m_iSubMainMenuFocus = 4;
			
			if (!m_bListAlreadyReflashed) {
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.shop_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				layoutContent = (LinearLayout)inf.inflate(R.layout.shop_ticket, null);
				layoutContent.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutContent);
				
				remote.m_iState = STATE_SHOP_SUB_MENU;
				remote.m_iSubMainMenuFocus = 4;
			
				displaySubMainMenu(NONE);
				displayShopSubMenu(NONE);
			} else {
				Button btnShopSubTicket = (Button)findViewById(R.id.btn_shop_sub_ticket);
				Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
				
				switch(remote.m_iShopSubMenuFocus)
				{
				case 1 :
					btnShopSubTicket.setBackgroundResource(R.drawable.tab_focus_on);
					break;
				case 2 :
					btnShopSubCertify.setBackgroundResource(R.drawable.tab_focus_on);
					break;
				}
			}
			
			m_bListAlreadyReflashed = false;
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_shop);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_04_focus);
			break;
		case 5 :
			m_iEnterCustomerMenu = KEY;
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			
			if (!m_bListAlreadyReflashed) {
				setContentViewKaraoke(m_layoutList);
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
				
				displaySubMainMenu(NONE);
			}
			
			m_bListAlreadyReflashed = false;
			
			Button btnCustomerSubNotice = (Button)findViewById(R.id.btn_customer_sub_event);
			btnCustomerSubNotice.setBackgroundResource(R.drawable.tab_focus_on);
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			break;
		// 부르기
		case 6 :
			m_strRequestPlaySongID = m_strMainSingID;
			
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(STOP);
				
				// 140422 예약된 반주곡을 자동 시작할 때는 중지 처리가 완전히 끝난 뒤에 새 요청 시작 (메인 > 부르기)
				m_timerStartCurrentSong = new Timer();
				TaskStartCurrentSong startTask = new TaskStartCurrentSong();
				
				ShowLoading(LONG);
				m_timerStartCurrentSong.schedule(startTask, 10000);
			} else {
				KP(REQUEST_SONG_PLAY, KP_1016, "", "");
			}
			break;
		// 듣기
		case 7 :
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(STOP);
			}
			
			m_strRequestListenSongID = m_strMainRequestListenSongID;
			KP(REQUEST_LISTEN_SONG, KP_2016, MENU_LISTEN, LISTEN_TIMELINE);
			break;
		// 앱 설치 안내
		case 8 :
			setContentViewKaraoke(m_layoutList);
			
			layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			remote.m_iCustomerSubMenuFocus = 4;
			
			resetSubMainMenu();
			
			LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
			lpOn.setMargins(0, 0, 0,0);
			lpOn.weight = 5;

			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			btnSubMain.setLayoutParams(lpOn);
			
			displayCustomerSubMenu(ENTER);
			break;
		// 마이크 구매 안내
		case 9 :
			if (submenuQuickBtn02.m2.equals(SHOP_TICKET)) {
				remote.m_iMainMenuFocus = 4;
				
				clickMainMenu();
			} else if (submenuQuickBtn02.m2.equals(HELP_MIKE)) {
				setContentViewKaraoke(m_layoutList);
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				remote.m_iState = STATE_CUSTOMER_SUB_MENU;
				remote.m_iSubMainMenuFocus = 5;
				remote.m_iCustomerSubMenuFocus = 5;
				
				displayCustomerSubMenu(ENTER);
			}
			break;
		case 10 :
			setContentViewKaraoke(m_layoutList);
			
			layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
			addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			
			m_iEnterCustomerMenu = EVENT;
			displaySubMainMenu(NONE);
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			
			m_iCustomerListItemCount = 0;
			m_iCurrentViewCustomerListPage = 1;
			m_iTotalCustomerListPage = 1;
			m_iCustomerListDetailTotalPage = 1;
			m_iCurrentCustomerListDetailPage = 1;
			remote.m_iCustomerListFocus = 1;
			
			m_strRequestCustomerDetailID = m_strMainEventID;
			
			KP(REQUEST_EVENT_LIST_DETAIL, KP_0011, MENU_HELP, HELP_EVENT);
			break;
		case 11 :
			setContentViewKaraoke(m_layoutList);
			
			layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
			addViewKaraoke(m_layoutContent, m_layoutCustomerList);
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			
			m_iEnterCustomerMenu = NOTICE;
			displaySubMainMenu(NONE);
			
			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			
			m_iCustomerListItemCount = 0;
			m_iCurrentViewCustomerListPage = 1;
			m_iTotalCustomerListPage = 1;
			m_iCustomerListDetailTotalPage = 1;
			m_iCurrentCustomerListDetailPage = 1;
			remote.m_iCustomerListFocus = 1;
			
			m_strRequestCustomerDetailID = m_strMainCustomerID;
			
			KP(REQUEST_CUSTOMER_LIST_DETAIL, KP_0011, MENU_HELP, HELP_NOTICE);
			break;
		}
	}
	
	public void clickSubMainMenu() {
		remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
		clickMainMenu();
	}
	
	public void clickSingSubMenu() {
		switch(remote.m_iSingSubMenuFocus)
		{
		case 1 :
			Button btnHot = (Button)findViewById(R.id.btn_sing_sub_hot);
			btnHot.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SONG_LIST;
			
			displaySongList(NONE);
			break;
		case 2 :
			Button btnNew = (Button)findViewById(R.id.btn_sing_sub_new);
			btnNew.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SONG_LIST;
			
			displaySongList(NONE);
			break;
		case 3 :
			Button btnGenre = (Button)findViewById(R.id.btn_sing_sub_genre);
			btnGenre.setBackgroundResource(R.drawable.tab_focus_off);
			remote.m_iState = STATE_SING_SUB_GENRE;
			
			displaySingSubGenreMenu(NONE);
			break;
		}
	}
	
	public void clickSingSubGenreMenu() {
		switch(remote.m_iSingSubGenreMenuFocus)
		{
		case 1 :
			Button btnBallad = (Button)findViewById(R.id.btn_sing_sub_genre_ballad);
			btnBallad.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 2 :
			Button btnDance = (Button)findViewById(R.id.btn_sing_sub_genre_dance);
			btnDance.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 3 :
			Button btnTrot = (Button)findViewById(R.id.btn_sing_sub_genre_trot);
			btnTrot.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 4 :
			Button btnRock = (Button)findViewById(R.id.btn_sing_sub_genre_rock);
			btnRock.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 5 :
			Button btnPop = (Button)findViewById(R.id.btn_sing_sub_genre_pop);
			btnPop.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 6 :
			Button btnAni = (Button)findViewById(R.id.btn_sing_sub_genre_ani);
			btnAni.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		}
		
		remote.m_iState = STATE_SONG_LIST;
		displaySongList(NONE);
	}

	public void clickSongList() {
		remote.m_iSongListDetailFocus = 1;
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutSongListDetail = (LinearLayout)inf.inflate(R.layout.song_list_detail, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutSongListDetail, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    Button btnFavor = (Button)findViewById(R.id.btn_detail_favor);
	    if (isFavor(remote.m_iSongListFocus)) {
	    	btnFavor.setText(getString(R.string.favor_delete));
	    } else {
	    	btnFavor.setText(getString(R.string.favor_add));
	    }
		
		remote.m_iState = STATE_SONG_LIST_DETAIL;
		
		switch(remote.m_iSongListFocus)
		{
		case 1 :
			LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_sing_list_list_1);
			layoutList1.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 2 :
			LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_sing_list_list_2);
			layoutList2.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 3 :
			LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_sing_list_list_3);
			layoutList3.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 4 :
			LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_sing_list_list_4);
			layoutList4.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 5 :
			LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_sing_list_list_5);
			layoutList5.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 6 :
			LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_sing_list_list_6);
			layoutList6.setBackgroundResource(R.drawable.list_focus_off);
			break;
		}
	}

	public void clickSongListDetail() {
		exitSongListDetail();
		
		switch(remote.m_iSongListDetailFocus)
		{
		case 1 :
			m_strRequestPlaySongID = getSongIDFromList();
			
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(NEXT);
				
				// 140422 예약된 반주곡을 자동 시작할 때는 중지 처리가 완전히 끝난 뒤에 새 요청 시작 (반주곡 상세메뉴)
				m_timerStartCurrentSong = new Timer();
				TaskStartCurrentSong startTask = new TaskStartCurrentSong();
				
				ShowLoading(LONG);
			    m_timerStartCurrentSong.schedule(startTask, 10000);
			} else {
				KP(REQUEST_SONG_PLAY, KP_1016, "", "");
			}
			break;
		case 2 :
			AddEngageSong(getSongIDFromList());
			ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), arrPlayList.get(arrPlayList.size() - 1) + "번 반주곡이 예약되었습니다.");
			
			// 140422 재생 중이 아닐 때만 '예약곡 시작' 으로 바뀌도록 함
			if (!isPlaying()) {
				if (m_iVender != SMART_BOX) {
					SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
				} else {
					SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
				}
			}
			break;
		case 3 :
			// 애창곡 등록 or 삭제
			if (remote.m_iSubMainMenuFocus == 3 && remote.m_iMySubMenuFocus == 2) {
				m_bIsRefreshFavorList = true;
			}
			
			m_strRequestFavorSongID = getSongIDFromList();
			KP(REQUEST_FAVOR, KP_3010, "", "");
			
			if (isFavor(remote.m_iSongListFocus)) {
				arrayIsFavor.set(remote.m_iSongListFocus - 1, "N");
			} else {
				arrayIsFavor.set(remote.m_iSongListFocus - 1, "Y");
			}
			
			displaySongList(NONE);
			break;
		case 4 :
			break;
		}
	}

	public void clickListenSubMenu() {
		remote.m_iListenListFocusX = 1;
		remote.m_iListenListFocusY = 1;
		
		switch(remote.m_iListenSubMenuFocus)
		{
		case 1 :
			Button btnNow = (Button)findViewById(R.id.btn_listen_sub_now);
			btnNow.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 2 :
			Button btnWeek = (Button)findViewById(R.id.btn_listen_sub_week);
			btnWeek.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		case 3 :
			Button btnBest = (Button)findViewById(R.id.btn_listen_sub_best);
			btnBest.setBackgroundResource(R.drawable.tab_focus_off);
			break;
		}
		
		remote.m_iState = STATE_LISTEN_LIST;
		
		displayListenList(NONE);
	}
	
	public void clickListenList() {
		// 녹음곡이 재생될 것이므로, 반주곡 재생 중이었다면 중지시킨다
		if (isPlaying()) {
			StopPlaying(STOP);
		}
		
		if (remote.m_iSubMainMenuFocus == 3) {
			if (m_bIsMyRecordReCertifyBtnFocused) {
				resetSubMainMenu();
				
				remote.m_iSubMainMenuFocus = 4;
				remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
				
				clickMainMenu();
				
				Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
				btnShopSubCertify.setVisibility(View.VISIBLE);
				
				remote.m_iShopSubMenuFocus = 2;
				displayShopSubMenu(RIGHT);
			} else {
				m_strRequestListenSongID = arrayListenListItem.get(getFocusedMyRecordListIndex()).mStrRecordID;
				KP(REQUEST_LISTEN_SONG, KP_2016, MENU_LISTEN, LISTEN_TIMELINE);
			}
		} else {
			m_strRequestListenSongID = arrayListenListItem.get(getFocusedListenListItemIndex()).mStrRecordID;
			
			switch(remote.m_iListenSubMenuFocus)
			{
			case 1 :
				KP(REQUEST_LISTEN_SONG, KP_2016, MENU_LISTEN, LISTEN_TIMELINE);
				break;
			case 2 :
				KP(REQUEST_LISTEN_SONG, KP_2016, MENU_LISTEN, LISTEN_WEEK);
				break;
			case 3 :
				KP(REQUEST_LISTEN_SONG, KP_2016, MENU_LISTEN, LISTEN_TOP100);
				break;
			}
		}
	}

	public void clickListening() {
		// 이용권이 없으면 알림 팝업 띄우고 리턴
		if (m_strHasTicket == TICKET_NONE && !m_bCouponUser) {
			m_bIsGoToPurchaseMessage = true;
			ShowMessageOkCancel(getString(R.string.info), getString(R.string.ticket_have_no));
			return;
		}
		
		m_strRequestPlaySongID = m_strListeningSongID;
		
		if (listen != null) {
			if (listen.isListening()) {
				listen.stopListen();
				listen.releaseListen();
			}
		}
	
		if (m_layoutListen != null) {
			((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
			m_layoutListen = null;
		}
		
		// 녹음곡 플레이 상태에서 확인 버튼 눌러 반주곡 재생으로 갈 때, 내 녹음곡이면 STATE 구분
		if (remote.m_iSubMainMenuFocus != 3) {
			remote.m_iState = STATE_LISTEN_LIST;
		} else {
			remote.m_iState = STATE_MY_RECORD_LIST;
		}
		
		KP(REQUEST_SONG_PLAY, KP_1016, "", "");
	}

	public void clickListeningOther() {
		if (arrListeningOthersRecordID.size() >= remote.m_iListenOther) {
			exitListeningOther();
			
			if (listen != null) {
				if (listen.isListening()) {
					listen.stopListen();
					listen.releaseListen();
				}
			}
			
			// 하단 첫번째 가이드 텍스트 그룹을 감춤
			HideBottomGuide01();
			
			if (m_layoutListen != null) {
				((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
				m_layoutListen = null;
			}
			
			m_strRequestListenSongID = arrListeningOthersRecordID.get(remote.m_iListenOther - 1);
			LOG(CLASS, "clicked Listen ID : " + m_strRequestListenSongID);
			
			switch(remote.m_iListenSubMenuFocus)
			{
			case 1 :
				KP(REQUEST_LISTEN_OTHER_SONG, KP_2016, MENU_LISTEN, LISTEN_TIMELINE);
				break;
			case 2 :
				KP(REQUEST_LISTEN_OTHER_SONG, KP_2016, MENU_LISTEN, LISTEN_WEEK);
				break;
			case 3 :
				KP(REQUEST_LISTEN_OTHER_SONG, KP_2016, MENU_LISTEN, LISTEN_TOP100);
				break;
			}
		}
	}

	@SuppressLint("CutPasteId")
	public void clickMySubMenu() {
		switch(remote.m_iMySubMenuFocus)
		{
		case 1 :
			TextView txtNumberRecent = (TextView)findViewById(R.id.txt_sing_number_1);
			if (txtNumberRecent.getText().equals("") || txtNumberRecent.getText().equals(null)) {
				return;
			}
			
			Button btnRecent = (Button)findViewById(R.id.btn_my_sub_recent);
			btnRecent.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_MY_LIST;
			
			displayMyList(NONE);
			break;
		case 2 :
			TextView txtNumberFavor = (TextView)findViewById(R.id.txt_sing_number_1);
			if (txtNumberFavor.getText().equals("") || txtNumberFavor.getText().equals(null)) {
				return;
			}
			
			Button btnFavor = (Button)findViewById(R.id.btn_my_sub_favor);
			btnFavor.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_MY_LIST;
			
			displayMyList(NONE);
			break;
		case 3 :
			Button btnRecord = (Button)findViewById(R.id.btn_my_sub_record);
			btnRecord.setBackgroundResource(R.drawable.tab_focus_off);
			
			if (m_iTotalListenListPage > 0) {
				remote.m_iState = STATE_MY_RECORD_LIST;
				m_bIsMyRecordReCertifyBtnFocused = false;
				
				displayMyRecordList(NONE);
			} else if (m_iTotalListenListPage == 0) {
				m_bIsBeforeRegistMyRecord = false;
				
				remote.m_iState = STATE_MY_RECORD_NONE;
				m_bIsMyRecordReCertifyBtnFocused = false;
				
				Button btnHelp = (Button)findViewById(R.id.btn_already_certify_help);
				btnHelp.setBackgroundResource(R.drawable.my_record_btn_on);
			} else if (m_iTotalListenListPage == -1) {
				m_bIsBeforeRegistMyRecord = true;
				
				remote.m_iState = STATE_MY_RECORD_BEFORE;
				m_bIsMyRecordReCertifyBtnFocused = false;
				
				Button btnHelp = (Button)findViewById(R.id.btn_already_certify_help);
				btnHelp.setBackgroundResource(R.drawable.my_record_btn_on);
			}
			break;
		}
	}

	public void clickShopSubMenu() {
		switch(remote.m_iShopSubMenuFocus)
		{
		case 1 :
			Button btnTicket = (Button)findViewById(R.id.btn_shop_sub_ticket);
			btnTicket.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SHOP_TICKET;
			remote.m_iShopTicketFocus = 1;
			remote.m_iShopTicketFocusY = 1;
			m_bIsFocusedOnTicket = false;
			
			displayShopTicket(NONE);
			
			Button btnPurchase = (Button)findViewById(R.id.btn_shop_purchase);
			btnPurchase.setBackgroundResource(R.drawable.tab_focus_long_on);
			
			LinearLayout layoutTicket = (LinearLayout)findViewById(R.id.layout_shop_ticket);
			layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_month_on);
			break;
		case 2 :
			Button btnCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
			btnCertify.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SHOP_CERTIFY;
			
			if (!m_bIsCertifyedUser) {
				ImageView imgCertify = (ImageView)findViewById(R.id.img_shop_certify);
				imgCertify.setImageResource(R.drawable.shop_notify_on);
			} else {
				LinearLayout layoutCertify = (LinearLayout)findViewById(R.id.layout_already_certify);
				layoutCertify.setBackgroundResource(R.drawable.shop_already_notify_on);
			}
			break;
		}
	}
	
	@SuppressLint("SimpleDateFormat")
	@SuppressWarnings("deprecation")
	public void clickShopTicket() {
		if (m_bIsFocusedOnTicket) {
			if (remote.m_iShopTicketFocus == 3) {
				EditText editCoupon = (EditText)findViewById(R.id.edit_coupon);
				Editable eaCoupon = editCoupon.getText();
				m_strCouponSerial = eaCoupon.toString();
				
				m_strCouponSerial.replace(" ", "");
				
				if (m_strCouponSerial.equals("") || m_strCouponSerial.equals(null)) {
					ShowMessageOk(CLOSE_AUTO, getString(R.string.info), getString(R.string.coupon_not_input_serial));
				} else {
					if (m_strCouponSerial.length() != 12) {
						ShowMessageOk(CLOSE_AUTO, getString(R.string.info), getString(R.string.coupon_wrong_input_serial));
						return;
					}
					
					KP(REQUEST_COUPON_REGIST, KP_0014, MENU, MENU_SHOP);
				}
			} else {
				LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				LinearLayout layoutSubMenu = null;
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				Button btnSubMainCustomer = (Button)findViewById(R.id.btn_sub_main_customer);
				
				resetSubMainMenu();
				
				LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
				lpOn.setMargins(0, 0, 0,0);
				lpOn.weight = 5;
	
				btnSubMainCustomer.setLayoutParams(lpOn);
				btnSubMainCustomer.setBackgroundResource(R.drawable.sub_icon_05_focus);
				
				remote.m_iState = STATE_CUSTOMER_SUB_MENU;
				remote.m_iSubMainMenuFocus = 5;
				remote.m_iCustomerSubMenuFocus = 4;
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				addViewKaraoke(m_layoutContent, m_layoutCustomerList);
				
				displayCustomerSubMenu(ENTER);
			}
		} else {
			if (remote.m_iShopTicketFocus == 3) {
			} else {
				// bgkimt 이미 사용중인 이용권이 있으면 이용권 구매 차단
				if (m_strHasTicket != TICKET_NONE) {
					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), getString(R.string.ticket_already_use));
				} else {
					switch(remote.m_iShopTicketFocus)
					{
					case 1 :
						if (ticketitem01.productcode.equals("2837449") || ticketitem01.productcode.equals("2837471")) {
							m_iProcessTicket = MONTH;
						} else {
							m_iProcessTicket = DAY;
						}
						break;
					case 2 :
						if (ticketitem02.productcode.equals("2837449") || ticketitem02.productcode.equals("2837471")) {
							m_iProcessTicket = MONTH;
						} else {
							m_iProcessTicket = DAY;
						}
						break;
					}
					
					LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
					if (m_iProcessTicket == DAY) {
						m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppv_info, null);
					} else {
						m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppm_info, null);
					}
					LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
					addContentView(m_layoutPPV, param);
					ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
				    setGlobalFont(root);
				    
				    long lTime = System.currentTimeMillis();
				    Date date = new Date(lTime);
				    Calendar cal = Calendar.getInstance();
				    cal.setTime(date);
				    cal.add(Calendar.DATE, 1);
				    SimpleDateFormat CurDateFormat = new SimpleDateFormat("yyyy년MM월dd일 HH:MM");
				    String strCurDate = CurDateFormat.format(cal.getTime());
				    
				    if (m_iProcessTicket == DAY) {
				    	TextView txtDate = (TextView)findViewById(R.id.txt_message_ticket_day_late_content);
				    	txtDate.setText("1일 (" + strCurDate + "까지)");
				    }
				    
				    remote.m_iState = STATE_MESSAGE_PPV_INFO;
				    m_iTicketMessageFocusX = 1;
				    m_iTicketMessageFocusY = 1;
				}
			}
		}
	}
	
	@SuppressWarnings("deprecation")
	public void clickPPVInfo() {
		switch(m_iTicketMessageFocusX)
		{
		case 1 :
			m_layoutPPV.removeAllViews();

			exitPPV();

			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			if (m_iProcessTicket == DAY) {
				m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_password, null);
			} else {
				m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_notice, null);
			}
			LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			addContentView(m_layoutPPV, param);
			ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
		    setGlobalFont(root);
		    
		    if (m_iProcessTicket == DAY) {
			    remote.m_iState = STATE_MESSAGE_PPV_PASS;
			    m_bIsFocusedOnPassNumber = true;
		    } else {
		    	remote.m_iState = STATE_MESSAGE_PPM_NOTICE;
			}
		    
		    m_iTicketMessageFocusX = 1;
		    m_iTicketMessageFocusY = 1;
			break;
		case 2 :
			exitPPV();
			break;
		}
	}
	
	@SuppressLint("SimpleDateFormat")
	@SuppressWarnings("deprecation")
	public void clickPPXPass() {
		switch(m_iTicketMessageFocusX)
		{
		case 1 :
			if (m_iTicketMessageFocusY == 2) {
				if (m_strInputPass[0] == "" || m_strInputPass[1] == "" || m_strInputPass[2] == "" || m_strInputPass[3] == "") {
					TextView txtPassResult = (TextView)findViewById(R.id.txt_message_ticket_pass_info_sub);
					txtPassResult.setText(getString(R.string.ticket_popup_pass_info_03));
				} else {
					m_strVASSPassword = "";
					m_strVASSPassword = m_strInputPass[0] + m_strInputPass[1] + m_strInputPass[2] + m_strInputPass[3];
					
					//if (remote.m_iShopTicketFocus == 1) {
					if (m_iProcessTicket == MONTH) {
						VASS(REQUEST_VASS_PASSWORD_FOR_MONTH);
					} else {
						VASS(REQUEST_VASS_PASSWORD_FOR_DAY);
					}
				}
			}
			break;
		case 2 :
			m_layoutPPV.removeAllViews();

			exitPPV();

			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			if (m_iProcessTicket == DAY) {
				m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppv_info, null);
			} else {
				m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppm_info, null);
			}
			LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			addContentView(m_layoutPPV, param);
			ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
		    setGlobalFont(root);
		    
		    remote.m_iState = STATE_MESSAGE_PPV_INFO;
		    m_iTicketMessageFocusX = 1;
			break;
		case 3 :
			exitPPV();
			break;
		}
	}
	
	@SuppressLint("CutPasteId")
	public void clickPPMNotice() {
		switch(m_iTicketMessageFocusY)
		{
		case 1 :
			TextView txtNoticeUp = (TextView)findViewById(R.id.txt_message_ticket_notice);
			txtNoticeUp.setText(getString(R.string.ticket_popup_pass_notice_01));
			
			TextView txtNoticePageUp = (TextView)findViewById(R.id.txt_message_ticket_notice_page);
			txtNoticePageUp.setText(getString(R.string.ticket_popup_bill_info_page_01));
			break;
		case 2 :
			TextView txtNoticeDown = (TextView)findViewById(R.id.txt_message_ticket_notice);
			txtNoticeDown.setText(getString(R.string.ticket_popup_pass_notice_02));
			
			TextView txtNoticePageDown = (TextView)findViewById(R.id.txt_message_ticket_notice_page);
			txtNoticePageDown.setText(getString(R.string.ticket_popup_bill_info_page_02));
			break;
		case 3 :
			if (m_iTicketMessageFocusX == 1) {
				m_layoutPPV.removeAllViews();

				exitPPV();

				LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_password, null);
				@SuppressWarnings("deprecation")
				LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				addContentView(m_layoutPPV, param);
				ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
			    setGlobalFont(root);
			    
			    remote.m_iState = STATE_MESSAGE_PPV_PASS;
			    m_bIsFocusedOnPassNumber = true;
			    m_iTicketMessageFocusX = 1;
			    m_iTicketMessageFocusY = 1;
			} else {
				exitPPV();
			}
			break;
		}
	}
	
	public void clickGOCertify() {
		exitPPV();
		
		if (m_iTicketMessageFocusX == 1) {
			exitTicket();
			
			remote.m_iShopSubMenuFocus = 2;
			displayShopSubMenu(RIGHT);
			
			//clickShopSubMenu();
		}
	}

	public void clickShopCertify() {
		// bgkimt [인증번호등록] 버튼 눌렀을 때 인증센터 팝업 띄운다. 월정액 이용권 없으면 튕겨준다
		// bgkimt 인증번호 변경 가능 횟수가 다 했어도 튕겨준다.
		if (m_strHasTicket == TICKET_MONTH) {
			if (m_iAuthModify != 0) {
				remote.m_iCertifyHPFocusX = 1;
				remote.m_iCertifyHPFocusY = 1;
			
				LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				m_layoutCertifyHP = (LinearLayout)inf.inflate(R.layout.message_hp, null);
				@SuppressWarnings("deprecation")
				LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				addContentView(m_layoutCertifyHP, param);
				ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
			    setGlobalFont(root);
				
				remote.m_iState = STATE_CERTIFY_HP;
				
				displayCertifyHP(NONE);
			} else {
				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), "인증 번호 변경 대상이 아닙니다.\r\n변경 횟수를 모두 소진하였습니다.");
			}
		} else {
			ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), "인증 번호 등록 대상이 아닙니다.\r\n월정액 가입 고객만 등록 가능합니다.");
		}
	}

	@SuppressLint("DefaultLocale")
	public void clickCertifyHP() {
		if (remote.m_iCertifyHPFocusY == 2) {
			if (remote.m_iCertifyHPFocusX == 1) {
				TextView txtCertifyHPMessage = (TextView)findViewById(R.id.txt_certify_hp_message_auth);
				
				// 확인
				EditText editHP01 = (EditText)findViewById(R.id.edit_message_hp_01);
				EditText editHP02 = (EditText)findViewById(R.id.edit_message_hp_02);
				EditText editHP03 = (EditText)findViewById(R.id.edit_message_hp_03);
				
				Editable eaHP01 = editHP01.getText();
				m_strHPNumber = eaHP01.toString();
				
				if (editHP01.getText().toString().length() < 3) {
					txtCertifyHPMessage.setText("휴대폰 번호를 정확히 입력해주세요.");
					return;
				}
				
				Editable eaHP02 = editHP02.getText();
				m_strHPNumber = m_strHPNumber + eaHP02.toString();
				
				if (editHP02.getText().toString().length() < 3) {
					txtCertifyHPMessage.setText("휴대폰 번호를 정확히 입력해주세요.");
					return;
				}
				
				Editable eaHP03 = editHP03.getText();
				m_strHPNumber = m_strHPNumber + eaHP03.toString();
				
				if (editHP03.getText().toString().length() < 4) {
					txtCertifyHPMessage.setText("휴대폰 번호를 정확히 입력해주세요.");
					return;
				}
				
				LOG(CLASS, "CERTIFYED HP NUM = [" + m_strCertifyedHPNumber + "]");
				
				//ADDEVENT 원래는 기존 인증번호랑 같은 휴대폰 번호일 때 예외처리 : 나중에 정리해줘
				if (remote.m_iSubMainMenuFocus != 5) {
					if (m_strCertifyedHPNumber.equals(m_strHPNumber)) {
						txtCertifyHPMessage.setText("기존 인증된 휴대폰 번호와 같은 번호입니다.");
						return;
					}
					
					if (m_bIsCertifyTimerActivatedPopup) {
						String strCertifyTimerSec = String.valueOf(m_iCertifyTimerSecPopup);
						String strCertifyTimerMin = String.valueOf(m_iCertifyTimerMinPopup);

						if (m_iCertifyTimerMinPopup == 0) {
							ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), "인증번호 재전송 가능 시간까지 " + strCertifyTimerSec + "초 남았습니다.");
						} else{
							ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), "인증번호 재전송 가능 시간까지 " + strCertifyTimerMin + "분 " + strCertifyTimerSec + "초 남았습니다.");
						}
						return;
					}
					
					KP(REQUEST_AUTH_NUMBER, KP_9001, MAIN, MENU);
				} else {
					//ADDEVENT 입력한 휴대폰 번호를 실제 KP로 날려주는거 아래에 추가해줘
					KP(REQUEST_EVENT_HP, KP_0013, MENU_HELP, HELP_EVENT);
				}
				
				LOG(CLASS, "HP NUM = [" + m_strHPNumber + "]");
			} else {
				// 취소
				exitCertifyHP();
			}
		}
	}

	public void clickCertify() {
		if (remote.m_iCertifyFocusY == 1) {
			if (remote.m_iCertifyFocusX == 2) {
				// 재전송
				if (m_bIsCertifyTimerActivated) {
					TextView txtCertifyMessage = (TextView)findViewById(R.id.txt_certify_message);
					txtCertifyMessage.setText("입력시간 경과 후 재전송이 가능합니다.");
					return;
					
					//m_cdTimer.cancel();
				}
				
				KP(REQUEST_AUTH_NUMBER, KP_9001, MAIN, MENU);
			}
		} else {
			if (remote.m_iCertifyFocusX == 1) {
				EditText editAuth= (EditText)findViewById(R.id.edit_message_certify);
				Editable eaAuth = editAuth.getText();
				m_strInputAuthNumber = eaAuth.toString();
				
				if (m_strInputAuthNumber.equals("") || m_strInputAuthNumber.length() < 6) {
					TextView txtCertifyMessage = (TextView)findViewById(R.id.txt_certify_message);
					txtCertifyMessage.setText("인증번호를 정확히 입력해주세요.");
					return;
				}
				
				// 확인
				KP(REQUEST_AUTH_NUMBER_CORRECT, KP_9001, MAIN, MENU);
			} else {
				// 취소
				exitCertifyNumber();
			}
		}
	}

	public void clickCustomerSubMenu() {
		remote.m_iCustomerListFocus = 1;
		
		if (m_iEnterCustomerMenu != KEY) {
			displayCustomerSubMenu(LEFT);
			m_iEnterCustomerMenu = KEY;
			return;
		}
		
		m_iEnterCustomerMenu = KEY;
		
		switch(remote.m_iCustomerSubMenuFocus)
		{
		case 1 :
			Button btnEvent = (Button)findViewById(R.id.btn_customer_sub_event);
			btnEvent.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_CUSTOMER_LIST_EVENT;
			
			displayCustomerList(NONE);
			break;
		case 2 :
			Button btnCustomer = (Button)findViewById(R.id.btn_customer_sub_notice);
			btnCustomer.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_CUSTOMER_LIST;
			
			displayCustomerList(NONE);
			break;
		case 3 :
			Button btnInfo = (Button)findViewById(R.id.btn_customer_sub_info);
			btnInfo.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_CUSTOMER_LIST;
			
			displayCustomerList(NONE);
			break;
		case 4 :
			//remote.m_iState = STATE_CUSTOMER_APP;
			break;
		case 5 :
			//remote.m_iState = STATE_CUSTOMER_MIC;
			break;
		}
	}

	public void clickCustomerList() {
		// 공지사항or이용안내 상세내용 출력
		int page = m_iCurrentViewCustomerListPage - 1;
		int index = remote.m_iCustomerListFocus + (page * 6);
		index--;
		m_strRequestCustomerDetailID = arrayCustomerListItem.get(index).m_strCustomerID;
		m_iCustomerListDetailPage = 1;
		
		int OP = 0;
		String M2 = "";
		
		switch(remote.m_iCustomerSubMenuFocus)
		{
		case 1 : //ADDEVENT 리스트에서 OK눌렀을 때 상세화면가는 KP 아래에 추가해줘
			OP = REQUEST_EVENT_LIST_DETAIL;
			M2 = HELP_EVENT;
			break;
		case 2 : // 공지사항
			OP = REQUEST_CUSTOMER_LIST_DETAIL;
			M2 = HELP_NOTICE;
			break;
		case 3 : // 이용안내
			OP = REQUEST_CUSTOMER_LIST_DETAIL;
			M2 = HELP_USEINFO;
			break;
		}
		
		KP(OP, KP_0011, MENU_HELP, M2);
	}

	public void clickSearchSubMenu() {
		switch(remote.m_iSearchSubMenuFocus)
		{
		case 1 :
			Button btnSearchSubSelf = (Button)findViewById(R.id.btn_search_sub_self);
			btnSearchSubSelf.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SEARCH_SELF;
			
			displaySearchSelf(NONE);
			break;
		case 2 :
			Button btnSearchSubLetter = (Button)findViewById(R.id.btn_search_sub_letter);
			btnSearchSubLetter.setBackgroundResource(R.drawable.tab_focus_off);
			
			remote.m_iState = STATE_SEARCH_LETTER_KOR;
			m_iSearchLetterMode = KOR;
			
			displaySearchLetter(NONE);
			break;
		}
	}

	public void clickSearchSelf() {
		if (m_bIsFocusedOnBook) {
			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			LinearLayout layoutSubMenu = null;
			@SuppressWarnings("deprecation")
			LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			Button btnSubMain = null;
			
			setContentViewKaraoke(m_layoutList);
			
			layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			remote.m_iCustomerSubMenuFocus = 5;
			
			resetSubMainMenu();
			
			LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
			lpOn.setMargins(0, 0, 0,0);
			lpOn.weight = 5;

			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			btnSubMain.setLayoutParams(lpOn);
			
			displayCustomerSubMenu(ENTER);
			return;
		}
		
		switch(remote.m_iSearchSelfFocus)
		{
		case 1 :
			Button btnSearchSelfType = (Button)findViewById(R.id.btn_search_self_type);
			
			if (m_iSearchSelfMode == TITLE) {
				m_iSearchSelfMode = ARTIST;
				btnSearchSelfType.setText(getString(R.string.search_singer));
			} else {
				m_iSearchSelfMode = TITLE;
				btnSearchSelfType.setText(getString(R.string.search_title));
			}
			break;
		case 2 :
			if (m_iVender == SMART_BOX) {
				EditText editWord = (EditText)findViewById(R.id.edit_search_self_word);
				Editable eaSearchWord = editWord.getText();
				m_strSearchWord = eaSearchWord.toString();
				
				m_strSearchWord.replace(" ", "");
				
				if (m_strSearchWord.equals("") || m_strSearchWord.equals(null)) {
					editWord.clearFocus();
					editWord.setSelected(false);
					editWord.setFocusable(false);
					editWord.setFocusableInTouchMode(false);
					
					ShowMessageOk(CLOSE_AUTO, getString(R.string.info), getString(R.string.search_not_keyword));
				} else {
					m_iCurrentViewSearchListPage = 1;
					m_iCurrentSearchListPage = 1;
					m_iRequestSearchListPage = 1;
					
					editWord.clearFocus();
					editWord.setSelected(false);
					editWord.setFocusable(false);
					editWord.setFocusableInTouchMode(false);
					
					if (m_iSearchSelfMode == TITLE) {
						KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
					} else {
						KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
					}
				}
			}
			break;
		case 3 :
			EditText editWord = (EditText)findViewById(R.id.edit_search_self_word);
			Editable eaSearchWord = editWord.getText();
			m_strSearchWord = eaSearchWord.toString();
			
			editWord.clearFocus();
			editWord.setSelected(false);
			editWord.setFocusable(false);
			editWord.setFocusableInTouchMode(false);
			
			m_strSearchWord.replace(" ", "");
			
			if (m_strSearchWord.equals("") || m_strSearchWord.equals(null)) {
				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), getString(R.string.search_not_keyword));
			} else {
				m_iCurrentViewSearchListPage = 1;
				m_iCurrentSearchListPage = 1;
				m_iRequestSearchListPage = 1;
				
				if (m_iSearchSelfMode == TITLE) {
					KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
				} else {
					KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
				}
			}
			break;
		}
	}

	@SuppressWarnings("deprecation")
	public void clickSearchLetter() {
		if (remote.m_iSearchLetterFocusY == 3) {
			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			LinearLayout layoutSubMenu = null;
			LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			Button btnSubMain = null;
			
			setContentViewKaraoke(m_layoutList);
			
			layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			remote.m_iSubMainMenuFocus = 5;
			remote.m_iCustomerSubMenuFocus = 5;
			
			resetSubMainMenu();
			
			LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
			lpOn.setMargins(0, 0, 0,0);
			lpOn.weight = 5;

			btnSubMain = (Button)findViewById(R.id.btn_sub_main_customer);
			btnSubMain.setBackgroundResource(R.drawable.sub_icon_05_focus);
			btnSubMain.setLayoutParams(lpOn);
			
			displayCustomerSubMenu(ENTER);
			return;
		}
		
		// 검색 구분 클릭 : 한글/영문/숫자 전환
		if (remote.m_iSearchLetterFocusX == 0) {
			if (m_iSearchLetterMode == KOR) {
				LinearLayout layoutKor01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_kor_01);
				LinearLayout layoutKor02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_kor_02);
				LinearLayout layoutEng01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_eng_01);
				LinearLayout layoutEng02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_eng_02);
				
				layoutKor01.setVisibility(View.GONE);
				layoutKor02.setVisibility(View.GONE);
				layoutEng01.setVisibility(View.VISIBLE);
				layoutEng02.setVisibility(View.VISIBLE);
				
				m_iSearchLetterMode = ENG;
				remote.m_iState = STATE_SEARCH_LETTER_ENG;
			} else if (m_iSearchLetterMode == ENG) {
				LinearLayout layoutEng01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_eng_01);
				LinearLayout layoutEng02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_eng_02);
				
				LinearLayout layoutNum01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_num_01);
				LinearLayout layoutNum02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_num_02);
				
				layoutEng01.setVisibility(View.GONE);
				layoutEng02.setVisibility(View.GONE);
				layoutNum01.setVisibility(View.VISIBLE);
				layoutNum02.setVisibility(View.VISIBLE);
				
				m_iSearchLetterMode = NUM;
				remote.m_iState = STATE_SEARCH_LETTER_NUM;
			} else if (m_iSearchLetterMode == NUM) {
				LinearLayout layoutNum01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_num_01);
				LinearLayout layoutNum02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_num_02);
				
				LinearLayout layoutKor01 = (LinearLayout)findViewById(R.id.layout_search_letter_input_kor_01);
				LinearLayout layoutKor02 = (LinearLayout)findViewById(R.id.layout_search_letter_input_kor_02);
				
				layoutNum01.setVisibility(View.GONE);
				layoutNum02.setVisibility(View.GONE);
				layoutKor01.setVisibility(View.VISIBLE);
				layoutKor02.setVisibility(View.VISIBLE);
				
				m_iSearchLetterMode = KOR;
				remote.m_iState = STATE_SEARCH_LETTER_KOR;
			}
			
			displaySearchLetter(NONE);
		// 색인 클릭
		} else {
			if (m_iSearchLetterMode == KOR) {
				m_strSearchWord = SEARCH_LETTER_KOR[remote.m_iSearchLetterFocusX][remote.m_iSearchLetterFocusY];
			} else if (m_iSearchLetterMode == ENG) {
				m_strSearchWord = SEARCH_LETTER_ENG[remote.m_iSearchLetterFocusX][remote.m_iSearchLetterFocusY];
			} else if (m_iSearchLetterMode == NUM) {
				m_strSearchWord = SEARCH_LETTER_NUM[remote.m_iSearchLetterFocusX][remote.m_iSearchLetterFocusY];
			}
			
			m_iCurrentViewSearchListPage = 1;
			m_iCurrentSearchListPage = 1;
			m_iRequestSearchListPage = 1;
			
			KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_4);
		}
	}

	public void clickSearchList() {
		remote.m_iSongListDetailFocus = 1;
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutSongListDetail = (LinearLayout)inf.inflate(R.layout.song_list_detail, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutSongListDetail, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    Button btnFavor = (Button)findViewById(R.id.btn_detail_favor);
	    if (isFavor(remote.m_iSongListFocus)) {
	    	btnFavor.setText(getString(R.string.favor_delete));
	    } else {
	    	btnFavor.setText(getString(R.string.favor_add));
	    }
		
		remote.m_iState = STATE_SEARCH_LIST_DETAIL;
		
		LinearLayout layoutList1 = null;
		LinearLayout layoutList2 = null;
		LinearLayout layoutList3 = null;
		LinearLayout layoutList4 = null;
		LinearLayout layoutList5 = null;
		
		switch(remote.m_iSearchListFocus)
		{
		case 1 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				layoutList1 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_1);
			} else {
				layoutList1 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_1);
			}
			layoutList1.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 2 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				layoutList2 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_2);
			} else {
				layoutList2 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_2);
			}
			layoutList2.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 3 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				layoutList3 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_3);
			} else {
				layoutList3 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_3);
			}
			layoutList3.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 4 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				layoutList4 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_4);
			} else {
				layoutList4 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_4);
			}
			layoutList4.setBackgroundResource(R.drawable.list_focus_off);
			break;
		case 5 :
			layoutList5 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_5);
			layoutList5.setBackgroundResource(R.drawable.list_focus_off);
			break;
		}
	}
	
	public void clickSearchListDetail() {
		exitSearchListDetail();
		
		switch(remote.m_iSongListDetailFocus)
		{
		case 1 :
			m_strRequestPlaySongID = getSongIDFromSearchList();
			
			if (isPlaying()) {
				// 재생 중지
				StopPlaying(STOP);
				
				// 140422 예약된 반주곡을 자동 시작할 때는 중지 처리가 완전히 끝난 뒤에 새 요청 시작 (곡검색 상세메뉴)
				m_timerStartCurrentSong = new Timer();
				TaskStartCurrentSong startTask = new TaskStartCurrentSong();
				
				ShowLoading(LONG);
			    m_timerStartCurrentSong.schedule(startTask, 10000);
			} else {
				KP(REQUEST_SONG_PLAY, KP_1016, "", "");
			}
			break;
		case 2 :
			AddEngageSong(getSongIDFromSearchList());
			ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), arrPlayList.get(arrPlayList.size() - 1) + "번 반주곡이 예약되었습니다.");
			
			// 140422 재생 중이 아닐 때만 '예약곡 시작' 으로 바뀌도록 함
			if (!isPlaying()) {
				if (m_iVender != SMART_BOX) {
					SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
				} else {
					SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_start_song));	// 반주곡이 예약됨 = 반주곡 시작
				}
			}
			break;
		case 3 :
			m_strRequestFavorSongID = getSongIDFromSearchList();
			KP(REQUEST_FAVOR, KP_3010, "", "");
			
			if (isFavor(remote.m_iSearchListFocus)) {
				arrayIsFavor.set(remote.m_iSearchListFocus - 1, "N");
			} else {
				arrayIsFavor.set(remote.m_iSearchListFocus - 1, "Y");
			}
			
			displaySearchList(NONE);
			break;
		case 4 :
			break;
		}
	}
	
	@SuppressWarnings("deprecation")
	public void clickMyRecordNone() {
		exitMyRecordNone();
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout layoutSubMenu = null;
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOn.setMargins(0, 0, 0,0);
		lpOn.weight = 5;
		
		if (m_bIsMyRecordReCertifyBtnFocused) {
			resetSubMainMenu();
			
			remote.m_iSubMainMenuFocus = 4;
			remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
			
			clickMainMenu();
			
			Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
			btnShopSubCertify.setVisibility(View.VISIBLE);
			
			remote.m_iShopSubMenuFocus = 2;
			displayShopSubMenu(RIGHT);
		} else {
			if (!m_bIsBeforeRegistMyRecord) {
				resetSubMainMenu();
				
				Button btnSubMainCustomer = (Button)findViewById(R.id.btn_sub_main_customer);
				btnSubMainCustomer.setLayoutParams(lpOn);
				btnSubMainCustomer.setBackgroundResource(R.drawable.sub_icon_05_focus);
				
				layoutSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
				layoutSubMenu.setLayoutParams(lp);
				addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
				
				remote.m_iState = STATE_CUSTOMER_SUB_MENU;
				remote.m_iSubMainMenuFocus = 5;
				remote.m_iCustomerSubMenuFocus = 4;
				displayCustomerSubMenu(ENTER);
			} else {
				resetSubMainMenu();
				
				remote.m_iSubMainMenuFocus = 4;
				remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
				
				m_bListAlreadyReflashed = false;
				
				clickMainMenu();
				//clickShopSubMenu();
			}
		}
	}
	
	public void clickEventDetail() {
		if (remote.m_iCustomerSubMenuFocus != 1) {
			return;
		}
		
		if (!m_strEventDetailType.equals("E")) {
			return;
		}
		
		KP(REQUEST_EVENT_APPLY, KP_0012, MENU_HELP, HELP_EVENT);
	}
	
	public void displayMainMenu(int keyID) {
		if (keyID == INIT) {
			remote.m_iState = STATE_MAIN_MENU;
			remote.m_iMainMenuFocus = 1;
			remote.m_iMainMenuFocusY = 1;
		}
		
		Button btnSing = (Button)findViewById(R.id.btn_home_main_01);
		Button btnListen = (Button)findViewById(R.id.btn_home_main_02);
		Button btnMy = (Button)findViewById(R.id.btn_home_main_03);
		Button btnShop = (Button)findViewById(R.id.btn_home_main_04);
		Button btnCustomer = (Button)findViewById(R.id.btn_home_main_05);
		
		LinearLayout.LayoutParams lpOff = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOff.setMargins(0, PixelFromDP(15), 0, PixelFromDP(25));
		lpOff.weight = 3;
		
		btnSing.setLayoutParams(lpOff);
		btnSing.setBackgroundResource(R.drawable.menu_icon_01_off);
		
		btnListen.setLayoutParams(lpOff);
		btnListen.setBackgroundResource(R.drawable.menu_icon_02_off);
		
		btnMy.setLayoutParams(lpOff);
		btnMy.setBackgroundResource(R.drawable.menu_icon_03_off);
		
		btnShop.setLayoutParams(lpOff);
		btnShop.setBackgroundResource(R.drawable.menu_icon_04_off);
		
		btnCustomer.setLayoutParams(lpOff);
		btnCustomer.setBackgroundResource(R.drawable.menu_icon_05_off);
		
		LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOn.setMargins(0, 0, 0, PixelFromDP(10));
		lpOn.weight = 5;
		
		LinearLayout layoutHome = (LinearLayout)findViewById(R.id.layout_home);
		
		m_imgMainQuickBtn02.setImageBitmap(util_mainQuickBtnOff02.m_bitMap);
		
		switch(remote.m_iMainMenuFocus)
		{
		case 1 :
			btnSing.setLayoutParams(lpOn);
			btnSing.setBackgroundResource(R.drawable.main_icon_01_on);
			layoutHome.setBackgroundResource(R.drawable.main_bg1);
			break;
		case 2 :
			btnListen.setLayoutParams(lpOn);
			btnListen.setBackgroundResource(R.drawable.main_icon_02_on);
			layoutHome.setBackgroundResource(R.drawable.main_bg1);
			break;
		case 3 :
			btnMy.setLayoutParams(lpOn);
			btnMy.setBackgroundResource(R.drawable.main_icon_03_on);
			layoutHome.setBackgroundResource(R.drawable.main_bg1);
			break;
		case 4 :
			btnShop.setLayoutParams(lpOn);
			btnShop.setBackgroundResource(R.drawable.main_icon_04_on);
			layoutHome.setBackgroundResource(R.drawable.main_bg1);
			break;
		case 5 :
			btnCustomer.setLayoutParams(lpOn);
			btnCustomer.setBackgroundResource(R.drawable.main_icon_05_on);
			layoutHome.setBackgroundResource(R.drawable.main_bg1);
			break;
		case 6 :
			layoutHome.setBackgroundResource(R.drawable.main_bg2);
			break;
		case 7 :
			layoutHome.setBackgroundResource(R.drawable.main_bg3);
			break;
		case 8 :
			layoutHome.setBackgroundResource(R.drawable.main_bg4);
			break;
		case 9 :
			m_imgMainQuickBtn02.setImageBitmap(util_mainQuickBtnOn02.m_bitMap);
			layoutHome.setBackgroundResource(R.drawable.main_bg5);
			break;
		case 10 :
			layoutHome.setBackgroundResource(R.drawable.main_bg6);
			break;
		case 11 :
			layoutHome.setBackgroundResource(R.drawable.main_bg7);
			break;
		}
	}
	
	@SuppressWarnings("deprecation")
	public void displaySubMainMenu(int keyID) {
		if (keyID == LEFT || keyID == RIGHT) {
			m_bListAlreadyReflashed = true;
		}
		
		if (keyID == DOWN) {
			remote.m_iMainMenuFocus = remote.m_iSubMainMenuFocus;
			clickMainMenu();
			return;
		}
		
		if (m_bIsGenre) {
			HideGenre();
		}
		
		if (keyID == UP) {
			return;
		}
		
		resetSubMainMenu();
		
		Button btnSubMainSing = (Button)findViewById(R.id.btn_sub_main_sing);
		Button btnSubMainListen = (Button)findViewById(R.id.btn_sub_main_listen);
		Button btnSubMainMy = (Button)findViewById(R.id.btn_sub_main_my);
		Button btnSubMainShop = (Button)findViewById(R.id.btn_sub_main_shop);
		Button btnSubMainCustomer = (Button)findViewById(R.id.btn_sub_main_customer);
		
		LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOn.setMargins(0, 0, 0,0);
		lpOn.weight = 5;
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		
		switch(remote.m_iSubMainMenuFocus)
		{
		case 1 :
			if (keyID == LEFT || keyID == RIGHT) {
				remote.m_iSingSubMenuFocus = 1;
			}
			
			m_iSongListItemCount = 0;
			m_iCurrentSongListPage = 1;
			m_iCurrentViewSongListPage = 1;
			m_iTotalSongListPage = 1;
			m_iRequestPage = 1;
			
			btnSubMainSing.setLayoutParams(lpOn);
			btnSubMainSing.setBackgroundResource(R.drawable.sub_icon_01_on);
			
			// 서브메뉴 초기화 및 노래부르기 서브메뉴로 변경
			LinearLayout layoutSingSubMenu = (LinearLayout)inf.inflate(R.layout.sing_sub, null);
			layoutSingSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutSingSubMenu);
			
			// 컨텐츠 초기화 및 노래부르기 컨텐츠로 변경
			LinearLayout layoutSing = (LinearLayout)inf.inflate(R.layout.sing_list, null);
			layoutSing.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutSing);
			
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_HOT);
			break;
		case 2 :
			m_iSetListenItemCount = 0;
			m_iListenItemCount = 0;
			
			m_iListenItemCount = 0;
			m_iCurrentListenListPage = 1;
			m_iCurrentViewListenListPage = 1;
			m_iTotalListenListPage = 1;
			m_iRequestPage = 1;
			
			btnSubMainListen.setLayoutParams(lpOn);
			btnSubMainListen.setBackgroundResource(R.drawable.sub_icon_02_on);
			
			// 서브메뉴 초기화 및 녹음곡 감상 서브메뉴로 변경
			LinearLayout layoutListenSubMenu = (LinearLayout)inf.inflate(R.layout.listen_sub, null);
			layoutListenSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutListenSubMenu);
			
			SettingListBackground(layoutList, R.drawable.search_bg_none);
			
			// 컨텐츠 초기화 및 녹음곡 감상 컨텐츠로 변경
			KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
			break;
		case 3 :
			remote.m_iMySubMenuFocus = 1;
			m_iSongListItemCount = 0;
			m_iCurrentSongListPage = 1;
			m_iCurrentViewSongListPage = 1;
			m_iTotalSongListPage = 1;
			m_iRequestPage = 1;
			
			btnSubMainMy.setLayoutParams(lpOn);
			btnSubMainMy.setBackgroundResource(R.drawable.sub_icon_03_on);
			
			// 서브메뉴 초기화 및 마이 노래방 서브메뉴로 변경
			LinearLayout layoutMySubMenu = (LinearLayout)inf.inflate(R.layout.my_sub, null);
			layoutMySubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutMySubMenu);
			
			// 컨텐츠 초기화 및 마이 노래방 컨텐츠로 변경
			LinearLayout layoutMy = (LinearLayout)inf.inflate(R.layout.my_list, null);
			layoutMy.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutMy);
			
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			KP(REQUEST_MY_SUB_MENU, KP_1500, MENU, MENU_MYLIST);
			break;
		case 4 :
			remote.m_iShopSubMenuFocus = 1;
			
			btnSubMainShop.setLayoutParams(lpOn);
			btnSubMainShop.setBackgroundResource(R.drawable.sub_icon_04_on);
			
			// 서브메뉴 초기화 및 노래방샵 서브메뉴로 변경
			LinearLayout layoutShopSubMenu = (LinearLayout)inf.inflate(R.layout.shop_sub, null);
			layoutShopSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutShopSubMenu);
			
			// 컨텐츠 초기화 및 노래방샵 컨텐츠로 변경
			LinearLayout layoutShopTicket = (LinearLayout)inf.inflate(R.layout.shop_ticket, null);
			layoutShopTicket.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutShopTicket);
			
			SettingListBackground(layoutList, R.drawable.search_bg_none);
			
			Button btnCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
			btnCertify.setVisibility(View.VISIBLE);
			
			//KP(REQUEST_SHOP_SUB_MENU, KP_1500, MENU, MENU_SHOP);
			KP(REQUEST_TICKET_SALES_STATE, "", "", "");
			break;
		case 5 :
			m_iCustomerListItemCount = 0;
			m_iCurrentViewCustomerListPage = 1;
			m_iTotalCustomerListPage = 1;
			m_iCustomerListDetailTotalPage = 1;
			m_iCurrentCustomerListDetailPage = 1;
			if (m_iEnterCustomerMenu == EVENT) {
				remote.m_iCustomerSubMenuFocus = 1;
			} else if (m_iEnterCustomerMenu == NOTICE) {
				remote.m_iCustomerSubMenuFocus = 2;
			} else {
				remote.m_iCustomerSubMenuFocus = 1;
			}
			m_strRequestCustomerDetailID = "";
			m_iCurrentCustomerListPage = 1;
			
			btnSubMainCustomer.setLayoutParams(lpOn);
			btnSubMainCustomer.setBackgroundResource(R.drawable.sub_icon_05_on);
			
			// 서브메뉴 초기화 및 고객센터 서브메뉴로 변경
			LinearLayout layoutCustomerSubMenu = (LinearLayout)inf.inflate(R.layout.customer_sub, null);
			layoutCustomerSubMenu.setLayoutParams(lp);
			addViewKaraoke(m_layoutSubMenu, layoutCustomerSubMenu);
			
			// 컨텐츠 초기화 및 고객센터 컨텐츠로 변경
			addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
			resetCustomerList();
			
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			if (m_iEnterCustomerMenu != KEY) {
				return;
			}
			
			if (remote.m_iCustomerSubMenuFocus == 1) {
				KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
			} else if (remote.m_iCustomerSubMenuFocus == 2) {
				KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
			}
			break;
		}
	}
	
	public void displaySingSubMenu(int keyID) {
		LOG(CLASS, "displaySingSubMenu >");
		LOG(CLASS, "keyID=" + String.valueOf(keyID));
		
		if (keyID == UP || keyID == RETURN) {
			exitSingSubMenu();
			return;
		}
		
		if (keyID == DOWN) {
			clickSingSubMenu();
			return;
		}
		
		// 노래부르기 서브메뉴로 새로 진입해 들어온 경우 초기화
		if (keyID == INIT) {
			remote.m_iState = STATE_SING_SUB_MENU;
			remote.m_iSingSubMenuFocus = 1;
		}
		
		// 하단 반주곡 리스트가 새로 출력되어야 하는 경우 포커스 & 페이징  초기화
		if (keyID == INIT || keyID == LEFT || keyID == RIGHT) {
			remote.m_iSongListFocus = 1;
			m_iSongListItemCount = 0;
			m_iCurrentSongListPage = 1;
			m_iCurrentViewSongListPage = 1;
			m_iTotalSongListPage = 1;
			m_iRequestPage = 1;
		}
		
		Button btnHot = (Button)findViewById(R.id.btn_sing_sub_hot);
		Button btnNew = (Button)findViewById(R.id.btn_sing_sub_new);
		Button btnGenre = (Button)findViewById(R.id.btn_sing_sub_genre);
		
		resetSingSubMenu();
		
		String M1 = "";
		String M2 = "";
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		
		switch(remote.m_iSingSubMenuFocus)
		{
		case 1 :
			btnHot.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = SING_HOT;
			SettingListBackground(layoutList, R.drawable.sing_bg);
			break;
		case 2 :
			btnNew.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = SING_RECENT;
			SettingListBackground(layoutList, R.drawable.sing_bg);
			break;
		case 3 :
			btnGenre.setBackgroundResource(R.drawable.tab_focus_on);
			M1 = SING_GENRE;
			M2 = GENRE_1;
			SettingListBackground(layoutList, R.drawable.sing_bg_genre);
			break;
		}
		
		if (keyID != NONE && keyID != RETURN) {
			initSongListIndex();
			
			if (remote.m_iSingSubMenuFocus != 3) {
				HideGenre();
				
				findViewById(R.id.txt_sing_sub_page).setVisibility(View.VISIBLE);
				findViewById(R.id.layout_sing_list_list_6).setVisibility(View.VISIBLE);
			} else {
				ShowGenre();
				
				resetSingSubGenreMenu();
				remote.m_iSingSubGenreMenuFocus = 1;
				
				findViewById(R.id.txt_sing_sub_page).setVisibility(View.INVISIBLE);
				findViewById(R.id.layout_sing_list_list_6).setVisibility(View.GONE);
			}
			
			KP(REQUEST_SONG_LIST, KP_1000, M1, M2);
		}
	}
	
	public void displaySingSubGenreMenu(int keyID) {
		if (keyID == UP) {
			exitSingSubGenreMenu();
			return;
		}
		
		if (keyID == DOWN) {
			clickSingSubGenreMenu();
			return;
		}
		
		// 하단 반주곡 리스트가 새로 출력되어야 하는 경우 포커스 & 페이징  초기화
		if (keyID == INIT || keyID == LEFT || keyID == RIGHT) {
			remote.m_iSongListFocus = 1;
			m_iSongListItemCount = 0;
			m_iCurrentSongListPage = 1;
			m_iCurrentViewSongListPage = 1;
			m_iTotalSongListPage = 1;
			m_iRequestPage = 1;
		}
		
		resetSingSubGenreMenu();
		
		Button btnBallad = (Button)findViewById(R.id.btn_sing_sub_genre_ballad);
		Button btnDance = (Button)findViewById(R.id.btn_sing_sub_genre_dance);
		Button btnTrot = (Button)findViewById(R.id.btn_sing_sub_genre_trot);
		Button btnRock = (Button)findViewById(R.id.btn_sing_sub_genre_rock);
		Button btnPop = (Button)findViewById(R.id.btn_sing_sub_genre_pop);
		Button btnAni = (Button)findViewById(R.id.btn_sing_sub_genre_ani);
		
		String M2 = "";
		
		switch(remote.m_iSingSubGenreMenuFocus)
		{
		case 1 :
			btnBallad.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_1;
			break;
		case 2 :
			btnDance.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_2;
			break;
		case 3 :
			btnTrot.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_3;
			break;
		case 4 :
			btnRock.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_4;
			break;
		case 5 :
			btnPop.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_5;
			break;
		case 6 :
			btnAni.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = GENRE_6;
			break;
		}
		
		if (keyID == LEFT || keyID == RIGHT) {
			KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, M2);
		}
	}

	public void displaySongList(int keyID) {
		LOG(CLASS, "displaySongList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewSongListPage + "/toPage=" + m_iTotalSongListPage);
		
		if (keyID == UP) {
			if (remote.m_iSongListFocus == 0) {
				exitSongList();
				return;
			}
		}
		
		if ( m_iTotalSongListPage > 1) {
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
			
			if (m_bIsGenre) {
				SettingListBackground(layoutList, R.drawable.sing_bg_genre_narrow);
			} else {
				SettingListBackground(layoutList, R.drawable.sing_bg_narrow);
			}
		}
		
		if (keyID == RIGHT) {
			if (m_iCurrentViewSongListPage < m_iTotalSongListPage) {
				LOG(CLASS, "next");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentSongListPage++;
				m_iCurrentViewSongListPage++;
				
				// 1, 21, 31... 페이지면 새로 요청
				if (m_iCurrentViewSongListPage % 10 == 1) {
					m_iRequestPage++;
					m_iCurrentSongListPage = 1;
					
					switch(remote.m_iSingSubMenuFocus)
					{
					case 1 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_HOT);
						break;
					case 2 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_RECENT);
						break;
					case 3 :
						if (remote.m_iSingSubGenreMenuFocus == 1) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_1);
						} else if (remote.m_iSingSubGenreMenuFocus == 2) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_2);
						} else if (remote.m_iSingSubGenreMenuFocus == 3) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_3);
						} else if (remote.m_iSingSubGenreMenuFocus == 4) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_4);
						} else if (remote.m_iSingSubGenreMenuFocus == 5) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_5);
						} else {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_6);
						}
						break;
					}
				} else {
					moveSongListPage();
					displaySongList(NONE);
				}
			// 마지막 페이지에서 RIGHT키 입력 시 1페이지로 이동
			} else {
				if (m_iTotalSongListPage > 1) {
					remote.m_iSongListFocus = 1;
					
					m_iCurrentViewSongListPage = 1;
					m_iCurrentSongListPage = 1;
					int temp = m_iRequestPage;
					m_iRequestPage = 1;
					// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
					if (temp != m_iRequestPage) {
						switch(remote.m_iSingSubMenuFocus)
						{
						case 1 :
							KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_HOT);
							break;
						case 2 :
							KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_RECENT);
							break;
						case 3 :
							if (remote.m_iSingSubGenreMenuFocus == 1) {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_1);
							} else if (remote.m_iSingSubGenreMenuFocus == 2) {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_2);
							} else if (remote.m_iSingSubGenreMenuFocus == 3) {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_3);
							} else if (remote.m_iSingSubGenreMenuFocus == 4) {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_4);
							} else if (remote.m_iSingSubGenreMenuFocus == 5) {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_5);
							} else {
								KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_6);
							}
							break;
						}
					}
					
					moveSongListPage();
					displaySongList(NONE);
				}
			}
		} else if (keyID == LEFT) {
			if (m_iCurrentViewSongListPage > 1) {
				LOG(CLASS, "prev");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentSongListPage--;
				m_iCurrentViewSongListPage--;
				
				//10, 20, 30... 페이지면 새로 요청
				if (m_iCurrentViewSongListPage % 10 == 0) {
					m_iRequestPage--;
					m_iCurrentSongListPage = 10;
					
					switch(remote.m_iSingSubMenuFocus)
					{
					case 1 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_HOT);
						break;
					case 2 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_RECENT);
						break;
					case 3 :
						if (remote.m_iSingSubGenreMenuFocus == 1) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_1);
						} else if (remote.m_iSingSubGenreMenuFocus == 2) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_2);
						} else if (remote.m_iSingSubGenreMenuFocus == 3) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_3);
						} else if (remote.m_iSingSubGenreMenuFocus == 4) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_4);
						} else if (remote.m_iSingSubGenreMenuFocus == 5) {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_5);
						} else {
							KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_6);
						}
						break;
					}
				} else {
					moveSongListPage();
				}
			// 1페이지에서 LEFT키 입력 : 마지막 페이지로 이동
			} else {
				if (m_iTotalSongListPage > 1) {
					remote.m_iSongListFocus = 1;
					
					m_iCurrentViewSongListPage = m_iTotalSongListPage;
					m_iCurrentSongListPage = m_iTotalSongListPage % 10;
					if (m_iCurrentSongListPage == 0) {
						m_iCurrentSongListPage = 10;
					} else {
						int temp = m_iRequestPage;
						m_iRequestPage = (m_iTotalSongListPage / 10) + 1;
						// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
						if (temp != m_iRequestPage) {
							switch(remote.m_iSingSubMenuFocus)
							{
							case 1 :
								KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_HOT);
								break;
							case 2 :
								KP(REQUEST_SONG_LIST, KP_1000, MENU_SING, SING_RECENT);
								break;
							case 3 :
								if (remote.m_iSingSubGenreMenuFocus == 1) {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_1);
								} else if (remote.m_iSingSubGenreMenuFocus == 2) {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_2);
								} else if (remote.m_iSingSubGenreMenuFocus == 3) {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_3);
								} else if (remote.m_iSingSubGenreMenuFocus == 4) {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_4);
								} else if (remote.m_iSingSubGenreMenuFocus == 5) {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_5);
								} else {
									KP(REQUEST_SONG_LIST, KP_1000, SING_GENRE, GENRE_6);
								}
								break;
							}
						}
					}
					
					moveSongListPage();
				}
			}
		}
		
		resetSongList();
		
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_sing_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_sing_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_sing_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_sing_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_sing_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_sing_list_list_6);
		
		String strColorOn = "#FFFFFF";
		
		TextView txtRank1 = (TextView)findViewById(R.id.txt_sing_rank_1);
		TextView txtRank2 = (TextView)findViewById(R.id.txt_sing_rank_2);
		TextView txtRank3 = (TextView)findViewById(R.id.txt_sing_rank_3);
		TextView txtRank4 = (TextView)findViewById(R.id.txt_sing_rank_4);
		TextView txtRank5 = (TextView)findViewById(R.id.txt_sing_rank_5);
		TextView txtRank6 = (TextView)findViewById(R.id.txt_sing_rank_6);
		
		TextView txtNumber1 = (TextView)findViewById(R.id.txt_sing_number_1);
		TextView txtNumber2 = (TextView)findViewById(R.id.txt_sing_number_2);
		TextView txtNumber3 = (TextView)findViewById(R.id.txt_sing_number_3);
		TextView txtNumber4 = (TextView)findViewById(R.id.txt_sing_number_4);
		TextView txtNumber5 = (TextView)findViewById(R.id.txt_sing_number_5);
		TextView txtNumber6 = (TextView)findViewById(R.id.txt_sing_number_6);
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		switch(remote.m_iSongListFocus)
		{
		case 1 :
			layoutList1.setBackgroundResource(R.drawable.list_focus_on);
			txtRank1.setTextColor(Color.parseColor(strColorOn));
			txtNumber1.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon1.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon1.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon1.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon1.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon1.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon1.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		case 2 :
			layoutList2.setBackgroundResource(R.drawable.list_focus_on);
			txtRank2.setTextColor(Color.parseColor(strColorOn));
			txtNumber2.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon2.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon2.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon2.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon2.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon2.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon2.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		case 3 :
			layoutList3.setBackgroundResource(R.drawable.list_focus_on);
			txtRank3.setTextColor(Color.parseColor(strColorOn));
			txtNumber3.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon3.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon3.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon3.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon3.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon3.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon3.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		case 4 :
			layoutList4.setBackgroundResource(R.drawable.list_focus_on);
			txtRank4.setTextColor(Color.parseColor(strColorOn));
			txtNumber4.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon4.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon4.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon4.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon4.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon4.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon4.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		case 5 :
			layoutList5.setBackgroundResource(R.drawable.list_focus_on);
			txtRank5.setTextColor(Color.parseColor(strColorOn));
			txtNumber5.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon5.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon5.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon5.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon5.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon5.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon5.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		case 6 :
			layoutList6.setBackgroundResource(R.drawable.list_focus_on);
			txtRank6.setTextColor(Color.parseColor(strColorOn));
			txtNumber6.setTextColor(Color.parseColor(strColorOn));
			
			switch(remote.m_iSingSubMenuFocus)
			{
			case 1 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon6.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon6.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			case 2 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon6.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon6.setImageResource(R.drawable.common_bullet_new_on);
				}
				break;
			case 3 :
				if (isFavor(remote.m_iSongListFocus)) {
					imgIcon6.setImageResource(R.drawable.common_bullet_favor_on);
				} else {
					imgIcon6.setImageResource(R.drawable.common_bullet_note_on);
				}
				break;
			}
			break;
		}
	}

	public void displaySongListDetail(int keyID) {
		Button btnStart = (Button)findViewById(R.id.btn_detail_play);
		Button btnEngage = (Button)findViewById(R.id.btn_detail_engage);
		Button btnFavor = (Button)findViewById(R.id.btn_detail_favor);
		Button btnClose = (Button)findViewById(R.id.btn_detail_close);
		
		btnStart.setBackgroundResource(R.drawable.list_pop_focus_01_off);
		btnEngage.setBackgroundResource(R.drawable.list_pop_focus_02_off);
		btnFavor.setBackgroundResource(R.drawable.list_pop_focus_03_off);
		btnClose.setBackgroundResource(R.drawable.list_pop_focus_04_off);
		
		switch(remote.m_iSongListDetailFocus)
		{
		case 1 :
			btnStart.setBackgroundResource(R.drawable.list_pop_focus_01_over);
			break;
		case 2 :
			btnEngage.setBackgroundResource(R.drawable.list_pop_focus_02_over);
			break;
		case 3 :
			btnFavor.setBackgroundResource(R.drawable.list_pop_focus_03_over);
			break;
		case 4 :
			btnClose.setBackgroundResource(R.drawable.list_pop_focus_04_over);
			break;
		}
	}

	public void displayListenSubMenu(int keyID) {
		if (keyID == UP || keyID == RETURN) {
			exitListenSubMenu();
			return;
		}
		
		if (keyID == DOWN) {
			clickListenSubMenu();
			return;
		}
		
		// 하단 반주곡 리스트가 새로 출력되어야 하는 경우 포커스 & 페이징  초기화
		if (keyID == INIT || keyID == LEFT || keyID == RIGHT) {
			remote.m_iListenListFocusX = 1;
			remote.m_iListenListFocusY = 1;
			m_iListenItemCount = 0;
			m_iCurrentListenListPage = 1;
			m_iCurrentViewListenListPage = 1;
			m_iTotalListenListPage = 1;
			m_iRequestPage = 1;
		}
		
		Button btnNow = (Button)findViewById(R.id.btn_listen_sub_now);
		Button btnWeek = (Button)findViewById(R.id.btn_listen_sub_week);
		Button btnBest = (Button)findViewById(R.id.btn_listen_sub_best);
		
		resetListenSubMenu();
		
		String M2 = "";
		
		switch(remote.m_iListenSubMenuFocus)
		{
		case 1 :
			btnNow.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = LISTEN_TIMELINE;
			break;
		case 2 :
			btnWeek.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = LISTEN_WEEK;
			break;
		case 3 :
			btnBest.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = LISTEN_TOP100;
			break;
		}
		
		if (keyID != NONE && keyID != RETURN) {
			m_iSetListenItemCount = 0;
			m_iListenItemCount = 0;
			
			KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, M2);
		}
	}
	
	public void displayListenList(int keyID) {
		LOG(CLASS, "displayListenList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewListenListPage + "/toPage=" + m_iTotalListenListPage);
		
		if (keyID == UP) {
			if (remote.m_iListenListFocusY == 0) {
				exitListenList();
				return;
			}
		}
		
		if (m_iTotalListenListPage > 1) {
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
			SettingListBackground(layoutList, R.drawable.listen_bg_narrow);
		}
		
		if (keyID == RIGHT) {
			if (remote.m_iListenListFocusX == 5) {
				if (m_iCurrentViewListenListPage < m_iTotalListenListPage) {
					LOG(CLASS, "next");
					
					remote.m_iListenListFocusX = 1;
					
					m_iCurrentListenListPage++;
					m_iCurrentViewListenListPage++;
					
					//1, 21, 31... 페이지면 새로 요청
					if (m_iCurrentViewListenListPage%10 == 1) {
						LOG(CLASS, "NEW Request : Next Json Page");
						
						m_iRequestPage++;
						m_iCurrentListenListPage = 1;
						
						switch(remote.m_iListenSubMenuFocus)
						{
						case 1 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
							break;
						case 2 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_WEEK);
							break;
						case 3 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TOP100);
							break;
						}
					} else {
						moveListenListPage();
					}
				// 마지막 페이지에서 RIGHT키 입력 시 1페이지로 이동
				} else {
					remote.m_iListenListFocusX = 1;
					m_iCurrentViewListenListPage = 1;
					m_iCurrentListenListPage = 1;
					int temp = m_iRequestPage;
					m_iRequestPage = 1;
					
					// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
					if (temp != m_iRequestPage) {
						if (m_iTotalListenListPage > 1) {
							LOG(CLASS, "NEW Request : First Json Page");
							
							switch(remote.m_iListenSubMenuFocus)
							{
							case 1 :
								KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
								break;
							case 2 :
								KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_WEEK);
								break;
							case 3 :
								KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TOP100);
								break;
							}
						}
					}
					
					moveListenListPage();
				}
			}
		} else if (keyID == LEFT) {
			if (remote.m_iListenListFocusX == 0) {
				if (m_iCurrentViewListenListPage > 1) {
					LOG(CLASS, "prev");
					
					remote.m_iListenListFocusX = 4;
					
					m_iCurrentListenListPage--;
					m_iCurrentViewListenListPage--;
					
					// 10, 20, 30... 페이지면 새로 요청
					if (m_iCurrentViewListenListPage % 10 == 0) {
						m_iRequestPage--;
						m_iCurrentListenListPage = 10;
						
						switch(remote.m_iListenSubMenuFocus)
						{
						case 1 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
							break;
						case 2 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_WEEK);
							break;
						case 3 :
							KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TOP100);
							break;
						}
					} else {
						moveListenListPage();
					}
				// 1페이지에서 LEFT키 입력 : 마지막 페이지로 이동
				} else {
					// 최소한 1 페이지 이상 있을 때
					if (m_iTotalListenListPage > 1) {
						LOG(CLASS, "GO Last Page");
						
						remote.m_iListenListFocusX = 4;
						
						m_iCurrentViewListenListPage = m_iTotalListenListPage;
						m_iCurrentListenListPage = m_iTotalListenListPage % 10;
						if (m_iCurrentListenListPage == 0) {
							m_iCurrentListenListPage = 10;
						} else {
							int temp = m_iRequestPage;
							if (m_iTotalListenListPage < 100) {
								m_iRequestPage = (m_iTotalListenListPage / 10) + 1;
							} else {
								m_iRequestPage = m_iTotalListenListPage / 10;
							}
							
							// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
							if (temp != m_iRequestPage) {
								switch(remote.m_iListenSubMenuFocus)
								{
								case 1 :
									KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
									break;
								case 2 :
									KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_WEEK);
									break;
								case 3 :
									KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TOP100);
									break;
								}
							}
						}
					// 그도 아니면 포커스 움직이지 않는 것으로 보여줌
					} else {
						remote.m_iListenListFocusX = 1;
					}
				}
			}
		}
		
		resetListenList();
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutListenListFocus = (LinearLayout)inf.inflate(R.layout.listen_list_focus, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutListenListFocus, param);
		
		switch(remote.m_iListenListFocusX)
		{
		case 1 :
			if (remote.m_iListenListFocusY == 1) {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_1).setBackgroundResource(R.drawable.listen_focus_bg);
			} else {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_5).setBackgroundResource(R.drawable.listen_focus_bg);
			}
			break;
		case 2 :
			if (remote.m_iListenListFocusY == 1) {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_2).setBackgroundResource(R.drawable.listen_focus_bg);
			} else {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_6).setBackgroundResource(R.drawable.listen_focus_bg);
			}
			break;
		case 3 :
			if (remote.m_iListenListFocusY == 1) {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_3).setBackgroundResource(R.drawable.listen_focus_bg);
			} else {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_7).setBackgroundResource(R.drawable.listen_focus_bg);
			}
			break;
		case 4 :
			if (remote.m_iListenListFocusY == 1) {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_4).setBackgroundResource(R.drawable.listen_focus_bg);
			} else {
				m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_8).setBackgroundResource(R.drawable.listen_focus_bg);
			}
			break;
		}
	}
	
	public void displayListeing(int keyID) {
		if (keyID == DOWN) {
			m_iListenOtherRequestPage = 1;
		    KP(REQUEST_LISTEN_OTHER, "KP_2001", "", "");
		    LOG(CLASS, "current Listening ID : " + m_strListeningSongID);
		}
	}

	public void displayListenOther(int keyID) {
		SetListenOtherFocus(keyID);
	}

	@SuppressWarnings("deprecation")
	public void displayMySubMenu(int keyID) {
		LOG(CLASS, "displayMySubMenu >");
		LOG(CLASS, "keyID=" + String.valueOf(keyID));
		
		if (keyID == UP || keyID == RETURN) {
			exitMySubMenu();
			return;
		}
		
		if (keyID == DOWN) {
			clickMySubMenu();
			return;
		}
		
		if (keyID == LEFT) {
			if (remote.m_iMySubMenuFocus > 1) {
				remote.m_iMySubMenuFocus--;
			} else {
				remote.m_iMySubMenuFocus = 3;
			}
		} else if (keyID == RIGHT) {
			if (remote.m_iMySubMenuFocus < 3) {
				remote.m_iMySubMenuFocus++;
			} else {
				remote.m_iMySubMenuFocus = 1;
			}
		}
		
		// 하단 반주곡 리스트가 새로 출력되어야 하는 경우 포커스 & 페이징  초기화
		if (keyID == INIT || keyID == LEFT || keyID == RIGHT) {
			remote.m_iSongListFocus = 1;
			m_iSongListItemCount = 0;
			m_iCurrentSongListPage = 1;
			m_iCurrentViewSongListPage = 1;
			m_iTotalSongListPage = 1;
			m_iRequestPage = 1;
			
			m_iCurrentListenListPage = 1;
			m_iCurrentViewListenListPage = 1;
			m_iTotalListenListPage = 1;
		}
		
		Button btnRecent = (Button)findViewById(R.id.btn_my_sub_recent);
		Button btnFavor = (Button)findViewById(R.id.btn_my_sub_favor);
		Button btnRecord = (Button)findViewById(R.id.btn_my_sub_record);
		
		resetMySubMenu();
		
		String M1 = MENU_MYLIST;
		String M2 = "";
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.sing_bg);
		
		switch(remote.m_iMySubMenuFocus)
		{
		case 1 :
			btnRecent.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = MYLIST_RECENT;  
			break;
		case 2 :
			btnFavor.setBackgroundResource(R.drawable.tab_focus_on);
			M2 = MYLIST_FAVORITE;
			break;
		case 3 :
			btnRecord.setBackgroundResource(R.drawable.tab_focus_on);
			break;
		}
		
		if (keyID != NONE && keyID != RETURN) {
			if (remote.m_iMySubMenuFocus != 3) {
				// 컨텐츠 초기화 및 마이 노래방 컨텐츠로 변경
				LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				
				LinearLayout layoutMy = (LinearLayout)inf.inflate(R.layout.my_list, null);
				layoutMy.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutMy);

				SettingListBackground(layoutList, R.drawable.sing_bg);
				
				initSongListIndex();
				
				KP(REQUEST_SONG_LIST, KP_3000, M1, M2);
			} else {
				m_iRequestPage = 1;
				m_bIsMyRecordReCertifyBtnFocused = false;
				
				KP(REQUEST_MY_RECORD_LIST, KP_3001, MENU_MYLIST, MYLIST_RECORD);
			}
		}
	}
	
	public void displayMyList(int keyID) {
		LOG(CLASS, "displayMyList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewSongListPage + "/toPage=" + m_iTotalSongListPage);
		
		if (keyID == UP) {
			if (remote.m_iSongListFocus == 0) {
				exitMyList();
				return;
			}
		}
		
		if (m_iTotalSongListPage > 1) {
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
			SettingListBackground(layoutList, R.drawable.sing_bg_narrow);
		}
		
		if (keyID == RIGHT) {
			if (m_iCurrentViewSongListPage < m_iTotalSongListPage) {
				LOG(CLASS, "next");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentSongListPage++;
				m_iCurrentViewSongListPage++;
				
				//1, 21, 31... 페이지면 새로 요청
				if (m_iCurrentViewSongListPage%10 == 1) {
					m_iRequestPage++;
					m_iCurrentSongListPage = 1;
					
					switch(remote.m_iMySubMenuFocus)
					{
					case 1 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_RECENT);
						break;
					case 2 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_FAVORITE);
						break;
					}
				} else {
					moveMyListPage();
				}
			// 마지막 페이지에서 RIGHT키 입력 시 1페이지로 이동
			} else {
				if (m_iTotalSongListPage > 1) {
					remote.m_iSongListFocus = 1;
					
					m_iCurrentViewSongListPage = 1;
					m_iCurrentSongListPage = 1;
					int temp = m_iRequestPage;
					m_iRequestPage = 1;
					// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
					if (temp != m_iRequestPage) {
						switch(remote.m_iMySubMenuFocus)
						{
						case 1 :
							KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_RECENT);
							break;
						case 2 :
							KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_FAVORITE);
							break;
						}
					}
					
					moveMyListPage();
				}
			}
		} else if (keyID == LEFT) {
			if (m_iCurrentViewSongListPage > 1) {
				LOG(CLASS, "prev");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentSongListPage--;
				m_iCurrentViewSongListPage--;
				
				//10, 20, 30... 페이지면 새로 요청
				if (m_iCurrentViewSongListPage%10 == 0) {
					m_iRequestPage--;
					m_iCurrentSongListPage = 10;
					
					switch(remote.m_iMySubMenuFocus)
					{
					case 1 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_RECENT);
						break;
					case 2 :
						KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_FAVORITE);
						break;
					}
				} else {
					moveMyListPage();
				}
			// 1페이지에서 LEFT키 입력 : 마지막 페이지로 이동
			} else {
				if (m_iTotalSongListPage > 1) {
					remote.m_iSongListFocus = 1;
					
					m_iCurrentViewSongListPage = m_iTotalSongListPage;
					m_iCurrentSongListPage = m_iTotalSongListPage % 10;
					if (m_iCurrentSongListPage == 0) {
						m_iCurrentSongListPage = 10;
					} else {
						int temp = m_iRequestPage;
						m_iRequestPage = (m_iTotalSongListPage / 10) + 1;
						// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
						if (temp != m_iRequestPage) {
							switch(remote.m_iMySubMenuFocus)
							{
							case 1 :
								KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_RECENT);
								break;
							case 2 :
								KP(REQUEST_SONG_LIST, KP_1000, MENU_MYLIST, MYLIST_FAVORITE);
								break;
							}
						}
					}
					
					moveMyListPage();
				}
			}
		}
		
		resetMyList();
		
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_sing_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_sing_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_sing_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_sing_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_sing_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_sing_list_list_6);
		
		String strColorOn = "#FFFFFF";
		
		TextView txtNumber1 = (TextView)findViewById(R.id.txt_sing_number_1);
		TextView txtNumber2 = (TextView)findViewById(R.id.txt_sing_number_2);
		TextView txtNumber3 = (TextView)findViewById(R.id.txt_sing_number_3);
		TextView txtNumber4 = (TextView)findViewById(R.id.txt_sing_number_4);
		TextView txtNumber5 = (TextView)findViewById(R.id.txt_sing_number_5);
		TextView txtNumber6 = (TextView)findViewById(R.id.txt_sing_number_6);
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		switch(remote.m_iSongListFocus)
		{
		case 1 :
			layoutList1.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber1.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon1.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon1.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 2 :
			layoutList2.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber2.setTextColor(Color.parseColor(strColorOn));
			imgIcon2.setImageResource(R.drawable.common_bullet_note_on);
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon2.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon2.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 3 :
			layoutList3.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber3.setTextColor(Color.parseColor(strColorOn));
			imgIcon3.setImageResource(R.drawable.common_bullet_note_on);
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon3.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon3.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 4 :
			layoutList4.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber4.setTextColor(Color.parseColor(strColorOn));
			imgIcon4.setImageResource(R.drawable.common_bullet_note_on);
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon4.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon4.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 5 :
			layoutList5.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber5.setTextColor(Color.parseColor(strColorOn));
			imgIcon5.setImageResource(R.drawable.common_bullet_note_on);
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 6 :
			layoutList6.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber6.setTextColor(Color.parseColor(strColorOn));
			imgIcon6.setImageResource(R.drawable.common_bullet_note_on);
			if (isFavor(remote.m_iSongListFocus)) {
				imgIcon6.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon6.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		}
	}
	
	public void displayShopSubMenu(int keyID) {
		if (keyID == UP) {
			exitShopSubMenu();
			return;
		}
		
		if (keyID == ENTER || keyID == DOWN) {
			clickShopSubMenu();
			return;
		}
		
		resetShopSubMenu();
		
		Button btnShopSubTicket = (Button)findViewById(R.id.btn_shop_sub_ticket);
		Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
		
		switch(remote.m_iShopSubMenuFocus)
		{
		case 1 :
			btnShopSubTicket.setBackgroundResource(R.drawable.tab_focus_on);
			
			KP(REQUEST_TICKET_SALES_STATE, "", "", "");
			/*
			LinearLayout layoutShopTicket = (LinearLayout)inf.inflate(R.layout.shop_ticket, null);
			layoutShopTicket.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutShopTicket);
			*/
			break;
		case 2 :
			btnShopSubCertify.setBackgroundResource(R.drawable.tab_focus_on);
			
			KP(REQUEST_CERTIFY_STATE, KP_9000, MAIN, MENU);
			break;
		}
	}
	
	public void displayShopTicket(int keyID) {
		LinearLayout layoutTicket = (LinearLayout)findViewById(R.id.layout_shop_ticket);
		Button btnPurchase = (Button)findViewById(R.id.btn_shop_purchase);
		Button btnKPInfo = (Button)findViewById(R.id.btn_shop_kp_info);
		
		EditText editCoupon = null;
		Button btnCouponRegist = null;
		if (!m_bCouponUser) {
			editCoupon = (EditText)findViewById(R.id.edit_coupon);
			btnCouponRegist = (Button)findViewById(R.id.btn_coupon_regist);
		}
		
		Button btnDay = (Button)findViewById(R.id.btn_shop_tab_day);
		Button btnMonth = (Button)findViewById(R.id.btn_shop_tab_month);
		Button btnCoupon = (Button)findViewById(R.id.btn_shop_tab_coupon);
		
		if ( keyID == UP ) {
			if (m_bIsFocusedOnTicket) {
				btnKPInfo.setBackgroundResource(R.drawable.shop_focus_02_off);
				switch(remote.m_iShopTicketFocus)
				{
				case 1 :
					layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_month_on);
					break;
				case 2 :
					layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_day_on);
					break;
				case 3 :
					editCoupon.setBackgroundResource(R.drawable.coupon_input_off);
					btnCouponRegist.setBackgroundResource(R.drawable.coupon_btn_regist_off);
					btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
					
					editCoupon.clearFocus();
					editCoupon.setSelected(false);
					editCoupon.setFocusable(false);
					editCoupon.setFocusableInTouchMode(false);
					break;
				}
				btnPurchase.setBackgroundResource(R.drawable.tab_focus_long_on);
				m_bIsFocusedOnTicket = false;
				remote.m_iShopTicketFocusY = 1;
				m_iCouponFocus = 1;
			} else {
				exitTicket();
				return;
			}
		}
		
		if (keyID == DOWN) {
			if (remote.m_iShopTicketFocus == 3 && m_bCouponUser) {
				return;
			}
			
			m_bIsFocusedOnTicket = true;
			remote.m_iShopTicketFocusY = 2;
		}
		
		if (keyID == RIGHT && remote.m_iShopTicketFocus == 3 && !m_bIsFocusedOnTicket) {
			m_iCouponFocus = 1;
		}
		
		if (remote.m_iShopTicketFocus == 3 && m_bIsFocusedOnTicket) {
			if (keyID == LEFT) {
				m_iCouponFocus = 1;
			} else if (keyID == RIGHT) {
				m_iCouponFocus = 2;
			}
		}
		
		LinearLayout layoutLeft = (LinearLayout)findViewById(R.id.layout_shop_ticket_left);
		LinearLayout layoutRight = (LinearLayout)findViewById(R.id.layout_shop_ticket_right);
		LinearLayout layoutCoupon = (LinearLayout)findViewById(R.id.layout_shop_coupon_regist);
		
		TextView txtSubscripte = (TextView)findViewById(R.id.txt_shop_info);
		
		btnDay.setBackgroundResource(R.drawable.shop_ticket_tab_off);
		btnMonth.setBackgroundResource(R.drawable.shop_ticket_tab_off);
		btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_off);
		
		ImageView item = (ImageView)findViewById(R.id.img_shop_item_01);
		
		if (!m_bIsFocusedOnTicket) {
			TextView txtPrice = (TextView)findViewById(R.id.txt_shop_price);
			
			switch(remote.m_iShopTicketFocus)
			{
			case 1 :
				layoutLeft.setVisibility(View.VISIBLE);
				layoutRight.setVisibility(View.VISIBLE);
				layoutCoupon.setVisibility(View.GONE);
				
				txtSubscripte.setText(R.string.ticket_vat);
				btnKPInfo.setVisibility(View.VISIBLE);
				
				btnDay.setBackgroundResource(R.drawable.shop_ticket_tab_on);
				layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_month_on);
				item.setImageBitmap(util_shopItem01.m_bitMap);
				//txtPrice.setText(getString(R.string.ticket_month_price));
				txtPrice.setText(ticketitem01.prise + "원");
				break;
			case 2 :
				editCoupon.setText("");
				
				layoutLeft.setVisibility(View.VISIBLE);
				layoutRight.setVisibility(View.VISIBLE);
				layoutCoupon.setVisibility(View.GONE);
				
				txtSubscripte.setText(R.string.ticket_vat);
				btnKPInfo.setVisibility(View.VISIBLE);
				
				btnMonth.setBackgroundResource(R.drawable.shop_ticket_tab_on);
				layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_day_on);
				item.setImageBitmap(util_shopItem02.m_bitMap);
				//txtPrice.setText(getString(R.string.ticket_day_price));
				txtPrice.setText(ticketitem02.prise + "원");
				break;
			case 3 :
				layoutLeft.setVisibility(View.GONE);
				layoutRight.setVisibility(View.GONE);
				layoutCoupon.setVisibility(View.VISIBLE);
				
				LinearLayout layoutRegisted = (LinearLayout)findViewById(R.id.layout_coupon_registed);
				LinearLayout layoutRegist = (LinearLayout)findViewById(R.id.layout_coupon_not_regist);
				if (m_bCouponUser) {
					layoutRegisted.setVisibility(View.VISIBLE);
					layoutRegist.setVisibility(View.GONE);
					
					btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
					layoutTicket.setBackgroundResource(R.drawable.shop_coupon_bg_registed_on);
					
					TextView txtCouponTerm = (TextView)findViewById(R.id.txt_coupon_term);
					txtCouponTerm.setText(m_strCouponTerm);
				} else {
					layoutRegisted.setVisibility(View.GONE);
					layoutRegist.setVisibility(View.VISIBLE);
					
					btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
					layoutTicket.setBackgroundResource(R.drawable.shop_coupon_bg_regist_on);
				}
				
				txtSubscripte.setText(R.string.coupon_subscripte);
				btnKPInfo.setVisibility(View.INVISIBLE);
				
				item.setImageBitmap(null);
				break;
			}
		} else {
			switch(remote.m_iShopTicketFocus)
			{
			case 1 :
				layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_month_off);
				btnPurchase.setBackgroundResource(R.drawable.tab_focus_long_off);
				btnKPInfo.setBackgroundResource(R.drawable.shop_focus_02_on);
				break;
			case 2 :
				layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_day_off);
				btnPurchase.setBackgroundResource(R.drawable.tab_focus_long_off);
				btnKPInfo.setBackgroundResource(R.drawable.shop_focus_02_on);
				break;
			case 3 :
				//btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
				btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_off);
				
				if (m_iCouponFocus == 1) {
					editCoupon.setBackgroundResource(R.drawable.coupon_input_on);
					btnCouponRegist.setBackgroundResource(R.drawable.coupon_btn_regist_off);
					
					//editCoupon.setText("");
					
					editCoupon.setFocusableInTouchMode(true);
					editCoupon.setFocusable(true);
					editCoupon.setSelected(true);
					editCoupon.requestFocus();
								
					setIMELocation();
				} else {
					editCoupon.setBackgroundResource(R.drawable.coupon_input_off);
					btnCouponRegist.setBackgroundResource(R.drawable.coupon_btn_regist_on);
					
					editCoupon.clearFocus();
					editCoupon.setSelected(false);
					editCoupon.setFocusable(false);
					editCoupon.setFocusableInTouchMode(false);
				}
				break;
			}
		}
	}
	
	public void displayPPVInfo(int keyID) {
		Button btnOK = (Button)findViewById(R.id.btn_message_ticket_day_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_day_cancel);
		
		if (keyID == LEFT) {
			m_iTicketMessageFocusX = 1;
			
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
		} else if (keyID == RIGHT) {
			m_iTicketMessageFocusX = 2;
			
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
		}
	}
	
	public void displayPPXPass(int keyID) {
		if (keyID == LEFT) {
			if (m_iTicketMessageFocusX > 1) {
				m_iTicketMessageFocusX--;
			}
		} else if (keyID == RIGHT) {
			if (m_iTicketMessageFocusY == 1) {
				if (m_iTicketMessageFocusX < 4) {
					m_iTicketMessageFocusX++;
				}
			} else {
				if (m_iTicketMessageFocusX < 3) {
					m_iTicketMessageFocusX++;
				}
			}
		} else if (keyID == UP) {
			m_iTicketMessageFocusX = 1;
			m_iTicketMessageFocusY = 1;
			m_bIsFocusedOnPassNumber = true;
		} else if (keyID == DOWN) {
			m_iTicketMessageFocusX = 1;
			m_iTicketMessageFocusY = 2;
			//m_bIsFocusedOnPassNumber = false;
		}
		
		resetPPXPass();
		
		switch(m_iTicketMessageFocusY)
		{
		case 1:
			if (m_iTicketMessageFocusX == 1) {
				LinearLayout layoutPass01 = (LinearLayout)findViewById(R.id.layout_ticket_pass_01);
				layoutPass01.setBackgroundResource(R.drawable.ticket_popup_pass_on);
				
				if (m_strInputPass[0] != "") {
					ImageView imgPass01 = (ImageView)findViewById(R.id.img_ticket_pass_01);
					imgPass01.setImageResource(R.drawable.pop_pw_on);
				}
			} else if (m_iTicketMessageFocusX == 2) {
				LinearLayout layoutPass02 = (LinearLayout)findViewById(R.id.layout_ticket_pass_02);
				layoutPass02.setBackgroundResource(R.drawable.ticket_popup_pass_on);
				
				if (m_strInputPass[1] != "") {
					ImageView imgPass02 = (ImageView)findViewById(R.id.img_ticket_pass_02);
					imgPass02.setImageResource(R.drawable.pop_pw_on);
				}
			} else if (m_iTicketMessageFocusX == 3) {
				LinearLayout layoutPass03 = (LinearLayout)findViewById(R.id.layout_ticket_pass_03);
				layoutPass03.setBackgroundResource(R.drawable.ticket_popup_pass_on);
				
				if (m_strInputPass[2] != "") {
					ImageView imgPass03 = (ImageView)findViewById(R.id.img_ticket_pass_03);
					imgPass03.setImageResource(R.drawable.pop_pw_on);
				}
			} else if (m_iTicketMessageFocusX == 4) {
				LinearLayout layoutPass04 = (LinearLayout)findViewById(R.id.layout_ticket_pass_04);
				layoutPass04.setBackgroundResource(R.drawable.ticket_popup_pass_on);
				
				if (m_strInputPass[3] != "") {
					ImageView imgPass04 = (ImageView)findViewById(R.id.img_ticket_pass_04);
					imgPass04.setImageResource(R.drawable.pop_pw_on);
				}
			}
			break;
		case 2:
			if (m_iTicketMessageFocusX == 1) {
				Button btnOK = (Button)findViewById(R.id.btn_message_ticket_password_ok);
				btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
			} else if (m_iTicketMessageFocusX == 2) {
				Button btnBack = (Button)findViewById(R.id.btn_message_ticket_password_back);
				btnBack.setBackgroundResource(R.drawable.pop_btn_01_on);
			} else if (m_iTicketMessageFocusX == 3) {
				Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_password_cancel);
				btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
			}
			break;
		}
	}
	
	public void displayPPMNotice(int keyID) {
		switch(keyID)
		{
		case UP :
			if (m_iTicketMessageFocusY > 1) {
				m_iTicketMessageFocusY--;
			}
			break;
		case DOWN :
			if (m_iTicketMessageFocusY < 3) {
				m_iTicketMessageFocusY++;
				
				if (m_iTicketMessageFocusY == 3) {
					m_iTicketMessageFocusX = 1;
				}
			}
			break;
		case LEFT :
			if (m_iTicketMessageFocusY == 3) {
				m_iTicketMessageFocusX = 1;
			}
			break;
		case RIGHT :
			if (m_iTicketMessageFocusY == 3) {
				m_iTicketMessageFocusX = 2;
			}
			break;
		}
		
		resetPPMNotice();
		
		switch(m_iTicketMessageFocusY)
		{
		case 1 :
			ImageView imgNarrowUp = (ImageView)findViewById(R.id.img_message_ticket_narrow_up);
			imgNarrowUp.setImageResource(R.drawable.ticket_popup_narrow_up_on);
			break;
		case 2 :
			ImageView imgNarrowDown = (ImageView)findViewById(R.id.img_message_ticket_narrow_down);
			imgNarrowDown.setImageResource(R.drawable.ticket_popup_narrow_down_on);
			break;
		case 3 :
			if (m_iTicketMessageFocusX == 1) {
				Button btnOK = (Button)findViewById(R.id.btn_message_ticket_day_ok);
				btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
			} else {
				Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_day_cancel);
				btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
			}
			break;
		}
	}
	
	public void displayGOCertify(int keyID) {
		Button btnOK = (Button)findViewById(R.id.btn_message_ticket_go_certify_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_go_certify_cancel);
		
		if (keyID == LEFT) {
			m_iTicketMessageFocusX = 1;
			
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_on);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
		} else if (keyID == RIGHT) {
			m_iTicketMessageFocusX = 2;
			
			btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);
			btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
		}
	}
	
	public void displayShopCertify(int keyID) {
		if (keyID == UP) {
			exitCertify();
			return;
		}
	}
	
	public void displayCertifyHP(int keyID) {
		resetCertifyHP();
		
		EditText editFocused = null;
		EditText editHP01 = (EditText)findViewById(R.id.edit_message_hp_01);
		EditText editHP02 = (EditText)findViewById(R.id.edit_message_hp_02);
		EditText editHP03 = (EditText)findViewById(R.id.edit_message_hp_03);
		Button btnOk = (Button)findViewById(R.id.btn_message_hp_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_hp_cancel);
		
		switch(remote.m_iCertifyHPFocusY)
		{
		case 1 :
			if (remote.m_iCertifyHPFocusX == 1) {
				editFocused = editHP01;
			} else if (remote.m_iCertifyHPFocusX == 2) {
				editFocused = editHP02;
			} else if (remote.m_iCertifyHPFocusX == 3) {
				editFocused = editHP03;
			}
			
			editFocused.setText("");
	
			editFocused.setFocusableInTouchMode(true);
			editFocused.setFocusable(true);
			editFocused.setSelected(true);
			editFocused.requestFocus();
			
			editFocused.setBackgroundResource(R.drawable.pop_input_02_on);
			
			if (m_iVender == SMART_BOX) {
				setIMELocation();
				
				editFocused.setOnEditorActionListener(new OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView arg0, int arg1, KeyEvent arg2) {
						if (arg2.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
							if (remote.m_iCertifyHPFocusX == 1) {
								remote.m_iCertifyHPFocusX = 2;
							} else if (remote.m_iCertifyHPFocusX == 2) {
								remote.m_iCertifyHPFocusX = 3;
							} else if (remote.m_iCertifyHPFocusX == 3) {
								remote.m_iCertifyHPFocusX = 1;
								remote.m_iCertifyHPFocusY = 2;
							}
							
							displayCertifyHP(NONE);
						}
						return false;
					}
				});
			} else {
				InputMethodManager mgr = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
				mgr.showSoftInput(editFocused, InputMethodManager.SHOW_FORCED);
			}
			break;
		case 2 :
			if (remote.m_iCertifyHPFocusX == 1) {
				btnOk.setBackgroundResource(R.drawable.pop_btn_01_on);
			} else if (remote.m_iCertifyHPFocusX == 2) {
				btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
			}
			break;
		}
	}

	public void displayCertify(int keyID) {
		resetCertify();
		
		EditText editCertify = (EditText)findViewById(R.id.edit_message_certify);
		Button btnResend = (Button)findViewById(R.id.btn_message_certify_resend);
		Button btnOk = (Button)findViewById(R.id.btn_message_certify_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_certify_cancel);
		
		switch(remote.m_iCertifyFocusY)
		{
		case 1 :
			if (remote.m_iCertifyFocusX == 1) {
				editCertify.setText("");
	
				editCertify.setFocusableInTouchMode(true);
				editCertify.setFocusable(true);
				editCertify.setSelected(true);
				editCertify.requestFocus();
				
				editCertify.setBackgroundResource(R.drawable.pop_input_02_on);
				
				if (m_iVender == SMART_BOX) {
					setIMELocation();
					
					editCertify.setOnEditorActionListener(new OnEditorActionListener() {
						@Override
						public boolean onEditorAction(TextView arg0, int arg1, KeyEvent arg2) {
							if (arg2.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
								remote.m_iCertifyFocusX = 1;
								remote.m_iCertifyFocusY = 2;
								
								displayCertify(NONE);
							}
							return false;
						}
					});
				} else {
					InputMethodManager mgr = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
					mgr.showSoftInput(editCertify, InputMethodManager.SHOW_FORCED);
				}
			} else {
				btnResend.setBackgroundResource(R.drawable.pop_btn_resend_on);
			}
			break;
		case 2 :
			if (remote.m_iCertifyFocusX == 1) {
				btnOk.setBackgroundResource(R.drawable.pop_btn_01_on);
			} else if (remote.m_iCertifyFocusX == 2) {
				btnCancel.setBackgroundResource(R.drawable.pop_btn_01_on);
			}
			break;
		}
	}

	@SuppressLint("CutPasteId")
	@SuppressWarnings("deprecation")
	public void displayCustomerSubMenu(int keyID) {
		LOG(CLASS, "displayCustomerSubMenu >");
		LOG(CLASS, "keyID=" + keyID);
		
		if (keyID == DOWN) {
			if (m_bDisplayingCustomerDetail) {
				switch(remote.m_iCustomerSubMenuFocus)
				{
				case 1 :
					Button btnEvent = (Button)findViewById(R.id.btn_customer_sub_event);
					btnEvent.setBackgroundResource(R.drawable.tab_focus_off);
					break;
				case 2 :
					Button btnCustomer = (Button)findViewById(R.id.btn_customer_sub_notice);
					btnCustomer.setBackgroundResource(R.drawable.tab_focus_off);
					break;
				case 3 :
					Button btnInfo = (Button)findViewById(R.id.btn_customer_sub_info);
					btnInfo.setBackgroundResource(R.drawable.tab_focus_off);
					break;
				}
				
				remote.m_iState = STATE_CUSTOMER_LIST_DETAIL;
				
				if (remote.m_iCustomerSubMenuFocus == 1) {
					if (m_bIsEventDetail) {
						ImageView imgEventDetailOn = (ImageView)findViewById(R.id.img_customer_detail_content);
						imgEventDetailOn.setImageBitmap(m_bitMapEventOn);
					}
				}
			} else {
				clickCustomerSubMenu();
			}
			return;
		}
		
		if (keyID == UP || keyID == RETURN) {
			exitCustomerSubMenu();
			return;
		}
		
		resetCustomerSubMenu();
		
		Button btnCustomerSubEvent = (Button)findViewById(R.id.btn_customer_sub_event);
		Button btnCustomerSubNotice = (Button)findViewById(R.id.btn_customer_sub_notice);
		Button btnCustomerSubInfo = (Button)findViewById(R.id.btn_customer_sub_info);
		Button btnCustomerSubApp = (Button)findViewById(R.id.btn_customer_sub_app);
		Button btnCustomerSubMic = (Button)findViewById(R.id.btn_customer_sub_mic);
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		
		TextView txtPage = (TextView)findViewById(R.id.txt_customer_sub_page);
		
		switch(remote.m_iCustomerSubMenuFocus)
		{
		case 1 :
			btnCustomerSubEvent.setBackgroundResource(R.drawable.tab_focus_on);
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			txtPage.setVisibility(View.VISIBLE);
			break;
		case 2 :
			btnCustomerSubNotice.setBackgroundResource(R.drawable.tab_focus_on);
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			txtPage.setVisibility(View.VISIBLE);
			break;
		case 3 :
			btnCustomerSubInfo.setBackgroundResource(R.drawable.tab_focus_on);
			SettingListBackground(layoutList, R.drawable.sing_bg);
			
			txtPage.setVisibility(View.VISIBLE);
			break;
		case 4 :
			btnCustomerSubApp.setBackgroundResource(R.drawable.tab_focus_on);
			
			txtPage.setVisibility(View.INVISIBLE);
			break;
		case 5 :
			btnCustomerSubMic.setBackgroundResource(R.drawable.tab_focus_on);
			
			txtPage.setVisibility(View.INVISIBLE);
			break;
		}
		
		if (keyID == NONE) {
			return;
		}
		
		// 컨텐츠 영역에 이전 뷰를 삭제하고 해당 서브메뉴에 맞는 뷰를 보여줌
		switch(remote.m_iCustomerSubMenuFocus)
		{
		case 1 :
			addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
			resetCustomerList();
			break;
		case 2 :
			addViewKaraoke(m_layoutContent, m_layoutCustomerList);
			resetCustomerList();
			break;
		case 3 :
			addViewKaraoke(m_layoutContent, m_layoutCustomerList);
			resetCustomerList();
			break;
		case 4 :
			LinearLayout layoutCustomerApp = (LinearLayout)inf.inflate(R.layout.customer_app, null);
			layoutCustomerApp.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutCustomerApp);
			break;
		case 5 :
			LinearLayout layoutCustomerMic = (LinearLayout)inf.inflate(R.layout.customer_mic, null);
			layoutCustomerMic.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutCustomerMic);
			
			ImageView imgMic = (ImageView)findViewById(R.id.img_mic);
			//imgMic.setImageResource(R.drawable.help_buy_mike_stb);
			imgMic.setImageBitmap(util_MIC.m_bitMap);
			break;
		}
		
		if (keyID == LEFT || keyID == RIGHT) {
			m_iEnterCustomerMenu = KEY;
		}
		
		if (m_iEnterCustomerMenu != KEY) {
			initCustomerListIndex();
			return;
		}
		
		// LEFT, RIGHT로 서브메뉴간 이동할 때
		if (keyID != NONE && keyID != RETURN) {
			//remote.m_iCustomerListFocus = 0;
			initCustomerListIndex();
			
			if (remote.m_iCustomerSubMenuFocus == 1) {
				KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
			} else if (remote.m_iCustomerSubMenuFocus == 2) {
				KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
			} else if (remote.m_iCustomerSubMenuFocus == 3) {
				KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_USEINFO);
			}
		}
		
		LOG(CLASS, "displayCustomerSubMenu <");
	}
	
	public void displayCustomerList(int keyID) {
		LOG(CLASS, "displayCustomerList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewCustomerListPage + "/toPage=" + m_iTotalCustomerListPage);
		
		if (m_bDisplayingCustomerDetail) {
			if (remote.m_iCustomerSubMenuFocus != 1) {
				addViewKaraoke(m_layoutContent, m_layoutCustomerList);
				remote.m_iState = STATE_CUSTOMER_LIST;
			} else {
				addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
				remote.m_iState = STATE_CUSTOMER_LIST_EVENT;
			}
		}
		
		if (keyID == UP) {
			if (remote.m_iCustomerListFocus == 0) {
				exitCustomerList();
				return;
			}
		}
		
		if (m_iTotalCustomerListPage > 1) {
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
			SettingListBackground(layoutList, R.drawable.sing_bg_narrow);
		}

		if (keyID == RIGHT) {
			if (m_iCurrentViewCustomerListPage < m_iTotalCustomerListPage) {
				LOG(CLASS, "next");
				remote.m_iCustomerListFocus = 1;
				
				m_iCurrentCustomerListPage++;
				m_iCurrentViewCustomerListPage++;
				
				//1, 21, 31... 페이지면 새로 요청
				if (m_iCurrentViewCustomerListPage%10 == 1) {
					m_iRequestPage++;
					m_iCurrentCustomerListPage = 1;
					
					switch(remote.m_iCustomerSubMenuFocus)
					{
					case 1 :
						KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
						break;
					case 2 :
						KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
						break;
					case 3 :
						KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_USEINFO);
						break;
					}
				} else {
					moveCustomerListPage();
				}
			} else {
				// 마지막 페이지에서 RIGHT키 입력 시 1페이지로 이동
				if (m_iTotalCustomerListPage > 1) {
					remote.m_iCustomerListFocus = 1;
					
					m_iCurrentViewCustomerListPage = 1;
					m_iCurrentCustomerListPage = 1;
					int temp = m_iRequestPage;
					m_iRequestPage = 1;
					// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
					if (temp != m_iRequestPage) {
						switch(remote.m_iCustomerSubMenuFocus)
						{
						case 1 :
							KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
							break;
						case 2 :
							KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
							break;
						case 3 :
							KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_USEINFO);
							break;
						}
					}
					
					moveCustomerListPage();
				}
			}
		} else if (keyID == LEFT) {
			if (m_iCurrentViewCustomerListPage > 1) {
				LOG(CLASS, "prev");
				remote.m_iCustomerListFocus = 1;
				
				m_iCurrentCustomerListPage--;
				m_iCurrentViewCustomerListPage--;
				
				//10, 20, 30... 페이지면 새로 요청
				if (m_iCurrentViewCustomerListPage%10 == 0) {
					m_iRequestPage--;
					m_iCurrentCustomerListPage = 10;
					
					switch(remote.m_iCustomerSubMenuFocus)
					{
					case 1 :
						KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
						break;
					case 2 :
						KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
						break;
					case 3 :
						KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_USEINFO);
						break;
					}
				} else {
					moveCustomerListPage();
				}
			} else {
				// 1페이지에서 LEFT키 입력 시 마지막 페이지로 이동
				if (m_iTotalCustomerListPage > 1) {
					remote.m_iCustomerListFocus = 1;
					
					m_iCurrentViewCustomerListPage = m_iTotalCustomerListPage;
					m_iCurrentCustomerListPage = m_iTotalCustomerListPage % 10;
					if (m_iCurrentCustomerListPage == 0) {
						m_iCurrentCustomerListPage = 10;
					} else {
						int temp = m_iRequestPage;
						m_iRequestPage = (m_iTotalCustomerListPage / 10) + 1;
						// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
						if (temp != m_iRequestPage) {
							switch(remote.m_iCustomerSubMenuFocus)
							{
							case 1 :
								KP(REQUEST_EVENT_LIST, KP_0010, MENU_HELP, HELP_EVENT);
								break;
							case 2 :
								KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_NOTICE);
								break;
							case 3 :
								KP(REQUEST_CUSTOMER_LIST, KP_0010, MENU_HELP, HELP_USEINFO);
								break;
							}
						}
					}
					
					moveCustomerListPage();
				}
			}
		}
		
		resetCustomerList();
		
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_customer_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_customer_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_customer_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_customer_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_customer_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_customer_list_list_6);
		
		switch(remote.m_iCustomerListFocus)
		{
		case 1 :
			layoutList1.setBackgroundResource(R.drawable.list_focus_on);
			break;
		case 2 :
			layoutList2.setBackgroundResource(R.drawable.list_focus_on);
			break;
		case 3 :
			layoutList3.setBackgroundResource(R.drawable.list_focus_on);
			break;
		case 4 :
			layoutList4.setBackgroundResource(R.drawable.list_focus_on);
			break;
		case 5 :
			layoutList5.setBackgroundResource(R.drawable.list_focus_on);
			break;
		case 6 :
			layoutList6.setBackgroundResource(R.drawable.list_focus_on);
			break;
		}
	}
	
	public void displayCustomerDetail(int keyID) {
		if (m_iCustomerListDetailPage == 1) {
			if (keyID == UP) {
				switch(remote.m_iCustomerSubMenuFocus)
				{
				case 1 :
					if (m_bIsEventDetail) {
						ImageView imgEventDetailOff = (ImageView)findViewById(R.id.img_customer_detail_content);
						imgEventDetailOff.setImageBitmap(m_bitMapEventOff);
					}
					break;
				case 2 :
					break;
				case 3 :
					break;
				}
				
				displayCustomerSubMenu(NONE);
				initCustomerListIndex();
				remote.m_iState = STATE_CUSTOMER_SUB_MENU;
				
				m_bDisplayingCustomerDetail = true;
				return;
			}
		}
		
		if (m_iCustomerListDetailTotalPage > 1) {
			TextView txtPage = (TextView)findViewById(R.id.txt_customer_detail_page);
			
			if (keyID == UP) {
				if (m_iCurrentCustomerListDetailPage > 1) {
					m_iCurrentCustomerListDetailPage--;
					m_iCustomerListDetailPage--;
					txtPage.setText(String.valueOf(m_iCurrentCustomerListDetailPage) + "/" + String.valueOf(m_iCustomerListDetailTotalPage));
					
					util = new Util(karaokeHandler);
					util.setUtilType(UTIL_CUSTOMER_DETAIL_IMAGE);
					util.setImageUrl(arrayCustomerDetailUrl.get(m_iCustomerListDetailPage - 1));
					LOG(CLASS, "Detail URL is " + arrayCustomerDetailUrl.get(m_iCustomerListDetailPage - 1));
					util.start();
				}
			} else if (keyID == DOWN) {
				if (m_iCurrentCustomerListDetailPage < m_iCustomerListDetailTotalPage) {
					m_iCurrentCustomerListDetailPage++;
					m_iCustomerListDetailPage++;
					txtPage.setText(String.valueOf(m_iCurrentCustomerListDetailPage) + "/" + String.valueOf(m_iCustomerListDetailTotalPage));
					
					util = new Util(karaokeHandler);
					util.setUtilType(UTIL_CUSTOMER_DETAIL_IMAGE);
					util.setImageUrl(arrayCustomerDetailUrl.get(m_iCustomerListDetailPage - 1));
					LOG(CLASS, "Detail URL is " + arrayCustomerDetailUrl.get(m_iCustomerListDetailPage - 1));
					util.start();
				}
			}
		}
	}

	@SuppressWarnings("deprecation")
	public void displaySearchSubMenu(int keyID) {
		if (keyID == UP) {
			exitSearchSubMenu();
			return;
		}
		
		if (keyID == DOWN) {
			clickSearchSubMenu();
			return;
		}
		
		resetSearchSubMenu();
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.search_bg_none);
		
		switch(remote.m_iSearchSubMenuFocus)
		{
		case 1 :
			Button btnSearchSubSelf = (Button)findViewById(R.id.btn_search_sub_self);
			btnSearchSubSelf.setBackgroundResource(R.drawable.tab_focus_on);
			
			// 직접 컨텐츠로 전환
			LinearLayout layoutSearchSelf = null;
			if (m_iVender == SMART_BOX) {
				layoutSearchSelf = (LinearLayout)inf.inflate(R.layout.search_list_self_box, null);
			} else {
				layoutSearchSelf = (LinearLayout)inf.inflate(R.layout.search_list_self, null);
			}
			
			layoutSearchSelf.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutSearchSelf);
			break;
		case 2 :
			Button btnSearchSubLetter = (Button)findViewById(R.id.btn_search_sub_letter);
			btnSearchSubLetter.setBackgroundResource(R.drawable.tab_focus_on);
			
			// 색인 컨텐츠로 전환
			LinearLayout layoutSearchLetter = (LinearLayout)inf.inflate(R.layout.search_list_letter, null);
			layoutSearchLetter.setLayoutParams(lp);
			addViewKaraoke(m_layoutContent, layoutSearchLetter);
			break;
		}
	}
	
	public void displaySearchSelf(int keyID) {
		EditText editWord = (EditText)findViewById(R.id.edit_search_self_word);
		
		if (!m_bIsFocusedOnBook) {
			if (keyID == UP) {
				if (m_iVender == SMART_BOX) {
					editWord.setBackgroundResource(R.drawable.search_input_off);
					
					editWord.clearFocus();
					editWord.setSelected(false);
					editWord.setFocusable(false);
					editWord.setFocusableInTouchMode(false);
				}
				
				exitSearchSelf();
				return;
			}
		} else {
			m_bIsFocusedOnBook = false;
		}
		
		LinearLayout layoutTip = (LinearLayout)findViewById(R.id.layout_search_self_list_tip);
		layoutTip.setVisibility(View.VISIBLE);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_search_self_list_list);
		layoutList.setVisibility(View.GONE);
		
		TextView txtPage = (TextView)findViewById(R.id.txt_search_self_page);
		txtPage.setVisibility(View.INVISIBLE);
		
		Button btnType = (Button)findViewById(R.id.btn_search_self_type);
		Button btnOk = (Button)findViewById(R.id.btn_search_self_ok);
		
		Button btnBook = (Button)findViewById(R.id.btn_purchase_book_search_self);
		btnBook.setBackgroundResource(R.drawable.tab_focus_long_off);
		
		if (keyID == DOWN && !m_bIsFocusedOnBook) {
			btnType.setBackgroundResource(R.drawable.search_btn_off);
			editWord.setBackgroundResource(R.drawable.search_input_off);
			
			if (m_iVender != SMART_BOX) {
				btnOk.setBackgroundResource(R.drawable.search_ok_btn_off);
			}
			
			btnBook.setBackgroundResource(R.drawable.tab_focus_long_on);
			
			editWord.clearFocus();
			editWord.setSelected(false);
			editWord.setFocusable(false);
			editWord.setFocusableInTouchMode(false);
			
			m_bIsFocusedOnBook = true;
			return;
		}
		
		switch(remote.m_iSearchSelfFocus)
		{
		case 1 :
			btnType.setBackgroundResource(R.drawable.search_btn_on);
			editWord.setBackgroundResource(R.drawable.search_input_off);
			
			editWord.clearFocus();
			editWord.setSelected(false);
			editWord.setFocusable(false);
			editWord.setFocusableInTouchMode(false);
			break;
		case 2 :
			btnType.setBackgroundResource(R.drawable.search_btn_off);
			editWord.setBackgroundResource(R.drawable.search_input_on);
			
			if (m_iVender == SMART_STB ||m_iVender == SMART_UHD) {
				btnOk.setBackgroundResource(R.drawable.search_ok_btn_off);
			}
			
			editWord.setText("");
			
			editWord.setFocusableInTouchMode(true);
			editWord.setFocusable(true);
			editWord.setSelected(true);
			editWord.requestFocus();
			
			if (m_iVender == SMART_BOX) {
				setIMELocation();
				
				editWord.setOnEditorActionListener(new OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView arg0, int arg1, KeyEvent arg2) {
						if (arg2.getKeyCode() == KeyEvent.KEYCODE_ENTER) {
							clickSearchSelf();
						}
						return false;
					}
				});
			} else {
				InputMethodManager mgr = (InputMethodManager)getSystemService(Context.INPUT_METHOD_SERVICE);
				mgr.showSoftInput(editWord, InputMethodManager.SHOW_FORCED);
				
				/*
				editWord.setOnEditorActionListener(new OnEditorActionListener() {
					@Override
					public boolean onEditorAction(TextView v, int actionId, KeyEvent event) {
						if ((actionId == EditorInfo.IME_ACTION_DONE) ||
								(event != null && event.getKeyCode() == KeyEvent.KEYCODE_ENTER) ||
								(event != null && event.getKeyCode() == KeyEvent.KEYCODE_DPAD_CENTER)) {
						}
						return false;
					}
				});
				*/
			}
			break;
		case 3 :
			editWord.clearFocus();
			editWord.setSelected(false);
			editWord.setFocusable(false);
			editWord.setFocusableInTouchMode(false);
			
			editWord.setBackgroundResource(R.drawable.search_input_off);
			btnOk.setBackgroundResource(R.drawable.search_ok_btn_on);
			break;
		}
	}

	public void displaySearchLetter(int keyID) {
		LOG(CLASS, "displaySearchLetter >");
		LOG(CLASS, "keyID=" + keyID + "/m_iSearchLetterFocusX=" + remote.m_iSearchLetterFocusX + "/m_iSearchLetterFocusY=" + remote.m_iSearchLetterFocusY);
		
		if (remote.m_iSearchLetterFocusY != 3) {
			if (keyID == UP) {
				if (remote.m_iSearchLetterFocusY == 0) {
					exitSearchLetter();
					return;
				}
			}
		}
		
		if (keyID != INIT) {
			LinearLayout layoutTip = (LinearLayout)findViewById(R.id.layout_search_letter_list_tip);
			layoutTip.setVisibility(View.VISIBLE);
			
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_search_letter_list_list);
			layoutList.setVisibility(View.GONE);
			
			TextView txtPage = null;
			if (m_iSearchLetterMode == KOR) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_kor_page);
			} else if (m_iSearchLetterMode == ENG) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_eng_page);
			} else if (m_iSearchLetterMode == NUM) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_num_page);
			}
			txtPage.setVisibility(View.INVISIBLE);
		}
		
		resetSearchLetter();
		
		Button btnBook = (Button)findViewById(R.id.btn_purchase_book_search_letter);
		btnBook.setBackgroundResource(R.drawable.tab_focus_long_off);
		
		if (remote.m_iSearchLetterFocusY == 3) {
			btnBook.setBackgroundResource(R.drawable.tab_focus_long_on);
			return;
		}
		
		if (m_iSearchLetterMode == KOR) {
			Button btnKorMode = null;
			Button btnKor0000 = null;
		
			switch(remote.m_iSearchLetterFocusY)
			{
			case 1 :
				switch(remote.m_iSearchLetterFocusX)
				{
				case 0 :
					btnKorMode = (Button)findViewById(R.id.btn_search_letter_type_kor);
					break;
				case 1 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_01);
					break;
				case 2 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_02);
					break;
				case 3 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_03);
					break;
				case 4 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_04);
					break;
				case 5 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_05);
					break;
				case 6 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_06);
					break;
				case 7 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_07);
					break;
				case 8 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_08);
					break;
				case 9 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_09);
					break;
				case 10 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_10);
					break;
				case 11 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_11);
					break;
				case 12 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_12);
					break;
				case 13 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_13);
					break;
				case 14 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_01_14);
					break;
				}
				break;
			case 2 :
				switch(remote.m_iSearchLetterFocusX)
				{
				case 1 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_02_01);
					break;
				case 2 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_02_02);
					break;
				case 3 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_02_03);
					break;
				case 4 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_02_04);
					break;
				case 5 :
					btnKor0000 = (Button)findViewById(R.id.btn_search_letter_kor_02_05);
					break;
				}
				break;
			}
			
			if (btnKorMode != null) {
				btnKorMode.setBackgroundResource(R.drawable.search_btn_on);
			}
			
			if (btnKor0000 != null) {
				if (m_iSearchLetterDisplay == SELECTED) {
					btnKor0000.setBackgroundResource(R.drawable.help_btn_word_selected);
				} else {
					btnKor0000.setBackgroundResource(R.drawable.help_btn_word_on);
				}
			}
		} else if (m_iSearchLetterMode == ENG) {
			Button btnEngMode = null;
			Button btnEng0000 = null;
		
			switch(remote.m_iSearchLetterFocusY)
			{
			case 1 :
				switch(remote.m_iSearchLetterFocusX)
				{
				case 0 :
					btnEngMode = (Button)findViewById(R.id.btn_search_letter_type_eng);
					break;
				case 1 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_01);
					break;
				case 2 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_02);
					break;
				case 3 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_03);
					break;
				case 4 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_04);
					break;
				case 5 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_05);
					break;
				case 6 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_06);
					break;
				case 7 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_07);
					break;
				case 8 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_08);
					break;
				case 9 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_09);
					break;
				case 10 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_10);
					break;
				case 11 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_11);
					break;
				case 12 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_12);
					break;
				case 13 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_13);
					break;
				case 14 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_01_14);
					break;
				}
				break;
			case 2 :
				switch(remote.m_iSearchLetterFocusX)
				{
				case 1 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_01);
					break;
				case 2 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_02);
					break;
				case 3 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_03);
					break;
				case 4 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_04);
					break;
				case 5 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_05);
					break;
				case 6 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_06);
					break;
				case 7 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_07);
					break;
				case 8 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_08);
					break;
				case 9 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_09);
					break;
				case 10 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_10);
					break;
				case 11 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_11);
					break;
				case 12 :
					btnEng0000 = (Button)findViewById(R.id.btn_search_letter_eng_02_12);
					break;
				}
				break;
			}
			
			if (btnEngMode != null) {
				btnEngMode.setBackgroundResource(R.drawable.search_btn_on);
			}
			
			if (btnEng0000 != null) {
				if (m_iSearchLetterDisplay == SELECTED) {
					btnEng0000.setBackgroundResource(R.drawable.help_btn_word_selected);
				} else {
					btnEng0000.setBackgroundResource(R.drawable.help_btn_word_on);
				}
			}
		} else if (m_iSearchLetterMode == NUM) {
			Button btnNumMode = null;
			Button btnNum0000 = null;
		
			switch(remote.m_iSearchLetterFocusX)
			{
			case 0 :
				btnNumMode = (Button)findViewById(R.id.btn_search_letter_type_num);
				break;
			case 1 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_01);
				break;
			case 2 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_02);
				break;
			case 3 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_03);
				break;
			case 4 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_04);
				break;
			case 5 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_05);
				break;
			case 6 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_06);
				break;
			case 7 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_07);
				break;
			case 8 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_08);
				break;
			case 9 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_09);
				break;
			case 10 :
				btnNum0000 = (Button)findViewById(R.id.btn_search_letter_num_01_10);
				break;
			}
			
			if (btnNumMode != null) {
				btnNumMode.setBackgroundResource(R.drawable.search_btn_on);
			}
			
			if (btnNum0000 != null) {
				if (m_iSearchLetterDisplay == SELECTED) {
					btnNum0000.setBackgroundResource(R.drawable.help_btn_word_selected);
				} else {
					btnNum0000.setBackgroundResource(R.drawable.help_btn_word_on);
				}
			}
		}
		
		LOG(CLASS, "displaySearchLetter <");
	}
	
	public void displaySearchList(int keyID) {
		LOG(CLASS, "displaySearchList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewSearchListPage + "/toPage=" + m_iTotalSearchListPage);
		
		if (keyID == UP) {
			// 리스트에서 상위로 올라옴
			if (remote.m_iSearchListFocus == 0) {
				exitSearchList();
				return;
			}
		}
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		if (m_iTotalSearchListPage > 1) {
			if (remote.m_iSearchSubMenuFocus == 1) {
				SettingListBackground(layoutList, R.drawable.search_bg_self_narrow);
			} else {
				SettingListBackground(layoutList, R.drawable.search_bg_letter_narrow);
			}
		} else {
			if (remote.m_iSearchSubMenuFocus == 1) {
				SettingListBackground(layoutList, R.drawable.search_bg_self_list);
			} else {
				SettingListBackground(layoutList, R.drawable.search_bg_letter_list);
			}
		}
	
		if (keyID == RIGHT) {
			if (m_iCurrentViewSearchListPage < m_iTotalSearchListPage) {
				LOG(CLASS, "next");
				
				remote.m_iSearchListFocus = 1;
				m_iCurrentSearchListPage++;
				m_iCurrentViewSearchListPage++;
				
				//1, 21, 31... 페이지면 새로 요청
				if (m_iCurrentViewSearchListPage%10 == 1) {
					m_iRequestSearchListPage++;
					m_iCurrentSearchListPage = 1;
					
					switch(remote.m_iSearchSubMenuFocus)
					{
					case 1 :
						if (m_iSearchSelfMode == TITLE) {
							KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
						} else {
							KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
						}
						break;
					case 2 :
						KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_4);
						break;
					}
				} else {
					moveSearchListPage();
				}
			} else {
				// 마지막 페이지에서 RIGHT키 = 첫번째 페이지로 이동
				if (m_iTotalSearchListPage > 1) {
					remote.m_iSearchListFocus = 1;
					
					m_iCurrentViewSearchListPage = 1;
					m_iCurrentSearchListPage = 1;
					int temp = m_iRequestSearchListPage;
					m_iRequestSearchListPage = 1;
					
					if (temp != m_iRequestSearchListPage) {
						// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
						switch(remote.m_iSearchSubMenuFocus)
						{
						case 1 :
							if (m_iSearchSelfMode == TITLE) {
								KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
							} else {
								KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
							}
							break;
						case 2 :
							KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_4);
							break;
						}
					}
					
					moveSearchListPage();
				}
			}
		} else if (keyID == LEFT) {
			if (m_iCurrentViewSearchListPage > 1) {
				LOG(CLASS, "prev");
				
				remote.m_iSearchListFocus = 1;
				m_iCurrentSearchListPage--;
				m_iCurrentViewSearchListPage--;
				
				//10, 20, 30... 페이지면 새로 요청
				if (m_iCurrentViewSearchListPage%10 == 0) {
					m_iRequestSearchListPage--;
					m_iCurrentSearchListPage = 10;
					
					switch(remote.m_iSearchSubMenuFocus)
					{
					case 1 :
						if (m_iSearchSelfMode == TITLE) {
							KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
						} else {
							KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
						}
						break;
					case 2 :
						KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_4);
						break;
					}
				} else {
					moveSearchListPage();
				}
			} else {
				// 1페이지에서 LEFT키 = 마지막 페이지로 이동
				if (m_iTotalSearchListPage > 1) {
					remote.m_iSearchListFocus = 1;
					
					m_iCurrentViewSearchListPage = m_iTotalSearchListPage;
					m_iCurrentSearchListPage = m_iTotalSearchListPage % 10;
					if (m_iCurrentSearchListPage == 0) {
						m_iCurrentSearchListPage = 10;
					} else {
						int temp = m_iRequestSearchListPage;
						m_iRequestSearchListPage = (m_iTotalSearchListPage / 10) + 1;
						
						if (temp != m_iRequestSearchListPage) {
							// 이전 Request했던 페이지와 다른 데이터(새로받음)이면 KP 새로 요청
							switch(remote.m_iSearchSubMenuFocus)
							{
							case 1 :
								if (m_iSearchSelfMode == TITLE) {
									KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_1);
								} else {
									KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_2);
								}
								break;
							case 2 :
								KP(REQUEST_SEARCH_LIST, KP_0020, MENU_SEARCH, SEARCH_4);
								break;
							}
						}
					}
					
					moveSearchListPage();
				}
			}
		}
	
		resetSearchList();
		
		LinearLayout layoutList1 = null;
		LinearLayout layoutList2 = null;
		LinearLayout layoutList3 = null;
		LinearLayout layoutList4 = null;
		LinearLayout layoutList5 = null;
		
		TextView txtNumber1 = null;
		TextView txtNumber2 = null;
		TextView txtNumber3 = null;
		TextView txtNumber4 = null;
		TextView txtNumber5 = null;
		
		ImageView imgIcon1 = null;
		ImageView imgIcon2 = null;
		ImageView imgIcon3 = null;
		ImageView imgIcon4 = null;
		ImageView imgIcon5 = null;
		
		// 직접검색
		if (remote.m_iSearchSubMenuFocus == 1) {
			layoutList1 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_1);
			layoutList2 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_2);
			layoutList3 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_3);
			layoutList4 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_4);
			layoutList5 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_5);
			
			txtNumber1 = (TextView)findViewById(R.id.txt_search_self_number_1);
			txtNumber2 = (TextView)findViewById(R.id.txt_search_self_number_2);
			txtNumber3 = (TextView)findViewById(R.id.txt_search_self_number_3);
			txtNumber4 = (TextView)findViewById(R.id.txt_search_self_number_4);
			txtNumber5 = (TextView)findViewById(R.id.txt_search_self_number_5);
			
			imgIcon1 = (ImageView)findViewById(R.id.img_search_self_icon_1);
			imgIcon2 = (ImageView)findViewById(R.id.img_search_self_icon_2);
			imgIcon3 = (ImageView)findViewById(R.id.img_search_self_icon_3);
			imgIcon4 = (ImageView)findViewById(R.id.img_search_self_icon_4);
			imgIcon5 = (ImageView)findViewById(R.id.img_search_self_icon_5);
		// 색인검색
		} else {
			layoutList1 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_1);
			layoutList2 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_2);
			layoutList3 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_3);
			layoutList4 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_4);
			
			txtNumber1 = (TextView)findViewById(R.id.txt_search_letter_number_1);
			txtNumber2 = (TextView)findViewById(R.id.txt_search_letter_number_2);
			txtNumber3 = (TextView)findViewById(R.id.txt_search_letter_number_3);
			txtNumber4 = (TextView)findViewById(R.id.txt_search_letter_number_4);
			
			imgIcon1 = (ImageView)findViewById(R.id.img_search_letter_icon_1);
			imgIcon2 = (ImageView)findViewById(R.id.img_search_letter_icon_2);
			imgIcon3 = (ImageView)findViewById(R.id.img_search_letter_icon_3);
			imgIcon4 = (ImageView)findViewById(R.id.img_search_letter_icon_4);
		}
		
		String strColorOn = "#FFFFFF";
		
		switch(remote.m_iSearchListFocus)
		{
		case 1 :
			layoutList1.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber1.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSearchListFocus)) {
				imgIcon1.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon1.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 2 :
			layoutList2.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber2.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSearchListFocus)) {
				imgIcon2.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon2.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 3 :
			layoutList3.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber3.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSearchListFocus)) {
				imgIcon3.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon3.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 4 :
			layoutList4.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber4.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSearchListFocus)) {
				imgIcon4.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon4.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		case 5 :
			layoutList5.setBackgroundResource(R.drawable.list_focus_on);
			txtNumber5.setTextColor(Color.parseColor(strColorOn));
			if (isFavor(remote.m_iSearchListFocus)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_on);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_note_on);
			}
			break;
		}
	}

	public void displayEngageSong() {
		TextView textEngageCount = null;
		TextView textEngageList = null;
		
		if (m_iPaneState == HOME) {
			textEngageCount = (TextView)findViewById(R.id.txt_top_engage_main);
			textEngageList = (TextView)findViewById(R.id.txt_top_engage_list_main);
		} else {
			textEngageCount = (TextView)findViewById(R.id.txt_top_engage);
			textEngageList = (TextView)findViewById(R.id.txt_top_engage_list);
		}
		
		int iSize = arrPlayList.size();
		
		if (iSize == 0) {
			textEngageCount.setText(getString(R.string.menu_top_engage));
			textEngageList.setText("");
			return;
		}
		
		String strCount = "";
		
		if (iSize < 10) {
			strCount = "0";
		}
		
		strCount = strCount + Integer.toString(iSize);
		
		textEngageCount.setText("예약곡 " + strCount);
		
		String strEngageList = arrPlayList.get(0);
		int iMakeCount = 1;
		while(iMakeCount < arrPlayList.size()) {
			strEngageList = strEngageList + "  " + arrPlayList.get(iMakeCount);
			
			iMakeCount++;
			
			if (iMakeCount == 5) {
				break;
			}
		}
		
		textEngageList.setText(strEngageList);
	}
	
	public void displayMyRecordList(int keyID) {
		LOG(CLASS, "displayMyRecordList >");
		LOG(CLASS, "keyID=" + keyID + "/curPage=" + m_iCurrentViewListenListPage + "/toPage=" + m_iTotalListenListPage);
		
		if (keyID == UP) {
			if (remote.m_iSongListFocus == 0 || m_bIsMyRecordReCertifyBtnFocused) {
				m_bIsMyRecordReCertifyBtnFocused = false;
				exitMyRecordList();
				return;
			}
		}
		
		if (m_iCurrentViewListenListPage == 1 && keyID == LEFT) {
			m_bIsMyRecordReCertifyBtnFocused = true;
			
			Button btnReCertify = (Button)findViewById(R.id.btn_already_certify_re);
			btnReCertify.setBackgroundResource(R.drawable.my_record_btn_on);
			
			resetMyRecordList();
			return;
		}
		
		if (m_bIsMyRecordReCertifyBtnFocused && keyID == RIGHT) {
			m_bIsMyRecordReCertifyBtnFocused = false;
			
			Button btnReCertify = (Button)findViewById(R.id.btn_already_certify_re);
			btnReCertify.setBackgroundResource(R.drawable.my_record_btn_off);
			
			remote.m_iSongListFocus = 1;
			keyID = NONE;
		}
		
		if ( m_iTotalListenListPage > 1) {
			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
			SettingListBackground(layoutList, R.drawable.sing_bg_narrow);
		}
		
		if (keyID == RIGHT) {
			if (m_iCurrentViewListenListPage < m_iTotalListenListPage) {
				LOG(CLASS, "next");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentListenListPage++;
				m_iCurrentViewListenListPage++;
				
				// 1, 21, 31... 페이지면 새로 요청
				if (m_iCurrentViewListenListPage % 10 == 1) {
					m_iRequestPage++;
					m_iCurrentListenListPage = 1;
					
					KP(REQUEST_MY_RECORD_LIST, KP_3001, MENU_MYLIST, MYLIST_RECORD);
				} else {
					moveMyRecordListPage();
					displayMyRecordList(NONE);
				}
			}
		} else if (keyID == LEFT) {
			if (m_iCurrentViewListenListPage > 1) {
				LOG(CLASS, "prev");
				remote.m_iSongListFocus = 1;
				
				m_iCurrentListenListPage--;
				m_iCurrentViewListenListPage--;
				
				//10, 20, 30... 페이지면 새로 요청
				if (m_iCurrentViewListenListPage % 10 == 0) {
					m_iRequestPage--;
					m_iCurrentListenListPage = 10;
					
					KP(REQUEST_MY_RECORD_LIST, KP_3001, MENU_MYLIST, MYLIST_RECORD);
				} else {
					moveMyRecordListPage();
				}
			}
		}
		
		resetMyRecordList();
		
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_my_record_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_my_record_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_my_record_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_my_record_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_my_record_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_my_record_list_6);
		
		String strColorOn = "#FFFFFF";
		
		TextView txtRecommand1 = (TextView)findViewById(R.id.txt_my_record_recommand_count_1);
		TextView txtRecommand2 = (TextView)findViewById(R.id.txt_my_record_recommand_count_2);
		TextView txtRecommand3 = (TextView)findViewById(R.id.txt_my_record_recommand_count_3);
		TextView txtRecommand4 = (TextView)findViewById(R.id.txt_my_record_recommand_count_4);
		TextView txtRecommand5 = (TextView)findViewById(R.id.txt_my_record_recommand_count_5);
		TextView txtRecommand6 = (TextView)findViewById(R.id.txt_my_record_recommand_count_6);
		
		TextView txtTitle1 = (TextView)findViewById(R.id.txt_my_record_title_1);
		TextView txtTitle2 = (TextView)findViewById(R.id.txt_my_record_title_2);
		TextView txtTitle3 = (TextView)findViewById(R.id.txt_my_record_title_3);
		TextView txtTitle4 = (TextView)findViewById(R.id.txt_my_record_title_4);
		TextView txtTitle5 = (TextView)findViewById(R.id.txt_my_record_title_5);
		TextView txtTitle6 = (TextView)findViewById(R.id.txt_my_record_title_6);
		
		TextView txtDate1 = (TextView)findViewById(R.id.txt_my_record_date_1);
		TextView txtDate2 = (TextView)findViewById(R.id.txt_my_record_date_2);
		TextView txtDate3 = (TextView)findViewById(R.id.txt_my_record_date_3);
		TextView txtDate4 = (TextView)findViewById(R.id.txt_my_record_date_4);
		TextView txtDate5 = (TextView)findViewById(R.id.txt_my_record_date_5);
		TextView txtDate6 = (TextView)findViewById(R.id.txt_my_record_date_6);
		
		switch(remote.m_iSongListFocus)
		{
		case 1 :
			layoutList1.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand1.setTextColor(Color.parseColor(strColorOn));
			txtTitle1.setTextColor(Color.parseColor(strColorOn));
			txtDate1.setTextColor(Color.parseColor(strColorOn));
			break;
		case 2 :
			layoutList2.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand2.setTextColor(Color.parseColor(strColorOn));
			txtTitle2.setTextColor(Color.parseColor(strColorOn));
			txtDate2.setTextColor(Color.parseColor(strColorOn));
			break;
		case 3 :
			layoutList3.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand3.setTextColor(Color.parseColor(strColorOn));
			txtTitle3.setTextColor(Color.parseColor(strColorOn));
			txtDate3.setTextColor(Color.parseColor(strColorOn));
			break;
		case 4 :
			layoutList4.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand4.setTextColor(Color.parseColor(strColorOn));
			txtTitle4.setTextColor(Color.parseColor(strColorOn));
			txtDate4.setTextColor(Color.parseColor(strColorOn));
			break;
		case 5 :
			layoutList5.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand5.setTextColor(Color.parseColor(strColorOn));
			txtTitle5.setTextColor(Color.parseColor(strColorOn));
			txtDate5.setTextColor(Color.parseColor(strColorOn));
			break;
		case 6 :
			layoutList6.setBackgroundResource(R.drawable.my_record_list_focus_on);
			txtRecommand6.setTextColor(Color.parseColor(strColorOn));
			txtTitle6.setTextColor(Color.parseColor(strColorOn));
			txtDate6.setTextColor(Color.parseColor(strColorOn));
			break;
		}
	}
	
	public void displayMyRecordNone(int keyID) {
		if (keyID == UP) {
			exitMyRecordNone();
		}
		
		if (keyID == LEFT) {
			m_bIsMyRecordReCertifyBtnFocused = true;
			
			Button btnRe = (Button)findViewById(R.id.btn_already_certify_re);
			btnRe.setBackgroundResource(R.drawable.my_record_btn_on);
			
			Button btnHelp = (Button)findViewById(R.id.btn_already_certify_help);
			btnHelp.setBackgroundResource(R.drawable.my_record_btn_off);
		} else if (keyID == RIGHT) {
			m_bIsMyRecordReCertifyBtnFocused = false;
			
			Button btnRe = (Button)findViewById(R.id.btn_already_certify_re);
			btnRe.setBackgroundResource(R.drawable.my_record_btn_off);
			
			Button btnHelp = (Button)findViewById(R.id.btn_already_certify_help);
			btnHelp.setBackgroundResource(R.drawable.my_record_btn_on);
		}
	}

	public void resetSubMainMenu() {
		Button btnSubMainSing = (Button)findViewById(R.id.btn_sub_main_sing);
		Button btnSubMainListen = (Button)findViewById(R.id.btn_sub_main_listen);
		Button btnSubMainMy = (Button)findViewById(R.id.btn_sub_main_my);
		Button btnSubMainShop = (Button)findViewById(R.id.btn_sub_main_shop);
		Button btnSubMainCustomer = (Button)findViewById(R.id.btn_sub_main_customer);
		
		btnSubMainSing.setBackgroundResource(R.drawable.sub_icon_01_off);
		btnSubMainListen.setBackgroundResource(R.drawable.sub_icon_02_off);
		btnSubMainMy.setBackgroundResource(R.drawable.sub_icon_03_off);
		btnSubMainShop.setBackgroundResource(R.drawable.sub_icon_04_off);
		btnSubMainCustomer.setBackgroundResource(R.drawable.sub_icon_05_off);
		
		LinearLayout.LayoutParams lpOff = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOff.setMargins(0, PixelFromDP(12), 0, PixelFromDP(12));
		lpOff.weight = 3;
		
		btnSubMainSing.setLayoutParams(lpOff);
		btnSubMainListen.setLayoutParams(lpOff);
		btnSubMainMy.setLayoutParams(lpOff);
		btnSubMainShop.setLayoutParams(lpOff);
		btnSubMainCustomer.setLayoutParams(lpOff);
	}

	
	public void resetSingSubMenu() {
		Button btnHot = (Button)findViewById(R.id.btn_sing_sub_hot);
		Button btnNew = (Button)findViewById(R.id.btn_sing_sub_new);
		Button btnGenre = (Button)findViewById(R.id.btn_sing_sub_genre);
		
		btnHot.setBackgroundColor(Color.TRANSPARENT);
		btnNew.setBackgroundColor(Color.TRANSPARENT);
		btnGenre.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetSingSubGenreMenu() {
		Button btnBallad = (Button)findViewById(R.id.btn_sing_sub_genre_ballad);
		Button btnDance = (Button)findViewById(R.id.btn_sing_sub_genre_dance);
		Button btnTrot = (Button)findViewById(R.id.btn_sing_sub_genre_trot);
		Button btnRock = (Button)findViewById(R.id.btn_sing_sub_genre_rock);
		Button btnPop = (Button)findViewById(R.id.btn_sing_sub_genre_pop);
		Button btnAni = (Button)findViewById(R.id.btn_sing_sub_genre_ani);
		
		btnBallad.setBackgroundColor(Color.TRANSPARENT);
		btnDance.setBackgroundColor(Color.TRANSPARENT);
		btnTrot.setBackgroundColor(Color.TRANSPARENT);
		btnRock.setBackgroundColor(Color.TRANSPARENT);
		btnPop.setBackgroundColor(Color.TRANSPARENT);
		btnAni.setBackgroundColor(Color.TRANSPARENT);
	}

	public void resetSongList() {
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_sing_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_sing_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_sing_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_sing_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_sing_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_sing_list_list_6);
		
		layoutList1.setBackgroundColor(Color.TRANSPARENT);
		layoutList2.setBackgroundColor(Color.TRANSPARENT);
		layoutList3.setBackgroundColor(Color.TRANSPARENT);
		layoutList4.setBackgroundColor(Color.TRANSPARENT);
		layoutList5.setBackgroundColor(Color.TRANSPARENT);
		layoutList6.setBackgroundColor(Color.TRANSPARENT);
		
		TextView txtRank1 = (TextView)findViewById(R.id.txt_sing_rank_1);
		TextView txtRank2 = (TextView)findViewById(R.id.txt_sing_rank_2);
		TextView txtRank3 = (TextView)findViewById(R.id.txt_sing_rank_3);
		TextView txtRank4 = (TextView)findViewById(R.id.txt_sing_rank_4);
		TextView txtRank5 = (TextView)findViewById(R.id.txt_sing_rank_5);
		TextView txtRank6 = (TextView)findViewById(R.id.txt_sing_rank_6);
		
		TextView txtNumber1 = (TextView)findViewById(R.id.txt_sing_number_1);
		TextView txtNumber2 = (TextView)findViewById(R.id.txt_sing_number_2);
		TextView txtNumber3 = (TextView)findViewById(R.id.txt_sing_number_3);
		TextView txtNumber4 = (TextView)findViewById(R.id.txt_sing_number_4);
		TextView txtNumber5 = (TextView)findViewById(R.id.txt_sing_number_5);
		TextView txtNumber6 = (TextView)findViewById(R.id.txt_sing_number_6);
		
		String strColorOff = "#83D5BE";
		
		txtRank1.setTextColor(Color.parseColor(strColorOff));
		txtRank2.setTextColor(Color.parseColor(strColorOff));
		txtRank3.setTextColor(Color.parseColor(strColorOff));
		txtRank4.setTextColor(Color.parseColor(strColorOff));
		txtRank5.setTextColor(Color.parseColor(strColorOff));
		txtRank6.setTextColor(Color.parseColor(strColorOff));
		
		txtNumber1.setTextColor(Color.parseColor(strColorOff));
		txtNumber2.setTextColor(Color.parseColor(strColorOff));
		txtNumber3.setTextColor(Color.parseColor(strColorOff));
		txtNumber4.setTextColor(Color.parseColor(strColorOff));
		txtNumber5.setTextColor(Color.parseColor(strColorOff));
		txtNumber6.setTextColor(Color.parseColor(strColorOff));
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		switch(remote.m_iSingSubMenuFocus)
		{
		case 1 :
			if (isFavor(1)) {
				imgIcon1.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			}
	
			if (isFavor(2)) {
				imgIcon2.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(3)) {
				imgIcon3.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(4)) {
				imgIcon4.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(5)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(6)) {
				imgIcon6.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			}
			break;
		case 2 :
			if (isFavor(1)) {
				imgIcon1.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon1.setImageResource(R.drawable.common_bullet_new);
			}
	
			if (isFavor(2)) {
				imgIcon2.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon2.setImageResource(R.drawable.common_bullet_new);
			}
			
			if (isFavor(3)) {
				imgIcon3.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon3.setImageResource(R.drawable.common_bullet_new);
			}
			
			if (isFavor(4)) {
				imgIcon4.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon4.setImageResource(R.drawable.common_bullet_new);
			}
			
			if (isFavor(5)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_new);
			}
			
			if (isFavor(6)) {
				imgIcon6.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon6.setImageResource(R.drawable.common_bullet_new);
			}
			break;
		case 3 :
			if (isFavor(1)) {
				imgIcon1.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			}
	
			if (isFavor(2)) {
				imgIcon2.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(3)) {
				imgIcon3.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(4)) {
				imgIcon4.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(5)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			}
			
			if (isFavor(6)) {
				imgIcon6.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			}
			break;
		}
	}

	public void resetListenSubMenu() {
		Button btnNow = (Button)findViewById(R.id.btn_listen_sub_now);
		Button btnWeek = (Button)findViewById(R.id.btn_listen_sub_week);
		Button btnBest = (Button)findViewById(R.id.btn_listen_sub_best);
		
		btnNow.setBackgroundColor(Color.TRANSPARENT);
		btnWeek.setBackgroundColor(Color.TRANSPARENT);
		btnBest.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetListenList() {
		if (m_layoutListenListFocus != null) {
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_1).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_2).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_3).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_4).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_5).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_6).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_7).setBackgroundColor(Color.TRANSPARENT);
			m_layoutListenListFocus.findViewById(R.id.layout_listen_list_focus_8).setBackgroundColor(Color.TRANSPARENT);
		}
	}

	public void resetMySubMenu() {
		Button btnRecent = (Button)findViewById(R.id.btn_my_sub_recent);
		Button btnFavor = (Button)findViewById(R.id.btn_my_sub_favor);
		Button btnRecord = (Button)findViewById(R.id.btn_my_sub_record);
		
		btnRecent.setBackgroundColor(Color.TRANSPARENT);
		btnFavor.setBackgroundColor(Color.TRANSPARENT);
		btnRecord.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetMyList() {
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_sing_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_sing_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_sing_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_sing_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_sing_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_sing_list_list_6);
		
		layoutList1.setBackgroundColor(Color.TRANSPARENT);
		layoutList2.setBackgroundColor(Color.TRANSPARENT);
		layoutList3.setBackgroundColor(Color.TRANSPARENT);
		layoutList4.setBackgroundColor(Color.TRANSPARENT);
		layoutList5.setBackgroundColor(Color.TRANSPARENT);
		layoutList6.setBackgroundColor(Color.TRANSPARENT);
		
		TextView txtNumber1 = (TextView)findViewById(R.id.txt_sing_number_1);
		TextView txtNumber2 = (TextView)findViewById(R.id.txt_sing_number_2);
		TextView txtNumber3 = (TextView)findViewById(R.id.txt_sing_number_3);
		TextView txtNumber4 = (TextView)findViewById(R.id.txt_sing_number_4);
		TextView txtNumber5 = (TextView)findViewById(R.id.txt_sing_number_5);
		TextView txtNumber6 = (TextView)findViewById(R.id.txt_sing_number_6);
		
		String strColorOff = "#83D5BE";
		
		txtNumber1.setTextColor(Color.parseColor(strColorOff));
		txtNumber2.setTextColor(Color.parseColor(strColorOff));
		txtNumber3.setTextColor(Color.parseColor(strColorOff));
		txtNumber4.setTextColor(Color.parseColor(strColorOff));
		txtNumber5.setTextColor(Color.parseColor(strColorOff));
		txtNumber6.setTextColor(Color.parseColor(strColorOff));
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		if (isFavor(1)) {
			imgIcon1.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
		}

		if (isFavor(2)) {
			imgIcon2.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(3)) {
			imgIcon3.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(4)) {
			imgIcon4.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(5)) {
			imgIcon5.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(6)) {
			imgIcon6.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
		}
	}
	
	public void resetShopSubMenu() {
		Button btnShopSubTicket = (Button)findViewById(R.id.btn_shop_sub_ticket);
		Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
		
		btnShopSubTicket.setBackgroundColor(Color.TRANSPARENT);
		btnShopSubCertify.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetCustomerSubMenu() {
		Button btnCustomerSubEvent = (Button)findViewById(R.id.btn_customer_sub_event);
		Button btnCustomerSubCustomer = (Button)findViewById(R.id.btn_customer_sub_notice);
		Button btnCustomerSubInfo = (Button)findViewById(R.id.btn_customer_sub_info);
		Button btnCustomerSubApp = (Button)findViewById(R.id.btn_customer_sub_app);
		Button btnCustomerSubMic = (Button)findViewById(R.id.btn_customer_sub_mic);
		
		btnCustomerSubEvent.setBackgroundColor(Color.TRANSPARENT);
		btnCustomerSubCustomer.setBackgroundColor(Color.TRANSPARENT);
		btnCustomerSubInfo.setBackgroundColor(Color.TRANSPARENT);
		btnCustomerSubApp.setBackgroundColor(Color.TRANSPARENT);
		btnCustomerSubMic.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetCustomerList() {
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_customer_list_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_customer_list_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_customer_list_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_customer_list_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_customer_list_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_customer_list_list_6);
		
		layoutList1.setBackgroundColor(Color.TRANSPARENT);
		layoutList2.setBackgroundColor(Color.TRANSPARENT);
		layoutList3.setBackgroundColor(Color.TRANSPARENT);
		layoutList4.setBackgroundColor(Color.TRANSPARENT);
		layoutList5.setBackgroundColor(Color.TRANSPARENT);
		layoutList6.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetSearchSubMenu() {
		Button btnSearchSubSelf = (Button)findViewById(R.id.btn_search_sub_self);
		Button btnSearchSubLetter = (Button)findViewById(R.id.btn_search_sub_letter);
		
		btnSearchSubSelf.setBackgroundColor(Color.TRANSPARENT);
		btnSearchSubLetter.setBackgroundColor(Color.TRANSPARENT);
	}
	
	public void resetSearchLetter() {
		if (m_iSearchLetterMode == KOR) {
			Button btnKor0100 = (Button)findViewById(R.id.btn_search_letter_type_kor);
			Button btnKor0101 = (Button)findViewById(R.id.btn_search_letter_kor_01_01);
			Button btnKor0102 = (Button)findViewById(R.id.btn_search_letter_kor_01_02);
			Button btnKor0103 = (Button)findViewById(R.id.btn_search_letter_kor_01_03);
			Button btnKor0104 = (Button)findViewById(R.id.btn_search_letter_kor_01_04);
			Button btnKor0105 = (Button)findViewById(R.id.btn_search_letter_kor_01_05);
			Button btnKor0106 = (Button)findViewById(R.id.btn_search_letter_kor_01_06);
			Button btnKor0107 = (Button)findViewById(R.id.btn_search_letter_kor_01_07);
			Button btnKor0108 = (Button)findViewById(R.id.btn_search_letter_kor_01_08);
			Button btnKor0109 = (Button)findViewById(R.id.btn_search_letter_kor_01_09);
			Button btnKor0110 = (Button)findViewById(R.id.btn_search_letter_kor_01_10);
			Button btnKor0111 = (Button)findViewById(R.id.btn_search_letter_kor_01_11);
			Button btnKor0112 = (Button)findViewById(R.id.btn_search_letter_kor_01_12);
			Button btnKor0113 = (Button)findViewById(R.id.btn_search_letter_kor_01_13);
			Button btnKor0114 = (Button)findViewById(R.id.btn_search_letter_kor_01_14);
			Button btnKor0201 = (Button)findViewById(R.id.btn_search_letter_kor_02_01);
			Button btnKor0202 = (Button)findViewById(R.id.btn_search_letter_kor_02_02);
			Button btnKor0203 = (Button)findViewById(R.id.btn_search_letter_kor_02_03);
			Button btnKor0204 = (Button)findViewById(R.id.btn_search_letter_kor_02_04);
			Button btnKor0205 = (Button)findViewById(R.id.btn_search_letter_kor_02_05);
			
			btnKor0100.setBackgroundResource(R.drawable.search_btn_off);
			btnKor0101.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0102.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0103.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0104.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0105.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0106.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0107.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0108.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0109.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0110.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0111.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0112.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0113.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0114.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0201.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0202.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0203.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0204.setBackgroundResource(R.drawable.help_btn_word_off);
			btnKor0205.setBackgroundResource(R.drawable.help_btn_word_off);
		} else if (m_iSearchLetterMode == ENG) {
			Button btnEng0100 = (Button)findViewById(R.id.btn_search_letter_type_eng);
			Button btnEng0101 = (Button)findViewById(R.id.btn_search_letter_eng_01_01);
			Button btnEng0102 = (Button)findViewById(R.id.btn_search_letter_eng_01_02);
			Button btnEng0103 = (Button)findViewById(R.id.btn_search_letter_eng_01_03);
			Button btnEng0104 = (Button)findViewById(R.id.btn_search_letter_eng_01_04);
			Button btnEng0105 = (Button)findViewById(R.id.btn_search_letter_eng_01_05);
			Button btnEng0106 = (Button)findViewById(R.id.btn_search_letter_eng_01_06);
			Button btnEng0107 = (Button)findViewById(R.id.btn_search_letter_eng_01_07);
			Button btnEng0108 = (Button)findViewById(R.id.btn_search_letter_eng_01_08);
			Button btnEng0109 = (Button)findViewById(R.id.btn_search_letter_eng_01_09);
			Button btnEng0110 = (Button)findViewById(R.id.btn_search_letter_eng_01_10);
			Button btnEng0111 = (Button)findViewById(R.id.btn_search_letter_eng_01_11);
			Button btnEng0112 = (Button)findViewById(R.id.btn_search_letter_eng_01_12);
			Button btnEng0113 = (Button)findViewById(R.id.btn_search_letter_eng_01_13);
			Button btnEng0114 = (Button)findViewById(R.id.btn_search_letter_eng_01_14);
			Button btnEng0201 = (Button)findViewById(R.id.btn_search_letter_eng_02_01);
			Button btnEng0202 = (Button)findViewById(R.id.btn_search_letter_eng_02_02);
			Button btnEng0203 = (Button)findViewById(R.id.btn_search_letter_eng_02_03);
			Button btnEng0204 = (Button)findViewById(R.id.btn_search_letter_eng_02_04);
			Button btnEng0205 = (Button)findViewById(R.id.btn_search_letter_eng_02_05);
			Button btnEng0206 = (Button)findViewById(R.id.btn_search_letter_eng_02_06);
			Button btnEng0207 = (Button)findViewById(R.id.btn_search_letter_eng_02_07);
			Button btnEng0208 = (Button)findViewById(R.id.btn_search_letter_eng_02_08);
			Button btnEng0209 = (Button)findViewById(R.id.btn_search_letter_eng_02_09);
			Button btnEng0210 = (Button)findViewById(R.id.btn_search_letter_eng_02_10);
			Button btnEng0211 = (Button)findViewById(R.id.btn_search_letter_eng_02_11);
			Button btnEng0212 = (Button)findViewById(R.id.btn_search_letter_eng_02_12);
			
			btnEng0100.setBackgroundResource(R.drawable.search_btn_off);
			btnEng0101.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0102.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0103.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0104.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0105.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0106.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0107.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0108.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0109.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0110.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0111.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0112.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0113.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0114.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0201.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0202.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0203.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0204.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0205.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0206.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0207.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0208.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0209.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0210.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0211.setBackgroundResource(R.drawable.help_btn_word_off);
			btnEng0212.setBackgroundResource(R.drawable.help_btn_word_off);
		} else if (m_iSearchLetterMode == NUM) {
			Button btnNum0100 = (Button)findViewById(R.id.btn_search_letter_type_num);
			Button btnNum0101 = (Button)findViewById(R.id.btn_search_letter_num_01_01);
			Button btnNum0102 = (Button)findViewById(R.id.btn_search_letter_num_01_02);
			Button btnNum0103 = (Button)findViewById(R.id.btn_search_letter_num_01_03);
			Button btnNum0104 = (Button)findViewById(R.id.btn_search_letter_num_01_04);
			Button btnNum0105 = (Button)findViewById(R.id.btn_search_letter_num_01_05);
			Button btnNum0106 = (Button)findViewById(R.id.btn_search_letter_num_01_06);
			Button btnNum0107 = (Button)findViewById(R.id.btn_search_letter_num_01_07);
			Button btnNum0108 = (Button)findViewById(R.id.btn_search_letter_num_01_08);
			Button btnNum0109 = (Button)findViewById(R.id.btn_search_letter_num_01_09);
			Button btnNum0110 = (Button)findViewById(R.id.btn_search_letter_num_01_10);
			
			btnNum0100.setBackgroundResource(R.drawable.search_btn_off);
			btnNum0101.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0102.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0103.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0104.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0105.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0106.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0107.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0108.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0109.setBackgroundResource(R.drawable.help_btn_word_off);
			btnNum0110.setBackgroundResource(R.drawable.help_btn_word_off);
		}
	}
	
	public void resetSearchList() {
		LinearLayout layoutList1 = null;
		LinearLayout layoutList2 = null;
		LinearLayout layoutList3 = null;
		LinearLayout layoutList4 = null;
		LinearLayout layoutList5 = null;
		
		if (remote.m_iSearchSubMenuFocus == 1) {
			layoutList1 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_1);
			layoutList2 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_2);
			layoutList3 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_3);
			layoutList4 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_4);
			layoutList5 = (LinearLayout)findViewById(R.id.layout_search_self_list_list_5);
		} else {
			layoutList1 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_1);
			layoutList2 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_2);
			layoutList3 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_3);
			layoutList4 = (LinearLayout)findViewById(R.id.layout_search_letter_list_list_4);
		}
		
		layoutList1.setBackgroundColor(Color.TRANSPARENT);
		layoutList2.setBackgroundColor(Color.TRANSPARENT);
		layoutList3.setBackgroundColor(Color.TRANSPARENT);
		layoutList4.setBackgroundColor(Color.TRANSPARENT);
		if (remote.m_iSearchSubMenuFocus == 1) {
			layoutList5.setBackgroundColor(Color.TRANSPARENT);
		}
		
		TextView txtNumber1 = null;
		TextView txtNumber2 = null;
		TextView txtNumber3 = null;
		TextView txtNumber4 = null;
		TextView txtNumber5 = null;
		
		if (remote.m_iSearchSubMenuFocus == 1) {
			txtNumber1 = (TextView)findViewById(R.id.txt_search_self_number_1);
			txtNumber2 = (TextView)findViewById(R.id.txt_search_self_number_2);
			txtNumber3 = (TextView)findViewById(R.id.txt_search_self_number_3);
			txtNumber4 = (TextView)findViewById(R.id.txt_search_self_number_4);
			txtNumber5 = (TextView)findViewById(R.id.txt_search_self_number_5);
		} else {
			txtNumber1 = (TextView)findViewById(R.id.txt_search_letter_number_1);
			txtNumber2 = (TextView)findViewById(R.id.txt_search_letter_number_2);
			txtNumber3 = (TextView)findViewById(R.id.txt_search_letter_number_3);
			txtNumber4 = (TextView)findViewById(R.id.txt_search_letter_number_4);
		}
		
		String strColorOff = "#83D5BE";
		
		txtNumber1.setTextColor(Color.parseColor(strColorOff));
		txtNumber2.setTextColor(Color.parseColor(strColorOff));
		txtNumber3.setTextColor(Color.parseColor(strColorOff));
		txtNumber4.setTextColor(Color.parseColor(strColorOff));
		if (remote.m_iSearchSubMenuFocus == 1) {
			txtNumber5.setTextColor(Color.parseColor(strColorOff));
		}
		
		ImageView imgIcon1 = null;
		ImageView imgIcon2 = null;
		ImageView imgIcon3 = null;
		ImageView imgIcon4 = null;
		ImageView imgIcon5 = null;
		
		if (remote.m_iSearchSubMenuFocus == 1) {
			imgIcon1 = (ImageView)findViewById(R.id.img_search_self_icon_1);
			imgIcon2 = (ImageView)findViewById(R.id.img_search_self_icon_2);
			imgIcon3 = (ImageView)findViewById(R.id.img_search_self_icon_3);
			imgIcon4 = (ImageView)findViewById(R.id.img_search_self_icon_4);
			imgIcon5 = (ImageView)findViewById(R.id.img_search_self_icon_5);
		} else {
			imgIcon1 = (ImageView)findViewById(R.id.img_search_letter_icon_1);
			imgIcon2 = (ImageView)findViewById(R.id.img_search_letter_icon_2);
			imgIcon3 = (ImageView)findViewById(R.id.img_search_letter_icon_3);
			imgIcon4 = (ImageView)findViewById(R.id.img_search_letter_icon_4);
		}

		if (isFavor(1)) {
			imgIcon1.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
		}

		if (isFavor(2)) {
			imgIcon2.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(3)) {
			imgIcon3.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (isFavor(4)) {
			imgIcon4.setImageResource(R.drawable.common_bullet_favor_off);
		} else {
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
		}
		
		if (remote.m_iSearchSubMenuFocus == 1) {
			if (isFavor(5)) {
				imgIcon5.setImageResource(R.drawable.common_bullet_favor_off);
			} else {
				imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			}
		}
	}
	
	public void resetPPXPass() {
		LinearLayout layoutPass01 = (LinearLayout)findViewById(R.id.layout_ticket_pass_01);
		layoutPass01.setBackgroundResource(R.drawable.ticket_popup_pass_off);

		LinearLayout layoutPass02 = (LinearLayout)findViewById(R.id.layout_ticket_pass_02);
		layoutPass02.setBackgroundResource(R.drawable.ticket_popup_pass_off);

		LinearLayout layoutPass03 = (LinearLayout)findViewById(R.id.layout_ticket_pass_03);
		layoutPass03.setBackgroundResource(R.drawable.ticket_popup_pass_off);

		LinearLayout layoutPass04 = (LinearLayout)findViewById(R.id.layout_ticket_pass_04);
		layoutPass04.setBackgroundResource(R.drawable.ticket_popup_pass_off);

		Button btnOK = (Button)findViewById(R.id.btn_message_ticket_password_ok);
		btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);

		Button btnBack = (Button)findViewById(R.id.btn_message_ticket_password_back);
		btnBack.setBackgroundResource(R.drawable.pop_btn_01_off);
		
		Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_password_cancel);
		btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
		
		if (m_strInputPass[0] != "") {
			ImageView imgPass01 = (ImageView)findViewById(R.id.img_ticket_pass_01);
			imgPass01.setImageResource(R.drawable.pop_pw_off);
		}
		
		if (m_strInputPass[1] != "") {
			ImageView imgPass02 = (ImageView)findViewById(R.id.img_ticket_pass_02);
			imgPass02.setImageResource(R.drawable.pop_pw_off);
		}
		
		if (m_strInputPass[2] != "") {
			ImageView imgPass04 = (ImageView)findViewById(R.id.img_ticket_pass_03);
			imgPass04.setImageResource(R.drawable.pop_pw_off);
		}
		
		if (m_strInputPass[3] != "") {
			ImageView imgPass04 = (ImageView)findViewById(R.id.img_ticket_pass_04);
			imgPass04.setImageResource(R.drawable.pop_pw_off);
		}
	}
	
	public void resetPPMNotice() {
		ImageView imgNarrowUp = (ImageView)findViewById(R.id.img_message_ticket_narrow_up);
		imgNarrowUp.setImageResource(R.drawable.ticket_popup_narrow_up_off);

		ImageView imgNarrowDown = (ImageView)findViewById(R.id.img_message_ticket_narrow_down);
		imgNarrowDown.setImageResource(R.drawable.ticket_popup_narrow_down_off);

		Button btnOK = (Button)findViewById(R.id.btn_message_ticket_day_ok);
		btnOK.setBackgroundResource(R.drawable.pop_btn_01_off);

		Button btnCancel = (Button)findViewById(R.id.btn_message_ticket_day_cancel);
		btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
	}
	
	public void resetCertifyHP() {
		EditText editHP01 = (EditText)findViewById(R.id.edit_message_hp_01);
		EditText editHP02 = (EditText)findViewById(R.id.edit_message_hp_02);
		EditText editHP03 = (EditText)findViewById(R.id.edit_message_hp_03);
		Button btnOk = (Button)findViewById(R.id.btn_message_hp_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_hp_cancel);
		
		editHP01.clearFocus();
		editHP01.setSelected(false);
		editHP01.setFocusable(false);
		editHP01.setFocusableInTouchMode(false);
		
		editHP02.clearFocus();
		editHP02.setSelected(false);
		editHP02.setFocusable(false);
		editHP02.setFocusableInTouchMode(false);
		
		editHP03.clearFocus();
		editHP03.setSelected(false);
		editHP03.setFocusable(false);
		editHP03.setFocusableInTouchMode(false);
		
		editHP01.setBackgroundResource(R.drawable.pop_input_02_off);
		editHP02.setBackgroundResource(R.drawable.pop_input_02_off);
		editHP03.setBackgroundResource(R.drawable.pop_input_02_off);
		
		btnOk.setBackgroundResource(R.drawable.pop_btn_01_off);
		btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
	}
	
	public void resetCertify() {
		EditText editCertify = (EditText)findViewById(R.id.edit_message_certify);
		Button btnResend = (Button)findViewById(R.id.btn_message_certify_resend);
		Button btnOk = (Button)findViewById(R.id.btn_message_certify_ok);
		Button btnCancel = (Button)findViewById(R.id.btn_message_certify_cancel);
		
		editCertify.clearFocus();
		editCertify.setSelected(false);
		editCertify.setFocusable(false);
		editCertify.setFocusableInTouchMode(false);
		
		editCertify.setBackgroundResource(R.drawable.pop_input_02_off);
		
		btnResend.setBackgroundResource(R.drawable.pop_btn_resend_off);
		btnOk.setBackgroundResource(R.drawable.pop_btn_01_off);
		btnCancel.setBackgroundResource(R.drawable.pop_btn_01_off);
	}
	
	public void resetMyRecordList() {
		LinearLayout layoutList1 = (LinearLayout)findViewById(R.id.layout_my_record_list_1);
		LinearLayout layoutList2 = (LinearLayout)findViewById(R.id.layout_my_record_list_2);
		LinearLayout layoutList3 = (LinearLayout)findViewById(R.id.layout_my_record_list_3);
		LinearLayout layoutList4 = (LinearLayout)findViewById(R.id.layout_my_record_list_4);
		LinearLayout layoutList5 = (LinearLayout)findViewById(R.id.layout_my_record_list_5);
		LinearLayout layoutList6 = (LinearLayout)findViewById(R.id.layout_my_record_list_6);
		
		layoutList1.setBackgroundColor(Color.TRANSPARENT);
		layoutList2.setBackgroundColor(Color.TRANSPARENT);
		layoutList3.setBackgroundColor(Color.TRANSPARENT);
		layoutList4.setBackgroundColor(Color.TRANSPARENT);
		layoutList5.setBackgroundColor(Color.TRANSPARENT);
		layoutList6.setBackgroundColor(Color.TRANSPARENT);
		
		String strColorOff = "#83D5BE";
		
		TextView txtRecommand1 = (TextView)findViewById(R.id.txt_my_record_recommand_count_1);
		TextView txtRecommand2 = (TextView)findViewById(R.id.txt_my_record_recommand_count_2);
		TextView txtRecommand3 = (TextView)findViewById(R.id.txt_my_record_recommand_count_3);
		TextView txtRecommand4 = (TextView)findViewById(R.id.txt_my_record_recommand_count_4);
		TextView txtRecommand5 = (TextView)findViewById(R.id.txt_my_record_recommand_count_5);
		TextView txtRecommand6 = (TextView)findViewById(R.id.txt_my_record_recommand_count_6);
		
		TextView txtTitle1 = (TextView)findViewById(R.id.txt_my_record_title_1);
		TextView txtTitle2 = (TextView)findViewById(R.id.txt_my_record_title_2);
		TextView txtTitle3 = (TextView)findViewById(R.id.txt_my_record_title_3);
		TextView txtTitle4 = (TextView)findViewById(R.id.txt_my_record_title_4);
		TextView txtTitle5 = (TextView)findViewById(R.id.txt_my_record_title_5);
		TextView txtTitle6 = (TextView)findViewById(R.id.txt_my_record_title_6);
		
		TextView txtDate1 = (TextView)findViewById(R.id.txt_my_record_date_1);
		TextView txtDate2 = (TextView)findViewById(R.id.txt_my_record_date_2);
		TextView txtDate3 = (TextView)findViewById(R.id.txt_my_record_date_3);
		TextView txtDate4 = (TextView)findViewById(R.id.txt_my_record_date_4);
		TextView txtDate5 = (TextView)findViewById(R.id.txt_my_record_date_5);
		TextView txtDate6 = (TextView)findViewById(R.id.txt_my_record_date_6);
		
		txtRecommand1.setTextColor(Color.parseColor(strColorOff));
		txtRecommand2.setTextColor(Color.parseColor(strColorOff));
		txtRecommand3.setTextColor(Color.parseColor(strColorOff));
		txtRecommand4.setTextColor(Color.parseColor(strColorOff));
		txtRecommand5.setTextColor(Color.parseColor(strColorOff));
		txtRecommand6.setTextColor(Color.parseColor(strColorOff));
		
		txtTitle1.setTextColor(Color.parseColor(strColorOff));
		txtTitle2.setTextColor(Color.parseColor(strColorOff));
		txtTitle3.setTextColor(Color.parseColor(strColorOff));
		txtTitle4.setTextColor(Color.parseColor(strColorOff));
		txtTitle5.setTextColor(Color.parseColor(strColorOff));
		txtTitle6.setTextColor(Color.parseColor(strColorOff));
		
		txtDate1.setTextColor(Color.parseColor(strColorOff));
		txtDate2.setTextColor(Color.parseColor(strColorOff));
		txtDate3.setTextColor(Color.parseColor(strColorOff));
		txtDate4.setTextColor(Color.parseColor(strColorOff));
		txtDate5.setTextColor(Color.parseColor(strColorOff));
		txtDate6.setTextColor(Color.parseColor(strColorOff));
		
		if (!m_bIsMyRecordReCertifyBtnFocused) {
			Button btnReCertify = (Button)findViewById(R.id.btn_already_certify_re);
			btnReCertify.setBackgroundResource(R.drawable.my_record_btn_off);
		}
	}
	
	public void exitSingSubMenu() {
		resetSingSubMenu();
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iSingSubMenuFocus = 1;
		
		Button btnSubMainSing = (Button)findViewById(R.id.btn_sub_main_sing);
		btnSubMainSing.setBackgroundResource(R.drawable.sub_icon_01_on);
	}
	
	public void exitSingSubGenreMenu() {
		resetSingSubGenreMenu();
		
		remote.m_iState = STATE_SING_SUB_MENU;
		remote.m_iSingSubGenreMenuFocus = 1;
		
		displaySingSubMenu(NONE);
	}

	public void exitSongList() {
		resetSongList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		
		remote.m_iSongListFocus = 1;
		
		// 인기장르 목록 → 인기장르 서브메뉴
		if (remote.m_iSubMainMenuFocus == 1 && remote.m_iSingSubMenuFocus == 3) {
			SettingListBackground(layoutList, R.drawable.sing_bg_genre);
			remote.m_iState = STATE_SING_SUB_GENRE;
			displaySingSubGenreMenu(NONE);
		// 마이노래방 목록 → 마이노래방 서브메뉴
		} else if (remote.m_iSubMainMenuFocus == 3) {
			SettingListBackground(layoutList, R.drawable.sing_bg);
			remote.m_iState = STATE_MY_SUB_MENU;
			displayMySubMenu(NONE);
		// etc
		} else {
			SettingListBackground(layoutList, R.drawable.sing_bg);
			remote.m_iState = STATE_SING_SUB_MENU;
			displaySingSubMenu(NONE);
		}
	}

	public void exitSongListDetail() {
		if (m_layoutSongListDetail != null) {
			((ViewManager)m_layoutSongListDetail.getParent()).removeView(m_layoutSongListDetail);
			m_layoutSongListDetail = null;
		}
		
		switch(remote.m_iSubMainMenuFocus)
		{
		case 1 :
			remote.m_iState = STATE_SONG_LIST;
			displaySongList(NONE);
			break;
		case 3 :
			remote.m_iState = STATE_MY_LIST;
			displayMyList(NONE);
			break;
		}
	}

	public void exitListenSubMenu() {
		resetListenSubMenu();
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iListenSubMenuFocus = 1;
		
		Button btnSubMainListen = (Button)findViewById(R.id.btn_sub_main_listen);
		btnSubMainListen.setBackgroundResource(R.drawable.sub_icon_02_on);
	}
	
	public void exitListenList() {
		resetListenList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.search_bg_none);
		
		if (m_layoutListenListFocus != null) {
			((ViewManager)m_layoutListenListFocus.getParent()).removeView(m_layoutListenListFocus);
			m_layoutListenListFocus = null;
		}
		
		remote.m_iListenListFocusX = 1;
		remote.m_iListenListFocusY = 1;
		
		if (remote.m_iSubMainMenuFocus == 2) {
			remote.m_iState = STATE_LISTEN_SUB_MENU;
			displayListenSubMenu(NONE);
		} else {
			remote.m_iState = STATE_MY_SUB_MENU;
			displayMySubMenu(NONE);
		}
	}
	
	public void exitListening() {
		if (m_layoutListeningOther!= null) {
			((ViewManager)m_layoutListeningOther.getParent()).removeView(m_layoutListeningOther);
			m_layoutListeningOther = null;
		}
		
		if (listen != null) {
			if (listen.isListening()) {
				listen.stopListen();
				listen.releaseListen();
			}
		}
		
		// 하단 첫번째 가이드 텍스트 그룹을 감춤
		HideBottomGuide01();
		
		if (m_layoutListen != null) {
			((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
			m_layoutListen = null;
			LOG(CLASS, "Remove Listening");
		}
		
		if (m_iPaneState == HOME) {
			remote.m_iState = STATE_MAIN_MENU;
		} else {
			if (remote.m_iSubMainMenuFocus != 3) {
				remote.m_iState = STATE_LISTEN_LIST;
				
				switch(remote.m_iListenSubMenuFocus)
				{
				case 1 :
					KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TIMELINE);
					break;
				case 2 :
					KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_WEEK);
					break;
				case 3 :
					KP(REQUEST_LISTEN_LIST, KP_2100, MENU_LISTEN, LISTEN_TOP100);
					break;
				}
			} else {
				remote.m_iState = STATE_MY_RECORD_LIST;
			}
		}
		
		ShowMenu();
	}

	public void exitListeningOther() {
		if (m_layoutListeningOther!= null) {
			((ViewManager)m_layoutListeningOther.getParent()).removeView(m_layoutListeningOther);
			m_layoutListeningOther = null;
		}
		
		// 하단 첫번째 가이드를 '다른 녹음곡 보기' 로 변경
		SetBottomGuideText01(R.drawable.common_btn_arr_down, "다른 녹음곡 보기");
		
		remote.m_iState = STATE_LISTENING;
	}

	public void exitMySubMenu() {
		resetMySubMenu();
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iMySubMenuFocus = 1;
		
		Button btnSubMainMy = (Button)findViewById(R.id.btn_sub_main_my);
		btnSubMainMy.setBackgroundResource(R.drawable.sub_icon_03_on);
	}

	public void exitMyList() {
		resetSongList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.sing_bg);
		
		remote.m_iState = STATE_MY_SUB_MENU;
		remote.m_iSongListFocus = 1;
		
		displayMySubMenu(NONE);
	}

	public void exitShopSubMenu() {
		resetShopSubMenu();
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iShopSubMenuFocus = 1;
		
		Button btnSubMainShop = (Button)findViewById(R.id.btn_sub_main_shop);
		btnSubMainShop.setBackgroundResource(R.drawable.sub_icon_04_on);
	}

	public void exitTicket() {
		Button btnCoupon = (Button)findViewById(R.id.btn_shop_tab_coupon);
		
		if (remote.m_iShopTicketFocus == 3 && m_bIsFocusedOnTicket) {
			m_bIsFocusedOnTicket = false;
			remote.m_iShopTicketFocusY = 1;
			m_iCouponFocus = 1;
			
			EditText editCoupon = (EditText)findViewById(R.id.edit_coupon);
			Button btnCouponRegist = (Button)findViewById(R.id.btn_coupon_regist);
			
			editCoupon.setBackgroundResource(R.drawable.coupon_input_off);
			btnCouponRegist.setBackgroundResource(R.drawable.coupon_btn_regist_off);
			btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
			
			editCoupon.clearFocus();
			editCoupon.setSelected(false);
			editCoupon.setFocusable(false);
			editCoupon.setFocusableInTouchMode(false);
			return;
		}
		
		Button btnPurchase = (Button)findViewById(R.id.btn_shop_purchase);
		btnPurchase.setBackgroundResource(R.drawable.tab_focus_long_off);
		
		LinearLayout layoutTicket = (LinearLayout)findViewById(R.id.layout_shop_ticket);
		
		switch(remote.m_iShopTicketFocus)
		{
		case 1 :
			layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_month_off);
			break;
		case 2 :
			layoutTicket.setBackgroundResource(R.drawable.shop_ticket_bg_day_off);
			break;
		case 3 :
			if (m_bCouponUser) {
				layoutTicket.setBackgroundResource(R.drawable.shop_coupon_bg_registed_off);
			} else {
				layoutTicket.setBackgroundResource(R.drawable.shop_coupon_bg_regist_off);
			}
			break;
		}
		
		Button btnDay = (Button)findViewById(R.id.btn_shop_tab_day);
		Button btnMonth = (Button)findViewById(R.id.btn_shop_tab_month);
		
		switch(remote.m_iShopTicketFocus)
		{
		case 1 :
			btnDay.setBackgroundResource(R.drawable.shop_ticket_tab_selected);
			break;
		case 2 :
			btnMonth.setBackgroundResource(R.drawable.shop_ticket_tab_selected);
			break;
		case 3 :
			btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_selected);
			break;
		}
		
		Button btnKPInfo = (Button)findViewById(R.id.btn_shop_kp_info);
		btnKPInfo.setBackgroundResource(R.drawable.shop_focus_02_off);
		
		remote.m_iState = STATE_SHOP_SUB_MENU;
		
		Button btnShopSubTicket = (Button)findViewById(R.id.btn_shop_sub_ticket);
		btnShopSubTicket.setBackgroundResource(R.drawable.tab_focus_on);
	}
	
	@SuppressWarnings("deprecation")
	public void exitPPV() {
		if (m_bIsGoToCertifyMessage) {
			// bgkimt 이용권 구매했으니까 인증할래? 띄운다
			m_bIsGoToCertifyMessage = false;
			
			m_layoutPPV.removeAllViews();

			((ViewManager)m_layoutPPV.getParent()).removeView(m_layoutPPV);

			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_go_certify, null);
			LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			addContentView(m_layoutPPV, param);
			ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
		    setGlobalFont(root);
		    
		    remote.m_iState = STATE_MESSAGE_GO_CERTIFY;
		    m_iTicketMessageFocusX = 1;
		} else {
			((ViewManager)m_layoutPPV.getParent()).removeView(m_layoutPPV);
			remote.m_iState = STATE_SHOP_TICKET;
		}
		
		m_bIsFocusedOnPassNumber = false;
		m_strInputPass[0] = "";
		m_strInputPass[1] = "";
		m_strInputPass[2] = "";
		m_strInputPass[3] = "";
	}
	
	public void exitCertify() {
		if (!m_bIsCertifyedUser) {
			ImageView imgCertify = (ImageView)findViewById(R.id.img_shop_certify);
			imgCertify.setImageResource(R.drawable.shop_notify_off);
		} else {
			LinearLayout layoutCertify = (LinearLayout)findViewById(R.id.layout_already_certify);
			layoutCertify.setBackgroundResource(R.drawable.shop_already_notify_off);
		}
		
		remote.m_iState = STATE_SHOP_SUB_MENU;
		
		Button btnShopSubCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
		btnShopSubCertify.setBackgroundResource(R.drawable.tab_focus_on);
	}
	
	public void exitCertifyHP() {
		if (remote.m_iSubMainMenuFocus != 5) {
			((ViewManager)m_layoutCertifyHP.getParent()).removeView(m_layoutCertifyHP);
			remote.m_iState = STATE_SHOP_CERTIFY;
		} else {
			((ViewManager)m_layoutEventHP.getParent()).removeView(m_layoutEventHP);
			remote.m_iState = STATE_CUSTOMER_LIST_DETAIL;
		}
		
		remote.m_iCertifyHPFocusX = 1;
		remote.m_iCertifyHPFocusY = 1;
	}

	public void exitCertifyNumber() {
		if (m_bIsCertifyTimerActivated) {
			m_cdTimer.cancel();
		}
		
		((ViewManager)m_layoutCertify.getParent()).removeView(m_layoutCertify);
		
		remote.m_iState = STATE_SHOP_CERTIFY;
		remote.m_iCertifyFocusX = 1;
		remote.m_iCertifyFocusY = 1;
	}

	public void exitCustomerSubMenu() {
		resetCustomerSubMenu();
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iCustomerSubMenuFocus = 1;
		
		Button btnSubMainCustomer = (Button)findViewById(R.id.btn_sub_main_customer);
		btnSubMainCustomer.setBackgroundResource(R.drawable.sub_icon_05_on);
	}
	
	public void exitCustomerList() {
		resetCustomerList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.sing_bg);
		
		remote.m_iState = STATE_CUSTOMER_SUB_MENU;
		remote.m_iCustomerListFocus = 1;
		
		displayCustomerSubMenu(NONE);
	}
	
	public void exitCustomerListDetail() {
		// 메인화면에서 타고 들어온거면 상세화면에서 빠져나갈 때 서브메뉴로 올려줌
		if (m_iEnterCustomerMenu != KEY) {
			remote.m_iMainMenuFocus = 5;
			
			if (m_iEnterCustomerMenu == EVENT) {
				remote.m_iCustomerSubMenuFocus = 1;
			} else if (m_iEnterCustomerMenu == NOTICE) {
				remote.m_iCustomerSubMenuFocus = 2;
			} else {
				remote.m_iCustomerSubMenuFocus = 1;
			}
			
			LinearLayout layoutCustomerBack = (LinearLayout)findViewById(R.id.layout_sing);
			SettingListBackground(layoutCustomerBack, R.drawable.sing_bg);
		
			if (remote.m_iCustomerSubMenuFocus != 1) {
				addViewKaraoke(m_layoutContent, m_layoutCustomerList);
			} else {
				addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
			}
			
			remote.m_iState = STATE_CUSTOMER_SUB_MENU;
			
			clickCustomerSubMenu();
		} else {
			if (m_iTotalCustomerListPage > 1) {
				LinearLayout layoutCustomerBack = (LinearLayout)findViewById(R.id.layout_sing);
				SettingListBackground(layoutCustomerBack, R.drawable.sing_bg_narrow);
			}
			
			if (remote.m_iCustomerSubMenuFocus != 1) {
				addViewKaraoke(m_layoutContent, m_layoutCustomerList);
				remote.m_iState = STATE_CUSTOMER_LIST;
			} else {
				addViewKaraoke(m_layoutContent, m_layoutCustomerListEvent);
				remote.m_iState = STATE_CUSTOMER_LIST_EVENT;
			}
		}
	}

	@SuppressWarnings("deprecation")
	public void exitSearchSubMenu() {
		resetSearchSubMenu();
		
		remote.m_iSearchSubMenuFocus = 1;
		
		remote.m_iState = STATE_SUB_MAIN_MENU;
		remote.m_iSubMainMenuFocus = 1;
		remote.m_iSingSubMenuFocus = 1;
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout layoutSubMenu = null, layoutContent = null;
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		setContentViewKaraoke(m_layoutList);
		
		layoutSubMenu = (LinearLayout)inf.inflate(R.layout.sing_sub, null);
		layoutSubMenu.setLayoutParams(lp);	
		addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
		
		layoutContent = (LinearLayout)inf.inflate(R.layout.sing_list, null);
		layoutContent.setLayoutParams(lp);
		addViewKaraoke(m_layoutContent, layoutContent);
		
		Button btnSubMainSing = (Button)findViewById(R.id.btn_sub_main_sing);
		btnSubMainSing.setBackgroundResource(R.drawable.sub_icon_01_on);
		
		LinearLayout.LayoutParams lpOn = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOn.setMargins(0, 0, 0, 0);
		lpOn.weight = 5;
		
		btnSubMainSing.setLayoutParams(lpOn);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.sing_bg);
		
		LinearLayout.LayoutParams lp1 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp1.weight = 1;
		LinearLayout blank1 = (LinearLayout)findViewById(R.id.layout_sing_list_blank1);
		blank1.setLayoutParams(lp1);
		
		m_iRequestPage = 1;
		KP(REQUEST_SONG_LIST, KP_1000, "", SING_HOT);
	}

	public void exitSearchSelf() {
		Button btnType = (Button)findViewById(R.id.btn_search_self_type);
		EditText editWord = (EditText)findViewById(R.id.edit_search_self_word);

		btnType.setBackgroundResource(R.drawable.search_btn_off);
		editWord.setBackgroundResource(R.drawable.search_input_off);
		if (m_iVender != SMART_BOX) {
			Button btnOk = (Button)findViewById(R.id.btn_search_self_ok);
			btnOk.setBackgroundResource(R.drawable.search_ok_btn_off);
		}
		
		remote.m_iState = STATE_SEARCH_SUB_MENU;
		remote.m_iSearchSelfFocus = 1;
		m_iSearchSelfMode = TITLE;
		m_bIsFocusedOnBook = false;
		
		displaySearchSubMenu(NONE);
	}
	
	public void exitSearchLetter() {
		resetSearchLetter();
		
		remote.m_iState = STATE_SEARCH_SUB_MENU;
		remote.m_iSearchLetterFocusX = 0;
		remote.m_iSearchLetterFocusY = 1;
		
		displaySearchSubMenu(NONE);
	}
	
	public void exitSearchList() {
		resetSearchList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.search_bg_none);
		
		remote.m_iSearchListFocus = 1;
		
		if (remote.m_iSearchSubMenuFocus == 1) {
			remote.m_iSearchSelfFocus = 1;
			remote.m_iState = STATE_SEARCH_SELF;
			displaySearchSelf(NONE);
		} else {
			remote.m_iSearchLetterFocusX = 0;
			remote.m_iSearchLetterFocusY = 1;
			
			switch(m_iSearchLetterMode)
			{
			case KOR :
				remote.m_iState = STATE_SEARCH_LETTER_KOR;
				break;
			case ENG :
				remote.m_iState = STATE_SEARCH_LETTER_ENG;
				break;
			case NUM :
				remote.m_iState = STATE_SEARCH_LETTER_NUM;
				break;
			}
			
			displaySearchLetter(NONE);
		}
	}
	
	public void exitSearchListDetail() {
		if (m_layoutSongListDetail != null) {
			((ViewManager)m_layoutSongListDetail.getParent()).removeView(m_layoutSongListDetail);
			m_layoutSongListDetail = null;
		}
	
		remote.m_iState = STATE_SEARCH_LIST;
		displaySearchList(NONE);
	}
	
	public void exitMyRecordList() {
		m_bIsMyRecordReCertifyBtnFocused = false;
		
		resetMyRecordList();
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		
		remote.m_iSongListFocus = 1;
		
		SettingListBackground(layoutList, R.drawable.sing_bg);
		remote.m_iState = STATE_MY_SUB_MENU;
		displayMySubMenu(NONE);
	}
	
	public void exitMyRecordNone() {
		Button btnRe = (Button)findViewById(R.id.btn_already_certify_re);
		btnRe.setBackgroundResource(R.drawable.my_record_btn_off);
		
		Button btnHelp = (Button)findViewById(R.id.btn_already_certify_help);
		btnHelp.setBackgroundResource(R.drawable.my_record_btn_off);
		
		remote.m_iState = STATE_MY_SUB_MENU;
		displayMySubMenu(NONE);
	}
	
	public void inputPPXPass(int keycode) {
		String strInputPass = "";
		boolean bErase = false;
		
		switch(keycode)
		{
		case KeyEvent.KEYCODE_0 :
			strInputPass = "0";
			break;
		case KeyEvent.KEYCODE_1 :
			strInputPass = "1";
			break;
		case KeyEvent.KEYCODE_2 :
			strInputPass = "2";
			break;
		case KeyEvent.KEYCODE_3 :
			strInputPass = "3";
			break;
		case KeyEvent.KEYCODE_4 :
			strInputPass = "4";
			break;
		case KeyEvent.KEYCODE_5 :
			strInputPass = "5";
			break;
		case KeyEvent.KEYCODE_6 :
			strInputPass = "6";
			break;
		case KeyEvent.KEYCODE_7 :
			strInputPass = "7";
			break;
		case KeyEvent.KEYCODE_8 :
			strInputPass = "8";
			break;
		case KeyEvent.KEYCODE_9 :
			strInputPass = "9";
			break;
		case 18 :
			bErase = true;
			break;
		}
		
		if (m_iTicketMessageFocusY == 1) {
			if (m_iTicketMessageFocusX == 1) {
				if (!strInputPass.equals(""))
					m_strInputPass[0] = strInputPass;
				
				ImageView imgPass01 = (ImageView)findViewById(R.id.img_ticket_pass_01);
				if (bErase) {
					imgPass01.setImageResource(R.drawable.blank);
					m_strInputPass[0] = "";
				} else {
					imgPass01.setImageResource(R.drawable.pop_pw_off);
					m_iTicketMessageFocusX = 2;
				}
			} else if (m_iTicketMessageFocusX == 2) {
				if (!strInputPass.equals(""))
					m_strInputPass[1] = strInputPass;
				
				ImageView imgPass02 = (ImageView)findViewById(R.id.img_ticket_pass_02);
				if (bErase) {
					imgPass02.setImageResource(R.drawable.blank);
					m_strInputPass[1] = "";
				} else {
					imgPass02.setImageResource(R.drawable.pop_pw_off);
					m_iTicketMessageFocusX = 3;
				}
			} else if (m_iTicketMessageFocusX == 3) {
				if (!strInputPass.equals(""))
					m_strInputPass[2] = strInputPass;
				
				ImageView imgPass03 = (ImageView)findViewById(R.id.img_ticket_pass_03);
				if (bErase) {
					imgPass03.setImageResource(R.drawable.blank);
					m_strInputPass[2] = "";
				} else {
					imgPass03.setImageResource(R.drawable.pop_pw_off);
					m_iTicketMessageFocusX = 4;
				}
			} else if (m_iTicketMessageFocusX == 4) {
				if (!strInputPass.equals(""))
					m_strInputPass[3] = strInputPass;
				
				ImageView imgPass04 = (ImageView)findViewById(R.id.img_ticket_pass_04);
				if (bErase) {
					imgPass04.setImageResource(R.drawable.blank);
					m_strInputPass[3] = "";
				} else {
					imgPass04.setImageResource(R.drawable.pop_pw_off);
					m_iTicketMessageFocusX = 1;
					m_iTicketMessageFocusY = 2;
				}
				
				//m_bIsFocusedOnPassNumber = false;
			}
		}
		
		displayPPXPass(NONE);
	}

	protected void initSongListIndex() {
		m_iCurrentViewSongListPage = 1;
		m_iRequestPage = 1;
	}
	
	protected void initListenListIndex() {
		m_iCurrentViewListenListPage = 1;
		m_iRequestPage = 1;
	}
	
	protected void initCustomerListIndex() {
		m_iCurrentViewCustomerListPage = 1;
		m_iCurrentCustomerListPage = 1;
		m_iRequestPage = 1;
	}
	
	@SuppressLint("CutPasteId")
	public void goHome() {
		if (m_bIsHiddenMenu) {
			ShowMenu();
		}
		
		// 녹음곡 재생 중이면 녹음곡 중지 처리
		if (listen != null) {
			if (listen.isListening()) {
				listen.stopListen();
				listen.releaseListen();
				
				HideBottomGuide01();
				
				if (m_layoutListen != null) {
					((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
					m_layoutListen = null;
				}
				
				if (m_layoutListenListFocus != null) {
					((ViewManager)m_layoutListenListFocus.getParent()).removeView(m_layoutListenListFocus);
					m_layoutListenListFocus = null;
				}
			}
		}
		
		setContentViewKaraoke(m_layoutHome);
		displayMainMenu(INIT);
		m_bListAlreadyReflashed = false;
	}
	
	@SuppressWarnings("deprecation")
	public void goSearch() {
		if (m_bIsHiddenMenu) {
			ShowMenu();
		}
		
		if (m_bIsGenre) {
			HideGenre();
		}
		
		// 녹음곡 재생 중이면 녹음곡 중지 처리
		if (listen != null) {
			if (listen.isListening()) {
				listen.stopListen();
				listen.releaseListen();
				
				HideBottomGuide01();
				
				if (m_layoutListen != null) {
					((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
					m_layoutListen = null;
				}
				
				if (m_layoutListenListFocus != null) {
					((ViewManager)m_layoutListenListFocus.getParent()).removeView(m_layoutListenListFocus);
					m_layoutListenListFocus = null;
				}
			}
		}

		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		setContentViewKaraoke(m_layoutList);
		
		LinearLayout.LayoutParams lp1 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp1.weight = (float)0.3;
		LinearLayout blank1 = (LinearLayout)findViewById(R.id.layout_sing_list_blank1);
		blank1.setLayoutParams(lp1);
		
		// 상단 메인메뉴 영역의 포커스를 잃어준다
		resetSubMainMenu();
		
		LinearLayout layoutSubMenu = (LinearLayout)inf.inflate(R.layout.search_sub, null);
		layoutSubMenu.setLayoutParams(lp);
		addViewKaraoke(m_layoutSubMenu, layoutSubMenu);
		
		LinearLayout layoutContent = null;
		if (m_iVender == SMART_BOX) {
			layoutContent = (LinearLayout)inf.inflate(R.layout.search_list_self_box, null);
		} else {
			layoutContent = (LinearLayout)inf.inflate(R.layout.search_list_self, null);
		}
		layoutContent.setLayoutParams(lp);
		addViewKaraoke(m_layoutContent, layoutContent);
		
		Button btnSubMainSing = (Button)findViewById(R.id.btn_sub_main_sing);
		LinearLayout.LayoutParams lpOff = new LinearLayout.LayoutParams(0, LayoutParams.MATCH_PARENT);
		lpOff.setMargins(0, PixelFromDP(12), 0, PixelFromDP(12));
		lpOff.weight = 3;
		btnSubMainSing.setLayoutParams(lpOff);
		
		Button btnSelf = (Button)findViewById(R.id.btn_search_sub_self);
		btnSelf.setBackgroundResource(R.drawable.tab_focus_on);
		
		LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_sing);
		SettingListBackground(layoutList, R.drawable.search_bg_none);
		
		remote.m_iState = STATE_SEARCH_SUB_MENU;
		remote.m_iSearchSubMenuFocus = 1;
		remote.m_iSearchSelfFocus = 1;
		remote.m_iSearchLetterFocusX = 0;
		remote.m_iSearchLetterFocusY = 1;
		remote.m_iSearchListFocus = 1;
		m_iSearchSelfMode = TITLE;
		m_iSearchLetterMode = KOR;
		m_bIsFocusedOnBook = false;
	}

	public void setMain() {
		video.playBackground(m_strMainBackgroundVideoUrl);
		
		TextView txtSingTitle = (TextView)findViewById(R.id.txt_home_sing_title);
		TextView txtSingArtist = (TextView)findViewById(R.id.txt_home_sing_artist);
		txtSingTitle.setText(requestKP.m_strMainSingTitle);
		txtSingArtist.setText(requestKP.m_strMainSingArtist);
		
		TextView txtListenTitle = (TextView)findViewById(R.id.txt_home_listen_title);
		TextView txtListenArtist = (TextView)findViewById(R.id.txt_home_listen_artist);
		txtListenTitle.setText(requestKP.m_strMainListenTitle);
		txtListenArtist.setText("by " + requestKP.m_strMainListenArtist);
		
		// 듣기 프로필 이미지
		m_imgProfileHome = (ImageView)findViewById(R.id.img_main_listen_profile);
		if (util_profileHome != null) {
			if (util_profileHome.m_bitMap != null) {
				util_profileHome.m_bitMap.recycle();
			}
		}
		util_profileHome = new Util(karaokeHandler);
		util_profileHome.setUtilType(UTIL_PROFILE_IMAGE_HOME);
		util_profileHome.setImageUrl(requestKP.m_strMainListenProfileUrl);
		util_profileHome.start();
		
		// 이벤트 배너
		util = new Util(karaokeHandler);
		util.setUtilType(UTIL_MAIN_EVENT_IMAGE);
		util.setImageUrl(requestKP.m_strMainEventImgUrl);
		util.start();
		
		// 퀵버튼2
		util_mainQuickBtnOff02 = new Util(karaokeHandler);
		util_mainQuickBtnOff02.setUtilType(UTIL_MAIN_QUICK_IMAGE_02_OFF);
		util_mainQuickBtnOff02.setImageUrl(requestKP.m_strMainQuickBtnOffUrl02);
		util_mainQuickBtnOff02.start();
		
		util_mainQuickBtnOn02 = new Util(karaokeHandler);
		util_mainQuickBtnOn02.setUtilType(UTIL_MAIN_QUICK_IMAGE_02_ON);
		util_mainQuickBtnOn02.setImageUrl(requestKP.m_strMainQuickBtnOnUrl02);
		util_mainQuickBtnOn02.start();
		
		Button btnCustomer = (Button)findViewById(R.id.btn_main_notice);
		btnCustomer.setText(requestKP.m_strMainCustomerTitle);
		
		TextView txtBottomProduct = (TextView)findViewById(R.id.txt_bottom_product);
		
		// KY로고
		
		util_kyLogo = new Util(karaokeHandler);
		util_kyLogo.setUtilType(UTIL_KY_LOGO);
		util_kyLogo.setImageUrl(requestKP.m_strKYLogoUrl);
		util_kyLogo.start();
		
		// 마이크 이미지
		
		if (m_iVender == SMART_BOX) {
			util_MIC = new Util(karaokeHandler);
			util_MIC.setUtilType(UTIL_MIC);
			util_MIC.setImageUrl(MIC_URL_BOX);
			util_MIC.start();
		} else {
			util_MIC = new Util(karaokeHandler);
			util_MIC.setUtilType(UTIL_MIC);
			util_MIC.setImageUrl(MIC_URL_STB);
			util_MIC.start();
		}
		
		LOG(CLASS, "TICKET (Main) = " + m_strPassType);
		
		if (m_strHasTicket.equals(TICKET_MONTH)) {
			txtBottomProduct.setText("월정액 이용권 사용 중");
		} else if (m_strHasTicket.equals(TICKET_DAY)) {
			txtBottomProduct.setText("1일 이용권 사용 중 " + requestVASS.m_strTicketDayAvailableDate);
		} else {
			if (m_bCouponUser) {
				txtBottomProduct.setText(m_strCouponTerm);
			} else {
				txtBottomProduct.setText("사용 중인 이용권이 없습니다.");
			}
		}
	}
	
	@SuppressLint("CutPasteId")
	@SuppressWarnings("deprecation")
	public void setListenItem(LinearLayout item) {
		if (arrayListenListItem.size() <= m_iListenItemCount) {
			return;
		}
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutItem = (LinearLayout)inf.inflate(R.layout.listen_item, null);
		layoutItem.setLayoutParams(lp);
		addViewKaraoke(item, layoutItem);
		
		// 프로필 이미지
		switch(m_iSetListenItemCount)
		{
		case 0 :
			m_imgProfile01 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile01 != null) {
				if (util_profile01.m_bitMap != null) {
					util_profile01.m_bitMap.recycle();
				}
			}
			util_profile01 = new Util(karaokeHandler);
			util_profile01.setUtilType(UTIL_PROFILE_IMAGE_1);
			util_profile01.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile01.start();
			break;
		case 1 :
			m_imgProfile02 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile02 != null) {
				if (util_profile02.m_bitMap != null) {
					util_profile02.m_bitMap.recycle();
				}
			}
			util_profile02 = new Util(karaokeHandler);
			util_profile02.setUtilType(UTIL_PROFILE_IMAGE_2);
			util_profile02.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile02.start();
			break;
		case 2 :
			m_imgProfile03 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile03 != null) {
				if (util_profile03.m_bitMap != null) {
					util_profile03.m_bitMap.recycle();
				}
			}
			util_profile03 = new Util(karaokeHandler);
			util_profile03.setUtilType(UTIL_PROFILE_IMAGE_3);
			util_profile03.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile03.start();
			break;
		case 3 :
			m_imgProfile04 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile04 != null) {
				if (util_profile04.m_bitMap != null) {
					util_profile04.m_bitMap.recycle();
				}
			}
			util_profile04 = new Util(karaokeHandler);
			util_profile04.setUtilType(UTIL_PROFILE_IMAGE_4);
			util_profile04.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile04.start();
			break;
		case 4 :
			m_imgProfile05 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile05 != null) {
				if (util_profile05.m_bitMap != null) {
					util_profile05.m_bitMap.recycle();
				}
			}
			util_profile05 = new Util(karaokeHandler);
			util_profile05.setUtilType(UTIL_PROFILE_IMAGE_5);
			util_profile05.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile05.start();
			break;
		case 5 :
			m_imgProfile06 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile06 != null) {
				if (util_profile06.m_bitMap != null) {
					util_profile06.m_bitMap.recycle();
				}
			}
			util_profile06 = new Util(karaokeHandler);
			util_profile06.setUtilType(UTIL_PROFILE_IMAGE_6);
			util_profile06.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile06.start();
			break;
		case 6 :
			m_imgProfile07 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile07 != null) {
				if (util_profile07.m_bitMap != null) {
					util_profile07.m_bitMap.recycle();
				}
			}
			util_profile07 = new Util(karaokeHandler);
			util_profile07.setUtilType(UTIL_PROFILE_IMAGE_7);
			util_profile07.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile07.start();
			break;
		case 7 :
			m_imgProfile08 = (ImageView)layoutItem.findViewById(R.id.img_listen_item_profile_pic);
			if (util_profile08 != null) {
				if (util_profile08.m_bitMap != null) {
					util_profile08.m_bitMap.recycle();
				}
			}
			util_profile08 = new Util(karaokeHandler);
			util_profile08.setUtilType(UTIL_PROFILE_IMAGE_8);
			util_profile08.setImageUrl(arrayListenListItem.get(m_iListenItemCount).mStrProfileImageUrl);
			util_profile08.start();
			break;
		}
		
		// 제목 - 가수
		TextView txt_title = (TextView)layoutItem.findViewById(R.id.txt_listen_title);
		txt_title.setText(arrayListenListItem.get(m_iListenItemCount).mStrTitle + " - " + arrayListenListItem.get(m_iListenItemCount).mStrArtist);
		
		// 닉네임
		TextView txtNick = (TextView)layoutItem.findViewById(R.id.txt_listen_nickname);
		txtNick.setText("by " + arrayListenListItem.get(m_iListenItemCount).mStrNick);
		
		// 추천 횟수
		TextView txtRecommand = (TextView)layoutItem.findViewById(R.id.txt_listen_recommand);
		txtRecommand.setText(arrayListenListItem.get(m_iListenItemCount).mStrRecommandCount);
		
		// 듣기 횟수
		String strListenCount = arrayListenListItem.get(m_iListenItemCount).mStrListenCount;
		if (strListenCount.length() < 6) {
			while(strListenCount.length() < 6) {
				strListenCount = "0" + strListenCount;
			}
		}
		
		TextView txtListen = (TextView)layoutItem.findViewById(R.id.txt_listen_count);
		txtListen.setText(strListenCount);
		
		// 등록일
		TextView txtDate = (TextView)layoutItem.findViewById(R.id.txt_listen_day);
		txtDate.setText(arrayListenListItem.get(m_iListenItemCount).mStrDate);
		
		m_iSetListenItemCount++;
		m_iListenItemCount++;
	}

	@SuppressLint("CutPasteId")
	@SuppressWarnings("deprecation")
	public void setListenOtherItem(LinearLayout item) {
		if (arrayListenListItem.size() <= m_iListenOtherItemCount) {
			return;
		}
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutItem = (LinearLayout)inf.inflate(R.layout.listen_other_profile, null);
		layoutItem.setLayoutParams(lp);
		addViewKaraoke(item, layoutItem);
		
		// 프로필 이미지
		switch(m_iSetListenOtherItemCount)
		{
		case 0 :
			m_imgProfile01 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile01 != null) {
				if (util_profile01.m_bitMap != null) {
					util_profile01.m_bitMap.recycle();
				}
			}
			util_profile01 = new Util(karaokeHandler);
			util_profile01.setUtilType(UTIL_PROFILE_IMAGE_1);
			util_profile01.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile01.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 1 :
			m_imgProfile02 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile02 != null) {
				if (util_profile02.m_bitMap != null) {
					util_profile02.m_bitMap.recycle();
				}
			}
			util_profile02 = new Util(karaokeHandler);
			util_profile02.setUtilType(UTIL_PROFILE_IMAGE_2);
			util_profile02.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile02.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 2 :
			m_imgProfile03 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile03 != null) {
				if (util_profile03.m_bitMap != null) {
					util_profile03.m_bitMap.recycle();
				}
			}
			util_profile03 = new Util(karaokeHandler);
			util_profile03.setUtilType(UTIL_PROFILE_IMAGE_3);
			util_profile03.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile03.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 3 :
			m_imgProfile04 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile04 != null) {
				if (util_profile04.m_bitMap != null) {
					util_profile04.m_bitMap.recycle();
				}
			}
			util_profile04 = new Util(karaokeHandler);
			util_profile04.setUtilType(UTIL_PROFILE_IMAGE_4);
			util_profile04.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile04.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 4 :
			m_imgProfile05 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile05 != null) {
				if (util_profile05.m_bitMap != null) {
					util_profile05.m_bitMap.recycle();
				}
			}
			util_profile05 = new Util(karaokeHandler);
			util_profile05.setUtilType(UTIL_PROFILE_IMAGE_5);
			util_profile05.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile05.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 5 :
			m_imgProfile06 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile06 != null) {
				if (util_profile06.m_bitMap != null) {
					util_profile06.m_bitMap.recycle();
				}
			}
			util_profile06 = new Util(karaokeHandler);
			util_profile06.setUtilType(UTIL_PROFILE_IMAGE_6);
			util_profile06.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile06.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 6 :
			m_imgProfile07 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile07 != null) {
				if (util_profile07.m_bitMap != null) {
					util_profile07.m_bitMap.recycle();
				}
			}
			util_profile07 = new Util(karaokeHandler);
			util_profile07.setUtilType(UTIL_PROFILE_IMAGE_7);
			util_profile07.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile07.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		case 7 :
			m_imgProfile08 = (ImageView)layoutItem.findViewById(R.id.img_listen_other_profile);
			if (util_profile08 != null) {
				if (util_profile08.m_bitMap != null) {
					util_profile08.m_bitMap.recycle();
				}
			}
			util_profile08 = new Util(karaokeHandler);
			util_profile08.setUtilType(UTIL_PROFILE_IMAGE_8);
			util_profile08.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
			util_profile08.start();
			arrListeningOthersRecordID.add(arrayListenListItem.get(m_iListenOtherItemCount).mStrRecordID);
			break;
		}
		
		// 닉네임
		TextView txtNick = (TextView)layoutItem.findViewById(R.id.txt_listen_other_profile_nick);
		txtNick.setText("by " + arrayListenListItem.get(m_iListenOtherItemCount).mStrNick);
		
		m_iSetListenOtherItemCount++;
		m_iListenOtherItemCount++;
	}

	public void setListeningState() {
		HideMenu();
		
		// 녹음곡 재생 상태 레이아웃 출력
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutListen = (LinearLayout)inf.inflate(R.layout.listening, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutListen, param);
		
		ImageView imgProfile = (ImageView)findViewById(R.id.img_listening_profile);
		
		// 프로필 이미지
		if (m_iPaneState == HOME) {
			imgProfile.setImageBitmap(util_profileHome.m_bitMap);
		} else {
			if (remote.m_iSubMainMenuFocus != 3) {
				switch(remote.m_iListenListFocusX)
				{
				case 1 :
					if (remote.m_iListenListFocusY == 1) {
						imgProfile.setImageBitmap(util_profile01.m_bitMap);
					} else {
						imgProfile.setImageBitmap(util_profile05.m_bitMap);
					}
					break;
				case 2 :
					if (remote.m_iListenListFocusY == 1) {
						imgProfile.setImageBitmap(util_profile02.m_bitMap);
					} else {
						imgProfile.setImageBitmap(util_profile06.m_bitMap);
					}
					break;
				case 3 :
					if (remote.m_iListenListFocusY == 1) {
						imgProfile.setImageBitmap(util_profile03.m_bitMap);
					} else {
						imgProfile.setImageBitmap(util_profile07.m_bitMap);
					}
					break;
				case 4 :
					if (remote.m_iListenListFocusY == 1) {
						imgProfile.setImageBitmap(util_profile04.m_bitMap);
					} else {
						imgProfile.setImageBitmap(util_profile08.m_bitMap);
					}
					break;
				}
			} else {
				imgProfile.setImageBitmap(util_myRecordProfile.m_bitMap);
			}
		}
		
		TextView txt_title = (TextView)findViewById(R.id.txt_listening_title);
		txt_title.setText(requestKP.listenItem.mStrTitle + " - " + requestKP.listenItem.mStrArtist);
		
		TextView txtNick = (TextView)findViewById(R.id.txt_listening_nick);
		txtNick.setText("by " + requestKP.listenItem.mStrNick);
		
		String strListenCount = requestKP.listenItem.mStrListenCount;
		if (strListenCount.length() < 6) {
			while(strListenCount.length() < 6) {
				strListenCount = "0" + strListenCount;
			}
		}
		
		TextView txtCount = (TextView)findViewById(R.id.txt_listening_listen_count);
		txtCount.setText(strListenCount);
		
//		TextView txtDate = (TextView)findViewById(R.id.txt_listening_date);
//		txtDate.setText(requestKP.listenItem.mStrDate);
		
		TextView txtRecommand = (TextView)findViewById(R.id.txt_listening_recommand);
		txtRecommand.setText(requestKP.listenItem.mStrRecommandCount);
		
		// 하단 첫번째 가이드를 '다른 녹음곡 보기' 로 변경
		SetBottomGuideText01(R.drawable.common_btn_arr_down, "다른 녹음곡 보기");
	}

	public void setListeningOtherState() {
		HideMenu();
		
		// 녹음곡 재생 상태 레이아웃 출력
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutListen = (LinearLayout)inf.inflate(R.layout.listening, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutListen, param);
		
		ImageView imgProfileOther = (ImageView)findViewById(R.id.img_listening_profile);
		switch(remote.m_iListenOther)
		{
		case 1 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile01.m_bitMap);
			break;
		case 2 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile02.m_bitMap);
			break;
		case 3 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile03.m_bitMap);
			break;
		case 4 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile04.m_bitMap);
			break;
		case 5 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile05.m_bitMap);
			break;
		case 6 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile06.m_bitMap);
			break;
		case 7 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile07.m_bitMap);
			break;
		case 8 :
			imgProfileOther.setImageBitmap(null);
			imgProfileOther.setImageBitmap(util_profile08.m_bitMap);
			break;
		}
		/*
		m_imgProfileOther = (ImageView)findViewById(R.id.img_listening_profile);
		if (util_profileListeningOther != null) {
			if (util_profileListeningOther.m_bitMap != null) {
				util_profileListeningOther.m_bitMap.recycle();
			}
		}
		util_profileListeningOther = new Util(karaokeHandler);
		util_profileListeningOther.setUtilType(UTIL_PROFILE_IMAGE_OTHER);
		util_profileListeningOther.setImageUrl(arrayListenListItem.get(m_iListenOtherItemCount).mStrProfileImageUrl);
		util_profileListeningOther.start();
		*/
		
		TextView txt_title = (TextView)findViewById(R.id.txt_listening_title);
		txt_title.setText(requestKP.listenItem.mStrTitle + " - " + requestKP.listenItem.mStrArtist);
		
		TextView txtNick = (TextView)findViewById(R.id.txt_listening_nick);
		txtNick.setText("by " + requestKP.listenItem.mStrNick);
		
		String strListenCount = requestKP.listenItem.mStrListenCount;
		if (strListenCount.length() < 6) {
			while(strListenCount.length() < 6) {
				strListenCount = "0" + strListenCount;
			}
		}
		
		TextView txtCount = (TextView)findViewById(R.id.txt_listening_listen_count);
		txtCount.setText(strListenCount);
		
//		TextView txtDate = (TextView)findViewById(R.id.txt_listening_date);
//		txtDate.setText(requestKP.listenItem.mStrDate);
		
		TextView txtRecommand = (TextView)findViewById(R.id.txt_listening_recommand);
		txtRecommand.setText(requestKP.listenItem.mStrRecommandCount);
		
		// 하단 첫번째 가이드를 '다른 녹음곡 보기' 로 변경
		SetBottomGuideText01(R.drawable.common_btn_arr_down, "다른 녹음곡 보기");
	}

	@SuppressWarnings("deprecation")
	public void setListenOtherPage() {
		remote.m_iState = STATE_LISTENING_OTEHR;
		remote.m_iListenOther = 1;
		remote.m_iListenOtherBefore = 1;
		m_iCurrentListenOtherListPage = 1;
		m_iCurrentViewListenOtherListPage = 1;
		
		// 하단 첫번째 가이드를 '다른 녹음곡 닫기' 로 변경
		SetBottomGuideText01(R.drawable.common_btn_back_02, "다른 녹음곡 닫기");
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutListeningOther = (LinearLayout)inf.inflate(R.layout.listen_other, null);
		
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutListeningOther, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	
	    m_iSetListenOtherItemCount = 0;
	    m_iListenOtherItemCount = 0;
	    
	    // 총 페이지가 1페이지 이상이면 좌우 화살표 있는 배경으로 전환
	    LinearLayout layoutOther = (LinearLayout)findViewById(R.id.layout_listen_other);
	    
	    if (m_iTotalListenOtherListPage > 1) {
	    	layoutOther.setBackgroundResource(R.drawable.listen_play_other_bg_narrow);
	    } else {
	    	layoutOther.setBackgroundResource(R.drawable.listen_play_other_bg);
	    }
	
	    arrListeningOthersRecordID.clear();
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_01));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_02));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_03));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_04));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_05));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_06));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_07));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_08));
	}

	@SuppressWarnings("deprecation")
	public void setCustomerDetailContent() {
		remote.m_iState = STATE_CUSTOMER_LIST_DETAIL;
		m_iCurrentCustomerListDetailPage = 1;

		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);

		LinearLayout layoutContent = (LinearLayout)inf.inflate(R.layout.customer_list_detail, null);
		layoutContent.setLayoutParams(lp);
		addViewKaraoke(m_layoutContent, layoutContent);
		
		m_strCustomerListDetailTitle = requestKP.m_strCustomerDetailTitle;
		
		if (remote.m_iCustomerSubMenuFocus == 1) {
			if (m_strEventDetailType.equals("E")) {
				m_bIsEventDetail = true;
				m_strCustomerListDetailDate = requestKP.m_strEventDetailTerm;
				m_iCustomerListDetailTotalPage = 1;
			} else {
				m_bIsEventDetail = false;
				m_strCustomerListDetailDate = requestKP.m_strCustomerDetailDate;
				m_iCustomerListDetailTotalPage = arrayCustomerDetailUrl.size();
			}
		} else {
			m_bIsEventDetail = false;
			m_strCustomerListDetailDate = requestKP.m_strCustomerDetailDate;
			m_iCustomerListDetailTotalPage = arrayCustomerDetailUrl.size();
		}
		
		TextView txt_title = (TextView)findViewById(R.id.txt_customer_detail_title);
		TextView txtDate = (TextView)findViewById(R.id.txt_customer_detail_date);
		TextView txtPage = (TextView)findViewById(R.id.txt_customer_detail_page);
		
		txt_title.setText(m_strCustomerListDetailTitle);
		txtDate.setText(m_strCustomerListDetailDate);
		
		txtPage.setText(String.valueOf(m_iCurrentCustomerListDetailPage) + "/" + String.valueOf(m_iCustomerListDetailTotalPage));
		
		util = new Util(karaokeHandler);
		if (m_bIsEventDetail) {
			util.setUtilType(UTIL_EVENT_DETAIL_ON);
		} else {
			util.setUtilType(UTIL_CUSTOMER_DETAIL_IMAGE);
		}
		util.setImageUrl(arrayCustomerDetailUrl.get(m_iCustomerListDetailPage - 1));
		util.start();
	}
	
	public void moveSongListPage() {
		LOG(CLASS, "moveSongListPage >");
		
		TextView txtRank1 = (TextView)findViewById(R.id.txt_sing_rank_1);
		TextView txtRank2 = (TextView)findViewById(R.id.txt_sing_rank_2);
		TextView txtRank3 = (TextView)findViewById(R.id.txt_sing_rank_3);
		TextView txtRank4 = (TextView)findViewById(R.id.txt_sing_rank_4);
		TextView txtRank5 = (TextView)findViewById(R.id.txt_sing_rank_5);
		TextView txtRank6 = (TextView)findViewById(R.id.txt_sing_rank_6);
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		switch(remote.m_iSingSubMenuFocus)
		{
		case 1 :
			txtRank1.setVisibility(View.VISIBLE);
			txtRank2.setVisibility(View.VISIBLE);
			txtRank3.setVisibility(View.VISIBLE);
			txtRank4.setVisibility(View.VISIBLE);
			txtRank5.setVisibility(View.VISIBLE);
			txtRank6.setVisibility(View.VISIBLE);
			
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			break;
		case 2 :
			txtRank1.setVisibility(View.GONE);
			txtRank2.setVisibility(View.GONE);
			txtRank3.setVisibility(View.GONE);
			txtRank4.setVisibility(View.GONE);
			txtRank5.setVisibility(View.GONE);
			txtRank6.setVisibility(View.GONE);
			
			imgIcon1.setImageResource(R.drawable.common_bullet_new);
			imgIcon2.setImageResource(R.drawable.common_bullet_new);
			imgIcon3.setImageResource(R.drawable.common_bullet_new);
			imgIcon4.setImageResource(R.drawable.common_bullet_new);
			imgIcon5.setImageResource(R.drawable.common_bullet_new);
			imgIcon6.setImageResource(R.drawable.common_bullet_new);
			break;
		case 3 :
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			break;
		}
		
		if (!m_bIsGenre) {
			TextView txtPage = (TextView)findViewById(R.id.txt_sing_sub_page);
			txtPage.setText("page " + String.valueOf(m_iCurrentViewSongListPage) + "/" + String.valueOf(m_iTotalSongListPage));
			
			m_iSongListItemCount = (m_iCurrentSongListPage - 1) * 6;
		} else {
			TextView txtPage = (TextView)findViewById(R.id.txt_sing_sub_genre_page);
			txtPage.setText("page " + String.valueOf(m_iCurrentViewSongListPage) + "/" + String.valueOf(m_iTotalSongListPage));
			
			m_iSongListItemCount = (m_iCurrentSongListPage - 1) * 5;
		}
		
		TextView txt_rank = null, txt_number = null, txt_title = null, txt_singer = null;
		ImageView imgIcon = null;
		
		arrayIsFavor.clear();
		
		int iViewCount = 1;
		while(iViewCount < 7) {
			switch(iViewCount)
			{
			case 1 :
				txt_rank = txtRank1;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_1);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_1);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_1);
				imgIcon = imgIcon1;
				break;
			case 2 :
				txt_rank = txtRank2;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_2);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_2);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_2);
				imgIcon = imgIcon2;
				break;
			case 3 :
				txt_rank = txtRank3;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_3);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_3);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_3);
				imgIcon = imgIcon3;
				break;
			case 4 :
				txt_rank = txtRank4;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_4);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_4);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_4);
				imgIcon = imgIcon4;
				break;
			case 5 :
				txt_rank = txtRank5;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_5);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_5);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_5);
				imgIcon = imgIcon5;
				break;
			case 6 :
				txt_rank = txtRank6;
				txt_number = (TextView)findViewById(R.id.txt_sing_number_6);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_6);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_6);
				imgIcon = imgIcon6;
				break;
			}
			
			if (m_iSongListItemCount == arraySongListItem.size()) {
				txt_rank.setText("");
				txt_number.setText("");
				txt_title.setText("");
				txt_singer.setText("");
				imgIcon.setVisibility(View.INVISIBLE);
			} else {
				if (m_iRequestPage == 2) {
					txt_rank.setText(String.valueOf(m_iSongListItemCount + 1 + 60) + "위");
				} else {
					txt_rank.setText(String.valueOf(m_iSongListItemCount + 1) + "위");
				}
				
				txt_number.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongId);
				txt_title.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongTitle);
				txt_singer.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongArtist);
				imgIcon.setVisibility(View.VISIBLE);
				if (arraySongListItem.get(m_iSongListItemCount).m_strFavor.equals("Y")) {
					imgIcon.setImageResource(R.drawable.common_bullet_favor_off);
				}
				arrayIsFavor.add(arraySongListItem.get(m_iSongListItemCount).m_strFavor);
				
				m_iSongListItemCount++;
			}
			
			iViewCount++;
			
			if (m_bIsGenre) {
				if (iViewCount == 6) {
					txt_number = (TextView)findViewById(R.id.txt_sing_number_6);
					txt_number.setText("");
					return;
				}
			}
		}
		
		LOG(CLASS, "moveSongListPage <");
	}

	@SuppressWarnings("deprecation")
	public void moveListenListPage() {
		m_iSetListenItemCount = 0;
		
		m_iListenItemCount = (m_iCurrentListenListPage - 1) * 8;
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		LinearLayout layoutContent = (LinearLayout)inf.inflate(R.layout.listen_list, null);
		layoutContent.setLayoutParams(lp);
		addViewKaraoke(m_layoutContent, layoutContent);
		
		LinearLayout layoutItem1 = (LinearLayout)inf.inflate(R.layout.listen_item, null);
		layoutItem1.setLayoutParams(lp);
		LinearLayout layoutListItem1 = (LinearLayout)findViewById(R.id.layout_listen_list_1);
		addViewKaraoke(layoutListItem1, layoutItem1);
		
		if (remote.m_iSubMainMenuFocus == 2) {
			TextView txtTotalPage = (TextView)findViewById(R.id.txt_listen_sub_page);
			txtTotalPage.setText("page " + String.valueOf(m_iCurrentViewListenListPage) + "/" + String.valueOf(m_iTotalListenListPage));
		} else {
			TextView txtTotalPage = (TextView)findViewById(R.id.txt_my_sub_page);
			txtTotalPage.setText("page " + String.valueOf(m_iCurrentViewListenListPage) + "/" + String.valueOf(m_iTotalListenListPage));
		}
		
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_1));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_2));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_3));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_4));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_5));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_6));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_7));
		setListenItem((LinearLayout)findViewById(R.id.layout_listen_list_8));
	}

	public void moveListenOtherPage() {
		arrListeningOthersRecordID.clear();
		m_iSetListenOtherItemCount = 0;
	    m_iListenOtherItemCount = (m_iCurrentListenOtherListPage - 1) * 8;
	
	    setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_01));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_02));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_03));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_04));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_05));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_06));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_07));
		setListenOtherItem((LinearLayout)findViewById(R.id.layout_listen_other_08));
	}

	public void moveMyListPage() {
		LOG(CLASS, "moveMyListPage >");
		
		TextView txtRank1 = (TextView)findViewById(R.id.txt_sing_rank_1);
		TextView txtRank2 = (TextView)findViewById(R.id.txt_sing_rank_2);
		TextView txtRank3 = (TextView)findViewById(R.id.txt_sing_rank_3);
		TextView txtRank4 = (TextView)findViewById(R.id.txt_sing_rank_4);
		TextView txtRank5 = (TextView)findViewById(R.id.txt_sing_rank_5);
		TextView txtRank6 = (TextView)findViewById(R.id.txt_sing_rank_6);
		
		txtRank1.setVisibility(View.GONE);
		txtRank2.setVisibility(View.GONE);
		txtRank3.setVisibility(View.GONE);
		txtRank4.setVisibility(View.GONE);
		txtRank5.setVisibility(View.GONE);
		txtRank6.setVisibility(View.GONE);
		
		ImageView imgIcon1 = (ImageView)findViewById(R.id.img_sing_icon_1);
		ImageView imgIcon2 = (ImageView)findViewById(R.id.img_sing_icon_2);
		ImageView imgIcon3 = (ImageView)findViewById(R.id.img_sing_icon_3);
		ImageView imgIcon4 = (ImageView)findViewById(R.id.img_sing_icon_4);
		ImageView imgIcon5 = (ImageView)findViewById(R.id.img_sing_icon_5);
		ImageView imgIcon6 = (ImageView)findViewById(R.id.img_sing_icon_6);
		
		switch(remote.m_iMySubMenuFocus)
		{
		case 1 :
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			break;
		case 2 :
			imgIcon1.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon2.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon3.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon4.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon5.setImageResource(R.drawable.common_bullet_note_off);
			imgIcon6.setImageResource(R.drawable.common_bullet_note_off);
			break;
		}
		
		TextView txtPage = (TextView)findViewById(R.id.txt_my_sub_page);
		txtPage.setText("page " + String.valueOf(m_iCurrentViewSongListPage) + "/" + String.valueOf(m_iTotalSongListPage));
			
		m_iSongListItemCount = (m_iCurrentSongListPage - 1) * 6;
		
		TextView txt_number = null, txt_title = null, txt_singer = null;
		ImageView imgIcon = null;
		
		arrayIsFavor.clear();
		
		int iViewCount = 1;
		while(iViewCount < 7) {
			switch(iViewCount)
			{
			case 1 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_1);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_1);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_1);
				imgIcon = imgIcon1;
				break;
			case 2 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_2);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_2);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_2);
				imgIcon = imgIcon2;
				break;
			case 3 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_3);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_3);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_3);
				imgIcon = imgIcon3;
				break;
			case 4 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_4);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_4);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_4);
				imgIcon = imgIcon4;
				break;
			case 5 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_5);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_5);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_5);
				imgIcon = imgIcon5;
				break;
			case 6 :
				txt_number = (TextView)findViewById(R.id.txt_sing_number_6);
				txt_title = (TextView)findViewById(R.id.txt_sing_title_6);
				txt_singer = (TextView)findViewById(R.id.txt_sing_singer_6);
				imgIcon = imgIcon6;
				break;
			}
			
			if (m_iSongListItemCount == arraySongListItem.size()) {
				txt_number.setText("");
				txt_title.setText("");
				txt_singer.setText("");
				imgIcon.setVisibility(View.INVISIBLE);
			} else {
				txt_number.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongId);
				txt_title.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongTitle);
				txt_singer.setText(arraySongListItem.get(m_iSongListItemCount).m_strSongArtist);
				imgIcon.setVisibility(View.VISIBLE);
				if (arraySongListItem.get(m_iSongListItemCount).m_strFavor.equals("Y")) {
					imgIcon.setImageResource(R.drawable.common_bullet_favor_off);
				}
				arrayIsFavor.add(arraySongListItem.get(m_iSongListItemCount).m_strFavor);
				
				m_iSongListItemCount++;
			}
			
			iViewCount++;
		}
		
		LOG(CLASS, "moveMyListPage <");
	}

	public void moveCustomerListPage() {
		LOG(CLASS, "moveCustomerListPage >");
		
		TextView txtPage = (TextView)findViewById(R.id.txt_customer_sub_page);
		txtPage.setText("page " + String.valueOf(m_iCurrentViewCustomerListPage) + "/" + String.valueOf(m_iTotalCustomerListPage));
			
		m_iCustomerListItemCount = (m_iCurrentCustomerListPage - 1) * 6;
		
		TextView txt_title = null, txtDate = null;
		ImageView imgStats = null;
		
		int iViewCount = 1;
		while(iViewCount < 7) {
			switch(iViewCount)
			{
			case 1 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_1);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_1);
				break;
			case 2 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_2);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_2);
				break;
			case 3 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_3);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_3);
				break;
			case 4 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_4);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_4);
				break;
			case 5 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_5);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_5);
				break;
			case 6 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_6);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_6);
				break;
			}
			
			if (remote.m_iCustomerSubMenuFocus == 1) {
				switch(iViewCount)
				{
				case 1 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_1);
					break;
				case 2 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_2);
					break;
				case 3 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_3);
					break;
				case 4 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_4);
					break;
				case 5 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_5);
					break;
				case 6 :
					imgStats = (ImageView)findViewById(R.id.img_customer_ing_6);
					break;
				}
			}
			
			if (m_iCustomerListItemCount == arrayCustomerListItem.size()) {
				txt_title.setText("");
				txtDate.setText("");
				
				if (remote.m_iCustomerSubMenuFocus == 1) {
					imgStats.setVisibility(View.INVISIBLE);
				}
			} else {
				txt_title.setText(arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerTitle);
				
				String strDate = "";
				
				if (remote.m_iCustomerSubMenuFocus == 1) {
					if (arrayCustomerListItem.get(m_iCustomerListItemCount).m_strEventStats.equals("null")) {
						imgStats.setVisibility(View.INVISIBLE);
					} else if (arrayCustomerListItem.get(m_iCustomerListItemCount).m_strEventStats.equals("Y")) {
						imgStats.setImageResource(R.drawable.event_stats_ing);
						imgStats.setVisibility(View.VISIBLE);
					} else if (arrayCustomerListItem.get(m_iCustomerListItemCount).m_strEventStats.equals("N")) {
						imgStats.setImageResource(R.drawable.event_stats_end);
						imgStats.setVisibility(View.VISIBLE);
					}
					
					if (!arrayCustomerListItem.get(m_iCustomerListItemCount).m_strEventTerm.equals("null")) {
						strDate = arrayCustomerListItem.get(m_iCustomerListItemCount).m_strEventTerm;
					} else {
						strDate = arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerDate;
					}
				} else {
					if (!arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerDate.equals("null")) {
						strDate = arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerDate;
					}
				}
				
				txtDate.setText(strDate);
				
				m_iCustomerListItemCount++;
			}
			
			iViewCount++;
		}
		
		LOG(CLASS, "moveCustomerListPage <");
	}
	
	public void moveEventListPage() {
		LOG(CLASS, "moveEventListPage >");
		
		TextView txtPage = (TextView)findViewById(R.id.txt_customer_sub_page);
		txtPage.setText("page " + String.valueOf(m_iCurrentViewCustomerListPage) + "/" + String.valueOf(m_iTotalCustomerListPage));
			
		m_iCustomerListItemCount = (m_iCurrentCustomerListPage - 1) * 6;
		
		TextView txt_title = null, txtDate = null;
		
		int iViewCount = 1;
		while(iViewCount < 7) {
			switch(iViewCount)
			{
			case 1 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_1);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_1);
				break;
			case 2 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_2);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_2);
				break;
			case 3 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_3);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_3);
				break;
			case 4 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_4);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_4);
				break;
			case 5 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_5);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_5);
				break;
			case 6 :
				txt_title = (TextView)findViewById(R.id.txt_customer_title_6);
				txtDate = (TextView)findViewById(R.id.txt_customer_date_6);
				break;
			}
			
			if (m_iCustomerListItemCount == arrayCustomerListItem.size()) {
				txt_title.setText("");
				txtDate.setText("");
			} else {
				txt_title.setText(arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerTitle);
				txtDate.setText(arrayCustomerListItem.get(m_iCustomerListItemCount).m_strCustomerDate);
				
				m_iCustomerListItemCount++;
			}
			
			iViewCount++;
		}
		
		LOG(CLASS, "moveEventListPage <");
	}

	public void moveSearchListPage() {
		LOG(CLASS, "moveSearchListPage >");
		
		// 직접검색 : 한 페이지 당 5개
		if (remote.m_iSearchSubMenuFocus == 1) {
			TextView txtPage = (TextView)findViewById(R.id.txt_search_self_page);
			txtPage.setVisibility(View.VISIBLE);
			txtPage.setText("page " + String.valueOf(m_iCurrentViewSearchListPage) + "/" + String.valueOf(m_iTotalSearchListPage));
			m_iSearchListItemCount = (m_iCurrentSearchListPage - 1) * 5;
		// 색인검색 : 한 페이지 당 4개
		} else {
			TextView txtPage = null;
			if (m_iSearchLetterMode == KOR) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_kor_page);
			} else if (m_iSearchLetterMode == ENG) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_eng_page);
			} else if (m_iSearchLetterMode == NUM) {
				txtPage = (TextView)findViewById(R.id.txt_search_letter_num_page);
			}
			
			txtPage.setVisibility(View.VISIBLE);
			txtPage.setText("page " + String.valueOf(m_iCurrentViewSearchListPage) + "/" + String.valueOf(m_iTotalSearchListPage));
			m_iSearchListItemCount = (m_iCurrentSearchListPage - 1) * 4;
		}
		
		TextView txt_number = null;
		TextView txt_title = null;
		TextView txt_singer = null;
		ImageView imgIcon = null;
		
		arrayIsFavor.clear();
		
		int iViewCount = 1;
		while(iViewCount < 6) {
			switch(iViewCount)
			{
			case 1 :
				if (remote.m_iSearchSubMenuFocus == 1) {
					txt_number = (TextView)findViewById(R.id.txt_search_self_number_1);
					txt_title = (TextView)findViewById(R.id.txt_search_self_title_1);
					txt_singer = (TextView)findViewById(R.id.txt_search_self_singer_1);
					imgIcon = (ImageView)findViewById(R.id.img_search_self_icon_1);
				} else {
					txt_number = (TextView)findViewById(R.id.txt_search_letter_number_1);
					txt_title = (TextView)findViewById(R.id.txt_search_letter_title_1);
					txt_singer = (TextView)findViewById(R.id.txt_search_letter_singer_1);
					imgIcon = (ImageView)findViewById(R.id.img_search_letter_icon_1);
				}
				break;
			case 2 :
				if (remote.m_iSearchSubMenuFocus == 1) {
					txt_number = (TextView)findViewById(R.id.txt_search_self_number_2);
					txt_title = (TextView)findViewById(R.id.txt_search_self_title_2);
					txt_singer = (TextView)findViewById(R.id.txt_search_self_singer_2);
					imgIcon = (ImageView)findViewById(R.id.img_search_self_icon_2);
				} else {
					txt_number = (TextView)findViewById(R.id.txt_search_letter_number_2);
					txt_title = (TextView)findViewById(R.id.txt_search_letter_title_2);
					txt_singer = (TextView)findViewById(R.id.txt_search_letter_singer_2);
					imgIcon = (ImageView)findViewById(R.id.img_search_letter_icon_2);
				}
				break;
			case 3 :
				if (remote.m_iSearchSubMenuFocus == 1) {
					txt_number = (TextView)findViewById(R.id.txt_search_self_number_3);
					txt_title = (TextView)findViewById(R.id.txt_search_self_title_3);
					txt_singer = (TextView)findViewById(R.id.txt_search_self_singer_3);
					imgIcon = (ImageView)findViewById(R.id.img_search_self_icon_3);
				} else {
					txt_number = (TextView)findViewById(R.id.txt_search_letter_number_3);
					txt_title = (TextView)findViewById(R.id.txt_search_letter_title_3);
					txt_singer = (TextView)findViewById(R.id.txt_search_letter_singer_3);
					imgIcon = (ImageView)findViewById(R.id.img_search_letter_icon_3);
				}
				break;
			case 4 :
				if (remote.m_iSearchSubMenuFocus == 1) {
					txt_number = (TextView)findViewById(R.id.txt_search_self_number_4);
					txt_title = (TextView)findViewById(R.id.txt_search_self_title_4);
					txt_singer = (TextView)findViewById(R.id.txt_search_self_singer_4);
					imgIcon = (ImageView)findViewById(R.id.img_search_self_icon_4);
				} else {
					txt_number = (TextView)findViewById(R.id.txt_search_letter_number_4);
					txt_title = (TextView)findViewById(R.id.txt_search_letter_title_4);
					txt_singer = (TextView)findViewById(R.id.txt_search_letter_singer_4);
					imgIcon = (ImageView)findViewById(R.id.img_search_letter_icon_4);
				}
				break;
			case 5 :
				txt_number = (TextView)findViewById(R.id.txt_search_self_number_5);
				txt_title = (TextView)findViewById(R.id.txt_search_self_title_5);
				txt_singer = (TextView)findViewById(R.id.txt_search_self_singer_5);
				imgIcon = (ImageView)findViewById(R.id.img_search_self_icon_5);
				break;
			}
			
			if (m_iSearchListItemCount == arraySearchListItem.size()) {
				txt_number.setText("");
				txt_title.setText("");
				txt_singer.setText("");
				imgIcon.setVisibility(View.INVISIBLE);
			} else {
				txt_number.setText(arraySearchListItem.get(m_iSearchListItemCount).m_strSongId);
				txt_title.setText(arraySearchListItem.get(m_iSearchListItemCount).m_strSongTitle);
				txt_singer.setText(arraySearchListItem.get(m_iSearchListItemCount).m_strSongArtist);
				imgIcon.setVisibility(View.VISIBLE);
				if (arraySearchListItem.get(m_iSearchListItemCount).m_strFavor.equals("Y")) {
					imgIcon.setImageResource(R.drawable.common_bullet_favor_off);
				}
				arrayIsFavor.add(arraySearchListItem.get(m_iSearchListItemCount).m_strFavor);
				LOG(CLASS, "ADD Favor : " + arraySearchListItem.get(m_iSearchListItemCount).m_strSongId);
				
				m_iSearchListItemCount++;
			}
			
			iViewCount++;
			
			if (remote.m_iSearchSubMenuFocus == 2) {
				if (iViewCount == 5) {
					return;
				}
			}
		}
		
		LOG(CLASS, "moveSearchListPage <");
	}
	
	public void moveMyRecordListPage() {
		LOG(CLASS, "moveMyRecordListPage >");

		m_imgMyRecordProfile = (ImageView)findViewById(R.id.img_my_record_profile);
		TextView txtMyRecordHit = (TextView)findViewById(R.id.txt_my_record_hit);
		TextView txtMyRecordRecomman = (TextView)findViewById(R.id.txt_my_record_recommand);
		TextView txtMyRecordNick = (TextView)findViewById(R.id.txt_my_record_nickname);
		TextView txtMyRecordPhone = (TextView)findViewById(R.id.txt_my_record_phoneno);
		TextView txtMyRecordDate = (TextView)findViewById(R.id.txt_my_record_date);
		
		txtMyRecordPhone.setText(readKaraoke());
		if (util_myRecordProfile != null) {
			if (util_myRecordProfile.m_bitMap != null) {
				util_myRecordProfile.m_bitMap.recycle();
			}
		}
		util_myRecordProfile = new Util(karaokeHandler);
		util_myRecordProfile.setUtilType(UTIL_MY_RECORD_PROFILE_IMAGE);
		util_myRecordProfile.setImageUrl(requestKP.m_strMyProfileURL);
		util_myRecordProfile.start();
		
		if (requestKP.m_strMyHit.equals("null")) {
			txtMyRecordHit.setText("000000");
		} else {
			String strListenCount = requestKP.m_strMyHit;
			if (strListenCount.length() < 6) {
				while(strListenCount.length() < 6) {
					strListenCount = "0" + strListenCount;
				}
			}
			
			txtMyRecordHit.setText(strListenCount);
		}
		if (requestKP.m_strMyHeart.equals("null")) {
			txtMyRecordRecomman.setText("000000");
		} else {
			String strListenCount = requestKP.m_strMyHeart;
			if (strListenCount.length() < 6) {
				while(strListenCount.length() < 6) {
					strListenCount = "0" + strListenCount;
				}
			}
			
			txtMyRecordRecomman.setText(strListenCount);
		}
		
		if (requestKP.m_strMyNickName.equals("-")) {
			txtMyRecordNick.setText("");
		} else {
			txtMyRecordNick.setText(requestKP.m_strMyNickName);
		}
		
		txtMyRecordDate.setText(requestKP.m_strMyDate);
		
		m_iSetListenItemCount = 0;
		
		m_iListenItemCount = (m_iCurrentListenListPage - 1) * 6;
		
		TextView txtTotalPage = (TextView)findViewById(R.id.txt_my_sub_page);
		if (m_iTotalListenListPage == 0) {
		} else {
			txtTotalPage.setText("page " + String.valueOf(m_iCurrentViewListenListPage) + "/" + String.valueOf(m_iTotalListenListPage));
		}
		
		ImageView imgRecommand = null;
		TextView txtRecommandCount = null, txt_title = null, txtDate = null;
		
		int iViewCount = 1;
		while(iViewCount < 7) {
			switch(iViewCount)
			{
			case 1 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_1);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_1);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_1);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_1);
				break;
			case 2 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_2);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_2);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_2);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_2);
				break;
			case 3 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_3);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_3);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_3);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_3);
				break;
			case 4 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_4);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_4);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_4);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_4);
				break;
			case 5 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_5);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_5);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_5);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_5);
				break;
			case 6 :
				imgRecommand = (ImageView)findViewById(R.id.img_my_record_recommand_6);
				txtRecommandCount = (TextView)findViewById(R.id.txt_my_record_recommand_count_6);
				txt_title = (TextView)findViewById(R.id.txt_my_record_title_6);
				txtDate = (TextView)findViewById(R.id.txt_my_record_date_6);
				break;
			}
			
			if (m_iTotalListenListPage != 0) {
				if (m_iListenItemCount >= arrayListenListItem.size()) {
					imgRecommand.setVisibility(View.INVISIBLE);
					txtRecommandCount.setText("");
					txt_title.setText("");
					txtDate.setText("");
				} else {
					imgRecommand.setVisibility(View.VISIBLE);
					txtRecommandCount.setText(arrayListenListItem.get(m_iListenItemCount).mStrRecommandCount);
					txt_title.setText(arrayListenListItem.get(m_iListenItemCount).mStrTitle);
					txtDate.setText(arrayListenListItem.get(m_iListenItemCount).mStrDate);
				}
				
				m_iListenItemCount++;
			} else {
				//imgRecommand.setVisibility(View.INVISIBLE);
			}
			
			iViewCount++;
		}
		
		LOG(CLASS, "moveMyRecordListPage <");
	}

	@SuppressWarnings("deprecation")
	protected void SettingBaseLayout() {
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		
		// 홈
		m_layoutHome = (LinearLayout)inf.inflate(R.layout.main, null); 
		
		// 메인
		m_layoutList = (LinearLayout)inf.inflate(R.layout.list, null);
		
		// 고객센터 리스트
		m_layoutCustomerList = (LinearLayout)inf.inflate(R.layout.customer_list, null);
		m_layoutCustomerList.setLayoutParams(lp);
		
		// 고객센터 리스트_이벤트
		m_layoutCustomerListEvent = (LinearLayout)inf.inflate(R.layout.customer_list_event, null);
		m_layoutCustomerListEvent.setLayoutParams(lp);
	}

	protected void SettingListBackground(LinearLayout list, int background) {
		list.setBackgroundResource(background);
		m_iListBackgroundResourceID = background;
	}

	public void ShowMessageOk(int type, String title, String message) {
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutMessageOK = (LinearLayout)inf.inflate(R.layout.message_ok, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutMessageOK, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    TextView textTitle = (TextView)findViewById(R.id.txt_message_ok_title);
	    TextView textMessage = (TextView)findViewById(R.id.txt_message_ok_message);
	    
	    textTitle.setText(title);
	    textMessage.setText(message);
		
		m_bShowMessage = true;
		
		if (type == EXIT) {
			m_bIsExit = true;
		}
	}
	
	public void HideMessageBoxOk() {
		((ViewManager)m_layoutMessageOK.getParent()).removeView(m_layoutMessageOK);
		m_bShowMessage = false;
		
		// OK 메세지박스가 떠있으면서 직접검색 메뉴인 상태는 '검색어를 입력해주세요' 팝업인 경우임
		// 이 때는 팝업을 닫고 메뉴단을 새로 그려줘야 IME가 올라옴
		if (remote.m_iState == STATE_SEARCH_SELF) {
			displaySearchSelf(NONE);
		}
	}
	
	public void StartPlaying() {
		HideMenu();
		
		if (m_iVender != SMART_BOX) {
    		SetBottomGuideText01(R.drawable.common_btn_green, getString(R.string.menu_bottom_open));
    		LOG(CLASS, "MENU OPEN - GuideText 3");
    		
    		//if (arrPlayList.size() == 0) {
    			SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_stop_song)); // 재생이 시작됨 + 예약곡 없음 = 반주곡 중지
    		//}
    	} else {
    		SetBottomGuideText01(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_open));
    		LOG(CLASS, "MENU OPEN - GuideText 4");
    		
    		//if (arrPlayList.size() == 0) {
    			SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_stop_song)); // 재생이 시작됨 + 예약곡 없음 = 반주곡 중지
    		//}
    	}
    	
    	// 상단 곡번호 등록
    	SetTopNumber(m_strRequestPlaySongID);
    	LOG(CLASS, "TOP Number = " + m_strRequestPlaySongID);
	}
	
	public void StopPlaying(int engage) {
		if (m_bIsHiddenMenu) {
			ShowMenu();
		}
		
		HideBottomGuide01();
		
		Play playActivity = (Play)Play.ActivityPlay;
		if (playActivity != null) {
			if (engage == NEXT) {
				playActivity.finish();
			} else {
				playActivity.finish();
			}
		}
		
		/*
		 * 동영상 배경화면 사용할 시, 반주곡 중지하면서 멈춤
		 */
		if (video.isPlaying()) {
			if (engage == NEXT) {
				video.stopBackgroundVideo(m_strMainBackgroundVideoUrl, NEXT);
			} else {
				video.stopBackgroundVideo(m_strMainBackgroundVideoUrl, STOP);
			}
    	}
		
		if (m_iVender != SMART_BOX) {
    		if (arrPlayList.size() > 0) {
    			SetBottomGuideText02(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_start_song));	// 재생이 중지됨 = 반주곡 시작
    		} else {
    			HideBottomGuide02();
    		}
    	} else {
    		if (arrPlayList.size() > 0) {
    			SetBottomGuideText02(R.drawable.common_btn_green, getString(R.string.menu_bottom_start_song));	// 재생이 중지됨 = 반주곡 시작
    		} else {
    			HideBottomGuide02();
    		}
    	}
    	
    	SetTopNumber("00000");
	}
	
	protected void ShowMenu() {
		if (m_iPaneState == HOME) {
			LinearLayout layoutHide1 = (LinearLayout)m_layoutHome.findViewById(R.id.layout_home_main_menu2);
			LinearLayout layoutHide2 = (LinearLayout)m_layoutHome.findViewById(R.id.layout_home_event_menu);
			LinearLayout layoutHide3 = (LinearLayout)m_layoutHome.findViewById(R.id.layout_home_notice_menu);
			layoutHide1.setVisibility(View.VISIBLE);
			layoutHide2.setVisibility(View.VISIBLE);
			layoutHide3.setVisibility(View.VISIBLE);
			
			LinearLayout layoutHome = (LinearLayout)findViewById(R.id.layout_home);
			
			switch(remote.m_iMainMenuFocus)
			{
			case 1 :
			case 2 :
			case 3 :
			case 4 :
			case 5 :
				layoutHome.setBackgroundResource(R.drawable.main_bg1);
				break;
			case 6 :
				layoutHome.setBackgroundResource(R.drawable.main_bg2);
				break;
			case 7 :
				layoutHome.setBackgroundResource(R.drawable.main_bg3);
				break;
			case 8 :
				layoutHome.setBackgroundResource(R.drawable.main_bg4);
				break;
			case 9 :
				layoutHome.setBackgroundResource(R.drawable.main_bg5);
				break;
			case 10 :
				layoutHome.setBackgroundResource(R.drawable.main_bg6);
				break;
			case 11 :
				layoutHome.setBackgroundResource(R.drawable.main_bg7);
				break;
			}
			
			remote.m_iState = STATE_MAIN_MENU;
		} else {
			LinearLayout layoutShow1 = (LinearLayout)findViewById(R.id.layout_home_main_menu2);
			LinearLayout layoutShow2 = (LinearLayout)findViewById(R.id.layout_sub_menu);
			LinearLayout layoutShow3 = (LinearLayout)findViewById(R.id.layout_sing_list);
			layoutShow1.setVisibility(View.VISIBLE);
			layoutShow2.setVisibility(View.VISIBLE);
			layoutShow3.setVisibility(View.VISIBLE);
			
			LinearLayout layoutShow4 = (LinearLayout)findViewById(R.id.layout_sing);
			layoutShow4.setBackgroundResource(m_iListBackgroundResourceID);
			
			if (m_layoutListenListFocus != null) {
				m_layoutListenListFocus.setVisibility(View.VISIBLE);
			} else {
				if (remote.m_iState == STATE_LISTEN_LIST) {
					displayListenList(NONE);
				}
			}
		}
		
		// 하단 가이드 텍스트를 새로 갱신
		if (isPlaying()) {
			if (m_iVender != SMART_BOX) {
				SetBottomGuideText01(R.drawable.common_btn_green, getString(R.string.menu_bottom_close));
			} else {
				SetBottomGuideText01(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_close));
			}
		}
		
		m_bIsHiddenMenu = false;
	}

	protected void HideMenu() {
		if (m_iPaneState == HOME) {
			LinearLayout layoutHide1 = (LinearLayout)findViewById(R.id.layout_home_main_menu2);
			LinearLayout layoutHide2 = (LinearLayout)findViewById(R.id.layout_home_event_menu);
			LinearLayout layoutHide3 = (LinearLayout)findViewById(R.id.layout_home_notice_menu);
			layoutHide1.setVisibility(View.INVISIBLE);
			layoutHide2.setVisibility(View.INVISIBLE);
			layoutHide3.setVisibility(View.INVISIBLE);
			
			LinearLayout layoutHide4 = (LinearLayout)findViewById(R.id.layout_home);
			layoutHide4.setBackgroundColor(Color.TRANSPARENT);
		} else {
			if (m_layoutSongListDetail != null) {
				exitSongListDetail();
			}
			
			LinearLayout layoutHide1 = (LinearLayout)findViewById(R.id.layout_home_main_menu2);
			LinearLayout layoutHide2 = (LinearLayout)findViewById(R.id.layout_sub_menu);
			LinearLayout layoutHide3 = (LinearLayout)findViewById(R.id.layout_sing_list);
			layoutHide1.setVisibility(View.INVISIBLE);
			layoutHide2.setVisibility(View.INVISIBLE);
			layoutHide3.setVisibility(View.INVISIBLE);
			
			LinearLayout layoutHide4 = (LinearLayout)findViewById(R.id.layout_sing);
			layoutHide4.setBackgroundColor(Color.TRANSPARENT);
			
			if (m_layoutListenListFocus != null) {
				m_layoutListenListFocus.setVisibility(View.INVISIBLE);
			}
			
			/*
			if (m_layoutSongListDetail != null) {
				exitSongListDetail();
			}
			*/
		}
		
		// 하단 가이드 텍스트를 새로 갱신
		if (isPlaying()) {
			if (m_iVender != SMART_BOX) {
				SetBottomGuideText01(R.drawable.common_btn_green, getString(R.string.menu_bottom_open));
				LOG(CLASS, "MENU OPEN - GuideText 5");
			} else {
				SetBottomGuideText01(R.drawable.common_btn_yellow, getString(R.string.menu_bottom_open));
				LOG(CLASS, "MENU OPEN - GuideText 6");
			}
		}
		
		m_bIsHiddenMenu = true;
	}

	protected void ShowGenre() {
		m_bIsGenre = true;
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp1 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp1.weight = 3;
		LinearLayout blank1 = (LinearLayout)findViewById(R.id.layout_sing_list_blank1);
		blank1.setLayoutParams(lp1);
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp2 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp2.weight = 10;
		LinearLayout center = (LinearLayout)findViewById(R.id.layout_sing_list_center);
		center.setLayoutParams(lp2);
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp3 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp3.weight = 1;
		LinearLayout blank2 = (LinearLayout)findViewById(R.id.layout_sing_list_blank2);
		blank2.setLayoutParams(lp3);
		
		findViewById(R.id.btn_sing_sub_genre_ballad).setVisibility(View.VISIBLE);
		findViewById(R.id.btn_sing_sub_genre_dance).setVisibility(View.VISIBLE);
		findViewById(R.id.btn_sing_sub_genre_trot).setVisibility(View.VISIBLE);
		findViewById(R.id.btn_sing_sub_genre_rock).setVisibility(View.VISIBLE);
		findViewById(R.id.btn_sing_sub_genre_pop).setVisibility(View.VISIBLE);
		findViewById(R.id.btn_sing_sub_genre_ani).setVisibility(View.VISIBLE);
		findViewById(R.id.txt_sing_sub_genre_page).setVisibility(View.VISIBLE);
	}
	
	protected void HideGenre() {
		m_bIsGenre = false;
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp1 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp1.weight = 1;
		LinearLayout blank1 = (LinearLayout)findViewById(R.id.layout_sing_list_blank1);
		blank1.setLayoutParams(lp1);
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp2 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp2.weight = 12;
		LinearLayout center = (LinearLayout)findViewById(R.id.layout_sing_list_center);
		center.setLayoutParams(lp2);
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams lp3 = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, 0);
		lp3.weight = 1;
		LinearLayout blank2 = (LinearLayout)findViewById(R.id.layout_sing_list_blank2);
		blank2.setLayoutParams(lp3);

		findViewById(R.id.btn_sing_sub_genre_ballad).setVisibility(View.GONE);
		findViewById(R.id.btn_sing_sub_genre_dance).setVisibility(View.GONE);
		findViewById(R.id.btn_sing_sub_genre_trot).setVisibility(View.GONE);
		findViewById(R.id.btn_sing_sub_genre_rock).setVisibility(View.GONE);
		findViewById(R.id.btn_sing_sub_genre_pop).setVisibility(View.GONE);
		findViewById(R.id.btn_sing_sub_genre_ani).setVisibility(View.GONE);
		findViewById(R.id.txt_sing_sub_genre_page).setVisibility(View.GONE);
	}
	
	@SuppressWarnings("deprecation")
	protected void ShowLoading(int time) {
		if (m_layoutLoading == null) {
			LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
			
			if (time == SHORT) {
				m_bIsLongLoading = false;
				m_layoutLoading = (LinearLayout)inf.inflate(R.layout.loading, null);
			} else {
				m_bIsLongLoading = true;
				m_layoutLoading = (LinearLayout)inf.inflate(R.layout.loading_bg, null);
			}
			
			LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
			addContentView(m_layoutLoading, param);
		    
			ImageView imgLoading = null;
			if (time == SHORT) {
				imgLoading = (ImageView)findViewById(R.id.img_loading);
			} else {
				imgLoading = (ImageView)findViewById(R.id.img_loading_bg);
			}

		    Animation animLoadingRotate= AnimationUtils.loadAnimation(this, R.anim.loading_rotate);
		    imgLoading.startAnimation(animLoadingRotate);
		}
	}
	
	protected void HideLoading() {
		if (m_layoutLoading != null) {
			((ViewManager)m_layoutLoading.getParent()).removeView(m_layoutLoading);
			m_layoutLoading = null;
		}
	}
	
	protected void HideVirtualRemote() {
		findViewById(R.id.btn_remote_hide).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_blue).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_down).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_enter).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_red).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_green).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_yellow).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_left).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_return).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_right).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_up).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_1).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_2).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_3).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_4).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_5).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_6).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_7).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_8).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_9).setVisibility(View.GONE);
		findViewById(R.id.btn_remote_0).setVisibility(View.GONE);
	}
	
	protected boolean CheckNumberKey(int keycode) {
		if (keycode ==  KeyEvent.KEYCODE_0 ||
				keycode ==  KeyEvent.KEYCODE_1 ||
				keycode ==  KeyEvent.KEYCODE_2 ||
				keycode ==  KeyEvent.KEYCODE_3 ||
				keycode ==  KeyEvent.KEYCODE_4 ||
				keycode ==  KeyEvent.KEYCODE_5 ||
				keycode ==  KeyEvent.KEYCODE_6 ||
				keycode ==  KeyEvent.KEYCODE_7 ||
				keycode ==  KeyEvent.KEYCODE_8 ||
				keycode ==  KeyEvent.KEYCODE_9 ||
				keycode ==  18) {
			return true;
		} else {
			return false;
		}
	}
	
	protected boolean CheckNotContentsSongList() {
		LOG(CLASS, "CheckNotContentsSongList >");
		LOG(CLASS, "m_iSongListFocus = " + String.valueOf(remote.m_iSongListFocus));
		
		if (remote.m_iState == STATE_SONG_LIST || remote.m_iState == STATE_MY_LIST) {
			TextView txtCheck = null;
			
			if (remote.m_iSongListFocus == 6) {
				return true;
			}
			
			switch(remote.m_iSongListFocus)
			{
			case 1 :
				txtCheck =  (TextView)findViewById(R.id.txt_sing_number_2);
				break;
			case 2 :
				txtCheck =  (TextView)findViewById(R.id.txt_sing_number_3);
				break;
			case 3 :
				txtCheck =  (TextView)findViewById(R.id.txt_sing_number_4);
				break;
			case 4 :
				txtCheck =  (TextView)findViewById(R.id.txt_sing_number_5);
				break;
			case 5 :
				txtCheck =  (TextView)findViewById(R.id.txt_sing_number_6);
				break;
			}
			
			if (txtCheck.getText().equals("")) {
				LOG(CLASS, "true");
				return true;
			} else {
				LOG(CLASS, "false");
				return false;
			}
		}
		
		return true;
	}
	
	protected boolean CheckNotContentsMyRecordList() {
		LOG(CLASS, "CheckNotContentsMyRecordList >");
		LOG(CLASS, "m_iSongListFocus = " + String.valueOf(remote.m_iSongListFocus));
		
		if (remote.m_iState == STATE_MY_RECORD_LIST) {
			TextView txtCheck = null;
			
			if (remote.m_iSongListFocus == 6) {
				return true;
			}
			
			switch(remote.m_iSongListFocus)
			{
			case 1 :
				txtCheck =  (TextView)findViewById(R.id.txt_my_record_title_2);
				break;
			case 2 :
				txtCheck =  (TextView)findViewById(R.id.txt_my_record_title_3);
				break;
			case 3 :
				txtCheck =  (TextView)findViewById(R.id.txt_my_record_title_4);
				break;
			case 4 :
				txtCheck =  (TextView)findViewById(R.id.txt_my_record_title_5);
				break;
			case 5 :
				txtCheck =  (TextView)findViewById(R.id.txt_my_record_title_6);
				break;
			}
			
			if (txtCheck.getText() == "") {
				LOG(CLASS, "CheckNotContentsMyRecordList true");
				return true;
			} else {
				LOG(CLASS, "CheckNotContentsMyRecordList false");
				return false;
			}
		}
		
		return true;
	}

	protected void CheckNotItemOnListenList() {
		LOG(CLASS, "CheckNotItemOnListenList >");
		
		int iLastPageItemCount = arrayListenListItem.size() % 8;
		int iListenFocus = 1;
		
		switch(remote.m_iListenListFocusX)
		{
		case 1 :
			if (remote.m_iListenListFocusY == 1) {
				iListenFocus = 1;
			} else {
				iListenFocus = 5;
			}
			break;
		case 2 :
			if (remote.m_iListenListFocusY == 1) {
				iListenFocus = 2;
			} else {
				iListenFocus = 6;
			}
			break;
		case 3 :
			if (remote.m_iListenListFocusY == 1) {
				iListenFocus = 3;
			} else {
				iListenFocus = 7;
			}
			break;
		case 4 :
			if (remote.m_iListenListFocusY == 1) {
				iListenFocus = 4;
			} else {
				iListenFocus = 8;
			}
			break;
		}
		
		LOG(CLASS, "current focus = " + String.valueOf(iListenFocus));
		
		if (iListenFocus > iLastPageItemCount) {
			iListenFocus = iLastPageItemCount;
			
			switch(iListenFocus)
			{
			case 1 :
				remote.m_iListenListFocusY = 1;
				remote.m_iListenListFocusX = 1;
				break;
			case 2 :
				remote.m_iListenListFocusY = 1;
				remote.m_iListenListFocusX = 2;
				break;
			case 3 :
				remote.m_iListenListFocusY = 1;
				remote.m_iListenListFocusX = 3;
				break;
			case 4 :
				remote.m_iListenListFocusY = 1;
				remote.m_iListenListFocusX = 4;
				break;
			case 5 :
				remote.m_iListenListFocusY = 2;
				remote.m_iListenListFocusX = 1;
				break;
			case 6 :
				remote.m_iListenListFocusY = 2;
				remote.m_iListenListFocusX = 2;
				break;
			case 7 :
				remote.m_iListenListFocusY = 2;
				remote.m_iListenListFocusX = 3;
				break;
			case 8 :
				remote.m_iListenListFocusY = 2;
				remote.m_iListenListFocusX = 4;
				break;
			}
			
			displayListenList(NONE);
			LOG(CLASS, "after focus = " + String.valueOf(iListenFocus));
		}
		
		LOG(CLASS, "CheckNotItemOnListenList <");
	}

	protected boolean CheckNotContentsCustomerList() {
		LOG(CLASS, "CheckNotContentsCustomerList >");
		LOG(CLASS, "m_iCustomerListFocus = " + String.valueOf(remote.m_iCustomerListFocus));
		
		if (remote.m_iState == STATE_CUSTOMER_LIST) {
			TextView txtCheck = null;
			
			if (remote.m_iCustomerListFocus == 6) {
				return true;
			}
			
			switch(remote.m_iCustomerListFocus)
			{
			case 1 :
				txtCheck =  (TextView)findViewById(R.id.txt_customer_title_2);
				break;
			case 2 :
				txtCheck =  (TextView)findViewById(R.id.txt_customer_title_3);
				break;
			case 3 :
				txtCheck =  (TextView)findViewById(R.id.txt_customer_title_4);
				break;
			case 4 :
				txtCheck =  (TextView)findViewById(R.id.txt_customer_title_5);
				break;
			case 5 :
				txtCheck =  (TextView)findViewById(R.id.txt_customer_title_6);
				break;
			}
			
			if (txtCheck.getText() == "") {
				LOG(CLASS, "true");
				return true;
			} else {
				LOG(CLASS, "false");
				return false;
			}
		}
		
		return true;
	}
	
	protected boolean CheckNotContentsSearchList() {
		LOG(CLASS, "CheckNotContentsSearchList >");
		LOG(CLASS, "m_iSearchListFocus = " + String.valueOf(remote.m_iSearchListFocus));
		
		if (remote.m_iState == STATE_SEARCH_LIST) {
			TextView txtCheck = null;
			
			if (remote.m_iSearchSubMenuFocus == 1) {
				if (remote.m_iSearchListFocus == 5) {
					return true;
				}
				
				switch(remote.m_iSearchListFocus)
				{
				case 1 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_self_number_2);
					break;
				case 2 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_self_number_3);
					break;
				case 3 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_self_number_4);
					break;
				case 4 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_self_number_5);
					break;
				}
			} else {
				if (remote.m_iSearchListFocus == 4) {
					return true;
				}
				
				switch(remote.m_iSearchListFocus)
				{
				case 1 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_letter_number_2);
					break;
				case 2 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_letter_number_3);
					break;
				case 3 :
					txtCheck =  (TextView)findViewById(R.id.txt_search_letter_number_4);
					break;
				}
			}
			
			if (txtCheck.getText() == "") {
				LOG(CLASS, "true");
				return true;
			} else {
				LOG(CLASS, "false");
				return false;
			}
		}
		
		return true;
	}
	
	public void SetBottomGuideText01(int resId, String str) {
		ImageView imgGuide = (ImageView)findViewById(R.id.img_bottom_guide_01);
		imgGuide.setVisibility(View.VISIBLE);
		imgGuide.setImageResource(resId);
		
		TextView txtGuide = (TextView)findViewById(R.id.txt_bottom_guide_01);
		txtGuide.setVisibility(View.VISIBLE);
		txtGuide.setText(str);
	}
	
	public void HideBottomGuide01() {
		ImageView imgGuide = (ImageView)findViewById(R.id.img_bottom_guide_01);
		imgGuide.setVisibility(View.INVISIBLE);
		
		TextView txtGuide = (TextView)findViewById(R.id.txt_bottom_guide_01);
		txtGuide.setVisibility(View.INVISIBLE);
	}
	
	public void SetBottomGuideText02(int resId, String str) {
		ImageView imgGuide = (ImageView)findViewById(R.id.img_bottom_guide_02);
		imgGuide.setVisibility(View.VISIBLE);
		imgGuide.setImageResource(resId);
		
		TextView txtGuide = (TextView)findViewById(R.id.txt_bottom_guide_02);
		txtGuide.setVisibility(View.VISIBLE);
		txtGuide.setText(str);
	}
	
	public void HideBottomGuide02() {
		ImageView imgGuide = (ImageView)findViewById(R.id.img_bottom_guide_02);
		imgGuide.setVisibility(View.INVISIBLE);
		
		TextView txtGuide = (TextView)findViewById(R.id.txt_bottom_guide_02);
		txtGuide.setVisibility(View.INVISIBLE);
	}
	
	@SuppressLint("CutPasteId")
	protected void SetListenOtherFocus(int keyID) {
		if (keyID != NONE) {
			if (remote.m_iListenOther != remote.m_iListenOtherBefore) {
				// 전체 페이지 수가 1 이상
				if (m_iTotalListenOtherListPage > 1) {
					if (keyID == RIGHT) {
						// 전체 페이지 수가 2
						if (m_iTotalListenOtherListPage == 2) {
							if (remote.m_iListenOther == 9) {
								remote.m_iListenOther = 1;
								remote.m_iListenOtherBefore = 8;
							}
						} else {
							// 9페이지 전
							if (m_iCurrentViewListenOtherListPage < 9) {
								// 마지막 페이지 -1 페이지 전
								if (m_iCurrentViewListenOtherListPage < m_iTotalListenOtherListPage - 1) {
									if (remote.m_iListenOther == 9) {
										remote.m_iListenOther = 1;
										remote.m_iListenOtherBefore = 8;
										
										m_iCurrentViewListenOtherListPage++;
										m_iCurrentListenOtherListPage++;
										
										// 페이지가 이동되었으니 아이템들을 갱신
										moveListenOtherPage();
									}
								} else {
									if (remote.m_iListenOther == 9) {
										remote.m_iListenOther = 8;
										remote.m_iListenOtherBefore = 8;
									}
								}
							// 9페이지
							} else {
								if (remote.m_iListenOther == 9) {
									remote.m_iListenOther = 8;
									remote.m_iListenOtherBefore = 8;
								}
							}
						}
					} else if (keyID == LEFT) {
						if (m_iCurrentViewListenOtherListPage > 1) {
							if (remote.m_iListenOther == 0) {
								remote.m_iListenOther = 8;
								remote.m_iListenOtherBefore = 1;
								
								// 이전 페이지가 있으면 페이지 이동
								m_iCurrentViewListenOtherListPage--;
								m_iCurrentListenOtherListPage--;
								
								// 페이지가 이동되었으니 아이템들을 갱신
								moveListenOtherPage();
							}
						} else {
							// 현재 1 페이지인데 - 전체가 2페이지
							if (m_iTotalListenOtherListPage == 2) {
								if (remote.m_iListenOther == 0) {
									remote.m_iListenOther = 8;
									remote.m_iListenOtherBefore = 1;
								}
							// 현재 1 페이지인데 - 전체가 3페이지 이상
							} else {
								if (remote.m_iListenOther == 0) {
									remote.m_iListenOther = 1;
									remote.m_iListenOtherBefore = 1;
								}
							}
						}
					}
				// 전체 페이지 수가 1
				} else {
					if (remote.m_iListenOther == 0 && keyID == LEFT) {
						remote.m_iListenOther = arrListeningOthersRecordID.size();
						remote.m_iListenOtherBefore = 1;
					} else if (arrListeningOthersRecordID.size() < remote.m_iListenOther && keyID == RIGHT) {
						// 없는 아이템으로 포커스를 이동하려고 한다
						if (m_iTotalListenOtherListPage == m_iCurrentViewListenOtherListPage) {
							remote.m_iListenOther = 1;
							remote.m_iListenOtherBefore = arrListeningOthersRecordID.size();
						}
					}
				}
				
				String strColorFocusOff = "#FFFFFF";
				
				LinearLayout layoutBefore = null;
				
				switch(remote.m_iListenOtherBefore)
				{
				case 1 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_01);
					break;
				case 2 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_02);
					break;
				case 3 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_03);
					break;
				case 4 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_04);
					break;
				case 5 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_05);
					break;
				case 6 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_06);
					break;
				case 7 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_07);
					break;
				case 8 :
					layoutBefore = (LinearLayout)findViewById(R.id.layout_listen_other_08);
					break;
				}
				
				if (layoutBefore != null) {
					LinearLayout layoutBeforeLeft = (LinearLayout)layoutBefore.findViewById(R.id.layout_listen_other_profile_focus_left);
					LinearLayout layoutBeforeRight = (LinearLayout)layoutBefore.findViewById(R.id.layout_listen_other_profile_focus_right);
					LinearLayout layoutBeforeUp = (LinearLayout)layoutBefore.findViewById(R.id.layout_listen_other_profile_focus_up);
					LinearLayout layoutBeforeDown = (LinearLayout)layoutBefore.findViewById(R.id.layout_listen_other_profile_focus_down);
					LinearLayout layoutBeforeImg = (LinearLayout)layoutBefore.findViewById(R.id.layout_listen_other_profile_focus_img);
					
					layoutBeforeLeft.setBackgroundColor(Color.TRANSPARENT);
					layoutBeforeRight.setBackgroundColor(Color.TRANSPARENT);
					layoutBeforeUp.setBackgroundColor(Color.TRANSPARENT);
					layoutBeforeDown.setBackgroundColor(Color.TRANSPARENT);
					layoutBeforeImg.setBackgroundColor(Color.parseColor(strColorFocusOff));
				}
			}
		}
		
		String strColorFocusOn = "#00CA66";
		
		LinearLayout layoutBase = null;
		
		switch(remote.m_iListenOther)
		{
		case 1 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_01);
			break;
		case 2 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_02);
			break;
		case 3 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_03);
			break;
		case 4 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_04);
			break;
		case 5 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_05);
			break;
		case 6 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_06);
			break;
		case 7 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_07);
			break;
		case 8 :
			layoutBase = (LinearLayout)findViewById(R.id.layout_listen_other_08);
			break;
		}
		
		if (layoutBase != null) {
			LinearLayout layoutFocusLeft = (LinearLayout)layoutBase.findViewById(R.id.layout_listen_other_profile_focus_left);
			LinearLayout layoutFocusRight = (LinearLayout)layoutBase.findViewById(R.id.layout_listen_other_profile_focus_right);
			LinearLayout layoutFocusUp = (LinearLayout)layoutBase.findViewById(R.id.layout_listen_other_profile_focus_up);
			LinearLayout layoutFocusDown = (LinearLayout)layoutBase.findViewById(R.id.layout_listen_other_profile_focus_down);
			LinearLayout layoutFocusImg = (LinearLayout)layoutBase.findViewById(R.id.layout_listen_other_profile_focus_img);
			
			layoutFocusLeft.setBackgroundColor(Color.parseColor(strColorFocusOn));
			layoutFocusRight.setBackgroundColor(Color.parseColor(strColorFocusOn));
			layoutFocusUp.setBackgroundColor(Color.parseColor(strColorFocusOn));
			layoutFocusDown.setBackgroundColor(Color.parseColor(strColorFocusOn));
			layoutFocusImg.setBackgroundColor(Color.parseColor(strColorFocusOn));
		}
	}
	
	protected void ShowNumberSearch(int keyCode) {
		if (!m_bIsNumberSearch) {
			LinearLayout layoutTopBG = (LinearLayout)findViewById(R.id.layout_top);
			layoutTopBG.setBackgroundResource(R.drawable.common_top_bg_search);
			
			LinearLayout layoutTopCommon = (LinearLayout)findViewById(R.id.layout_top_common);
			layoutTopCommon.setVisibility(View.GONE);
			
			LinearLayout layoutTopSearch = (LinearLayout)findViewById(R.id.layout_top_search);
			layoutTopSearch.setVisibility(View.VISIBLE);
		}
		
		switch(keyCode)
		{
		case KeyEvent.KEYCODE_0 :
			AddSearchNumber("0");
			break;
		case KeyEvent.KEYCODE_1 :
			AddSearchNumber("1");
			break;
		case KeyEvent.KEYCODE_2 :
			AddSearchNumber("2");
			break;
		case KeyEvent.KEYCODE_3 :
			AddSearchNumber("3");
			break;
		case KeyEvent.KEYCODE_4 :
			AddSearchNumber("4");
			break;
		case KeyEvent.KEYCODE_5 :
			AddSearchNumber("5");
			break;
		case KeyEvent.KEYCODE_6 :
			AddSearchNumber("6");
			break;
		case KeyEvent.KEYCODE_7 :
			AddSearchNumber("7");
			break;
		case KeyEvent.KEYCODE_8 :
			AddSearchNumber("8");
			break;
		case KeyEvent.KEYCODE_9 :
			AddSearchNumber("9");
			break;
		}
		
		TextView txtSearchNumber = (TextView)findViewById(R.id.txt_top_search_number);
		txtSearchNumber.setText(m_strInputNumber);
		
		removeNumberSearchZero(m_strInputNumber);
		
		KP(REQUEST_NUMBER_SEARCH, KP_0020, MENU_SEARCH, SEARCH_3);
		
		m_bIsNumberSearch = true;
	}
	
	protected void RemoveListenDisplay() {
		if (listen != null) {
			if (listen.isListening()) {
				if (m_layoutListeningOther != null) {
					((ViewManager)m_layoutListeningOther.getParent()).removeView(m_layoutListeningOther);
					m_layoutListeningOther = null;
				}
				
				if (m_layoutListen != null) {
					((ViewManager)m_layoutListen.getParent()).removeView(m_layoutListen);
					m_layoutListen = null;
				}
				
				if (m_iPaneState != HOME) {
					if (m_layoutListenListFocus != null) {
						((ViewManager)m_layoutListenListFocus.getParent()).removeView(m_layoutListenListFocus);
						m_layoutListenListFocus = null;
					}
				}
				
				listen.stopListen();
				listen.releaseListen();
				
				HideBottomGuide01();
				
				remote.m_iState = STATE_LISTEN_LIST;
			}
		}
	}
	
	private void removeNumberSearchZero(String num) {
		String strNew = "";
		String strGet = "";
		int i = 0;
		boolean bZero = true;
		
		while(i < 5) {
			// 0이 아닌 걸 찾아라
			strGet = m_strInputNumber.substring(i, i + 1);
			
			if (bZero) {
				if (!strGet.equals("0")) {
					bZero = false;
				}
			}
			
			if (!bZero) {
				strNew = strNew + m_strInputNumber.substring(i, i + 1);
			}
			
			i++;
		}
		
		m_strRequestInputNumber = strNew;
		
		LOG(CLASS, "m_strRequestInputNumber = " + m_strRequestInputNumber);
	}
	
	protected void HideNumberSearch() {
		LinearLayout layoutTopBG = (LinearLayout)findViewById(R.id.layout_top);
		layoutTopBG.setBackgroundResource(R.drawable.common_top_bg);
		
		LinearLayout layoutTopCommon = (LinearLayout)findViewById(R.id.layout_top_common);
		layoutTopCommon.setVisibility(View.VISIBLE);
		
		LinearLayout layoutTopSearch = (LinearLayout)findViewById(R.id.layout_top_search);
		layoutTopSearch.setVisibility(View.GONE);
		
		m_strInputNumber = "00000";
		m_bHaveNumberSearchResult = false;
		m_bIsNumberSearch = false;
	}
	
	private void AddSearchNumber(String num) {
		String strNew = "";
		int i = 1;
		
		while(i < 5) {
			strNew = strNew + m_strInputNumber.substring(i, i + 1);
			i++;
		}
		
		strNew = strNew + num;
		m_strInputNumber = strNew;
		
		LOG(CLASS, "m_strInputNumber = " + m_strInputNumber);
	}
	
	protected void ShowNumberSearchResult(String result) {
		TextView txtSearchNumber = (TextView)findViewById(R.id.txt_top_search_item);
		txtSearchNumber.setText(result);
	}
	
	@Override
	public void onWindowFocusChanged(boolean hasWindowFocus) {
		super.onWindowFocusChanged(hasWindowFocus);
	}
	
	private void removeNullSpace() {
		String strGet = "";
		String strNew = "";
		int i = 0;
		
		while(i < m_strSearchWord.length()) {
			// 공백을 찾아라
			strGet = m_strSearchWord.substring(i, i + 1);
			
			if (!strGet.equals(" ")) {
				strNew = strNew + strGet;
			}
			
			i++;
		}
		
		m_strSearchWord = strNew;
		
		LOG(CLASS, "removeNullSpace = " + m_strSearchWord);
	}
	
	public void VASS(int request) {
		requestVASS = new VASSRequest(vassHandler);
		
		requestVASS.setVASSParam(VASS_REQUEST_PAGE, m_strSTBIDOrigin, m_strMac);
		requestVASS.setRequestID(request);
		requestVASS.setProduct(m_iVender);
		
		switch(request)
		{
		case REQUEST_VASS_DAY_PURCHASE :
			requestVASS.setVASSUrl(M_PPV_PURCHASE, "");
			break;
		case REQUEST_VASS_DAY_CHECK :
		case REQUEST_VASS_DAY_CHECK_PLAY :
			requestVASS.setVASSUrl(M_PPV_CHECK, "");
			break;
		case REQUEST_VASS_MONTH_PURCHASE :
			requestVASS.setVASSUrl(M_PPM_PURCHASE, "");
			break;
		case REQUEST_VASS_MONTH_CHECK :
		case REQUEST_VASS_MONTH_CHECK_PLAY :
			requestVASS.setVASSUrl(M_PPM_CHECK, "");
			break;
		case REQUEST_VASS_PASSWORD_FOR_DAY :
		case REQUEST_VASS_PASSWORD_FOR_MONTH :
			requestVASS.setVASSUrl(M_PASSWORD_CHECK, m_strVASSPassword);
			ShowLoading(SHORT);
			break;
		}
		
		requestVASS.start();
	}
	
	public void KP(int request, String OP, String M1, String M2) {
		LOG(CLASS, "KP >");
		LOG(CLASS, "OP=" + OP + "/M1=" + M1 + "/M2=" + M2);
		
		if (request != REQUEST_DAY_PURCHASE_COMPLETE) {
			m_timerShowMessageNotResponse = new Timer();
			m_taskShowMessageNotResponse = new TaskShowMessageNotResponse();
			m_timerShowMessageNotResponse.schedule(m_taskShowMessageNotResponse, 10000);
		}
		
		if (request != REQUEST_SONG_PLAYED_TIME && request != REQUEST_LISTEN_PLAYED_TIME) {
			requestKP = new KPRequest(karaokeHandler);
			
			requestKP.setKPParam(m_strRequestDoamin,
					m_strAppName,
					m_strDebug,
					m_strMarket,
					m_strVersion,
					m_strMid,
					m_strSTBID,
					m_strAccount,
					m_strNCode,
					m_strLCode,
					m_strModel,
					m_strMac,
					m_strMacOrigin,
					m_strOS,
					m_strOSVersion,
					m_strAPIVersion,
					m_strPassType,
					m_strPassCount,
					m_strAPIKey);
		} else {
			requestKPPlayedTime = new KPRequest(karaokeHandler);
			
			requestKPPlayedTime.setKPParam(m_strRequestDoamin,
					m_strAppName,
					m_strDebug,
					m_strMarket,
					m_strVersion,
					m_strMid,
					m_strSTBID,
					m_strAccount,
					m_strNCode,
					m_strLCode,
					m_strModel,
					m_strMac,
					m_strMacOrigin,
					m_strOS,
					m_strOSVersion,
					m_strAPIVersion,
					m_strPassType,
					m_strPassCount,
					m_strAPIKey);
		}
		
		switch(request)
		{
		case REQUEST_MAIN :
			requestKP.setMainUrl(OP, M1, M2);
			break;
		case REQUEST_MY_SUB_MENU :
			requestKP.setMyMenuUrl();
			break;
		case REQUEST_SHOP_SUB_MENU :
			requestKP.setShopMenuUrl();
			break;
		case REQUEST_SONG_LIST :
			requestKP.setSongListUrl(OP, M1, M2, m_iRequestPage);
			break;
		case REQUEST_FAVOR :
			requestKP.setFavorUrl(OP, M1, M2, m_strRequestFavorSongID);
			break;
		case REQUEST_LISTEN_LIST :
			requestKP.setListenListUrl(OP, M1, M2, m_iRequestPage);
			break;
		case REQUEST_CUSTOMER_LIST :
			requestKP.setCustomerListUrl(OP, M1, M2, m_iRequestPage);
			break;
		case REQUEST_EVENT_LIST :
			requestKP.setCustomerListUrl(OP, M1, M2, m_iRequestPage);
			break;
		case REQUEST_EVENT_LIST_DETAIL :
		case REQUEST_CUSTOMER_LIST_DETAIL :
			requestKP.setCustomerListDetailUrl(OP, M1, M2, m_strRequestCustomerDetailID);
			break;
		case REQUEST_SEARCH_LIST :
			removeNullSpace();
			requestKP.setSearchListUrl(OP, M1, M2,  m_strSearchWord, m_iRequestSearchListPage);
			break;
		case REQUEST_SONG_PLAY :
			VASS(REQUEST_VASS_DAY_CHECK_PLAY);
			break;
		case REQUEST_SONG_PLAYED_TIME :
			requestKPPlayedTime.setSongPlayedTimeUrl(OP, M1, M2, m_strRequestPlaySongID, m_strPlaySongType);
			break;
		case REQUEST_LISTEN_SONG :
		case REQUEST_LISTEN_OTHER_SONG :
			if (remote.m_iSubMainMenuFocus == 3) {
				requestKP.setListenSongUrl(OP, M1, M2, m_strRequestListenSongID, m_strMid);
			} else {
				requestKP.setListenSongUrl(OP, M1, M2, m_strRequestListenSongID, "");
			}
			break;
		case REQUEST_LISTEN_PLAYED_TIME :
			requestKPPlayedTime.setSongPlayedTimeUrl(OP, M1, M2, m_strRequestListenSongID, "N");
			break;
		case REQUEST_LISTEN_OTHER :
			requestKP.setListenOtherUrl(OP, m_strListeningSongID, m_iListenOtherRequestPage);
			break;
		case REQUEST_NUMBER_SEARCH :
			requestKP.setNumberSearchUrl(OP, M1, M2, m_strRequestInputNumber);
			break;
		case REQUEST_AUTH_NUMBER :
			requestKP.setAuthNumberUrl(OP, m_strHPNumber, "");
			break;
		case REQUEST_CERTIFY_STATE :
			requestKP.setCertifyStateUrl(OP);
			break;
		case REQUEST_AUTH_NUMBER_CORRECT :
			requestKP.setAuthNumberCorrectUrl(OP, m_strHPNumber, m_strInputAuthNumber);
			break;
		case REQUEST_MY_RECORD_LIST :
			requestKP.setListenListUrl(OP, M1, M2, m_iRequestPage);
			break;
		case REQUEST_DAY_PURCHASE_COMPLETE :
		case REQUEST_MONTH_PURCHASE_COMPLETE :
			//==============================================================tamashii
			requestKP.setPurchaseCompleteUrl(OP, m_strPurchaseResult);
			break;
		case REQUEST_TICKET_SALES_STATE :
			requestKP.setTicketSalesStateUrl(KP_4000);
			break;
		case REQUEST_EVENT_APPLY :
			requestKP.setEventApply(m_strRequestCustomerDetailID);
			break;
		case REQUEST_EVENT_HP :
			requestKP.setEventHP(m_strRequestCustomerDetailID, m_strHPNumber);
			break;
		case REQUEST_COUPON_REGIST :
			requestKP.setCouponRegistUrl(m_strCouponSerial);
			break;
		}
		
		if (request != REQUEST_SONG_PLAYED_TIME && request != REQUEST_LISTEN_PLAYED_TIME) {
			requestKP.setRequestType(request);
		} else {
			requestKPPlayedTime.setRequestType(request);
		}
		
		if (request != REQUEST_SONG_PLAYED_TIME && request != REQUEST_LISTEN_PLAYED_TIME && request != REQUEST_DAY_PURCHASE_COMPLETE && request != REQUEST_MONTH_PURCHASE_COMPLETE) {
			if (request == REQUEST_SONG_PLAY || request == REQUEST_LISTEN_SONG) {
				ShowLoading(LONG);
			} else {
				ShowLoading(SHORT);
			}
		}
		
		if (request == REQUEST_SONG_PLAY) {
			return;
		}
		
		if (request != REQUEST_SONG_PLAYED_TIME && request != REQUEST_LISTEN_PLAYED_TIME) {
			requestKP.start();
		} else {
			requestKPPlayedTime.start();
		}
		
		LOG(CLASS, "KP <");
	}
	
	public String getEngageSong() {
		if (arrPlayList.size() != 0) {
			return arrPlayList.get(0);
		}
		
		return "";
	}
	
	public void deleteEngageSong() {
		if (arrPlayList.size() != 0) {
			if (arrPlayList.size() == 1) {
				arrPlayList.clear();
			} else {
				int i = 0;
				
				while(i + 1 < arrPlayList.size()) {
					arrPlayList.set(i, arrPlayList.get(i + 1));
					i++;
				}
				
				arrPlayList.remove(i);
			}
			
			displayEngageSong();
		}
	}
	
	protected void AddEngageSong(String song) {
		arrPlayList.add(song);
		
		TextView textEngageCount = null;
		TextView textEngageList = null;

		if (m_iPaneState == HOME) {
			textEngageCount = (TextView)findViewById(R.id.txt_top_engage_main);
			textEngageList = (TextView)findViewById(R.id.txt_top_engage_list_main);
		} else {
			textEngageCount = (TextView)findViewById(R.id.txt_top_engage);
			textEngageList = (TextView)findViewById(R.id.txt_top_engage_list);
		}
		
		int iSize = arrPlayList.size();
		String strCount = "";
		
		if (iSize < 10) {
			strCount = "0";
		}
		
		strCount = strCount + Integer.toString(iSize);
		
		textEngageCount.setText("예약곡 " + strCount);  
		
		String strEngageList = arrPlayList.get(0);
		int iMakeCount = 1;
		while(iMakeCount < arrPlayList.size()) {
			strEngageList = strEngageList + "  " + arrPlayList.get(iMakeCount);
			
			iMakeCount++;
			
			if (iMakeCount == 5) {
				break;
			}
		}
		
		textEngageList.setText(strEngageList);
	}
	
	public int getFocusedListenListItemIndex() {
		int iIndex = 0;
		
		switch(remote.m_iListenListFocusX)
		{
		case 1 :
			if (remote.m_iListenListFocusY == 1) {
				iIndex = 0; 
			} else {
				iIndex = 4;
			}
			break;
		case 2 :
			if (remote.m_iListenListFocusY == 1) {
				iIndex = 1; 
			} else {
				iIndex = 5;
			}
			break;
		case 3 :
			if (remote.m_iListenListFocusY == 1) {
				iIndex = 2; 
			} else {
				iIndex = 6;
			}
			break;
		case 4 :
			if (remote.m_iListenListFocusY == 1) {
				iIndex = 3; 
			} else {
				iIndex = 7;
			}
			break;
		}
		
		iIndex = iIndex + m_iListenItemCount - 8;
		
		return iIndex;
	}
	
	public int getFocusedMyRecordListIndex() {
		int iIndex = 0;
		
		iIndex = remote.m_iSongListFocus - 1;
		
		iIndex = iIndex + m_iListenItemCount - 6;
		
		return iIndex;
	}
	
	public void setIMELocation() {
		Intent imeIntent = new Intent("com.dasan.keyboard.SET_LAYOUT");
		Bundle extras = new Bundle();
		int height1 = m_iDisplayHeight / 3;
		int height2 = height1 / 4;
		int width1 = m_iDisplayWidth / 5;
		int width2 = width1 / 10;
		extras.putInt("top", m_iDisplayHeight - height1 - height2);
		extras.putInt("left", m_iDisplayWidth - width1 - width2);
		imeIntent.putExtras(extras);
		sendBroadcast(imeIntent);
		mHandler.sendEmptyMessageDelayed(IME_SHOW, 100);
	}
	
	Handler.Callback mCallback = new Handler.Callback() {
		@Override
		public boolean handleMessage(Message msg) {
			switch(msg.what) {
			case IME_SHOW :
				EditText et = (EditText)findViewById(R.id.edit_search_self_word);
				InputMethodManager imm = (InputMethodManager)getSystemService(INPUT_METHOD_SERVICE);
				imm.showSoftInput(et, InputMethodManager.SHOW_FORCED);
				break;
			}

			return false;
		}
	};

	Handler mHandler = new Handler(mCallback);
	
	private boolean isFavor(int focus) {
		if (arrayIsFavor.size() >= focus) {
			focus = focus - 1;
			if (arrayIsFavor.get(focus).equals("Y")) {
				return true;
			}
		}
		
		return false;
	}
	
	public boolean isPlaying() {
		Play playActivity = (Play)Play.ActivityPlay;
		if (playActivity != null) {
			if (playActivity.isPlaying()) {
				return true;
			}
		}
		
		return false;
	}
	
	private Bitmap GetBitmapClippedCircle(Bitmap bitmap) {
		Bitmap output;

	    if (bitmap.getWidth() > bitmap.getHeight()) {
	        output = Bitmap.createBitmap(bitmap.getHeight(), bitmap.getHeight(), Config.ARGB_8888);
	    } else {
	        output = Bitmap.createBitmap(bitmap.getWidth(), bitmap.getWidth(), Config.ARGB_8888);
	    }

	    Canvas canvas = new Canvas(output);

	    final int color = 0xff424242;
	    final Paint paint = new Paint();
	    final Rect rect = new Rect(0, 0, bitmap.getWidth(), bitmap.getHeight());

	    float r = 0;

	    if (bitmap.getWidth() > bitmap.getHeight()) {
	        r = bitmap.getHeight() / 2;
	    } else {
	        r = bitmap.getWidth() / 2;
	    }

	    paint.setAntiAlias(true);
	    canvas.drawARGB(0, 0, 0, 0);
	    paint.setColor(color);
	    canvas.drawCircle(r, r, r, paint);
	    paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.SRC_IN));
	    canvas.drawBitmap(bitmap, rect, rect, paint);
	    
	    return output;
    }
	
	private String getSongIDFromList() {
		TextView textCurrent = null;
		
		switch(remote.m_iSongListFocus)
		{
		case 1 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_1);
			break;
		case 2 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_2);
			break;
		case 3 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_3);
			break;
		case 4 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_4);
			break;
		case 5 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_5);
			break;
		case 6 :
			textCurrent = (TextView)findViewById(R.id.txt_sing_number_6);
			break;
		}
		
		return (String)textCurrent.getText();
	}
	
	private String getSongIDFromSearchList() {
		TextView textCurrent = null;
		
		switch(remote.m_iSearchListFocus)
		{
		case 1 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				textCurrent = (TextView)findViewById(R.id.txt_search_self_number_1);
			} else {
				textCurrent = (TextView)findViewById(R.id.txt_search_letter_number_1);
			}
			break;
		case 2 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				textCurrent = (TextView)findViewById(R.id.txt_search_self_number_2);
			} else {
				textCurrent = (TextView)findViewById(R.id.txt_search_letter_number_2);
			}
			break;
		case 3 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				textCurrent = (TextView)findViewById(R.id.txt_search_self_number_3);
			} else {
				textCurrent = (TextView)findViewById(R.id.txt_search_letter_number_3);
			}
			break;
		case 4 :
			if (remote.m_iSearchSubMenuFocus == 1) {
				textCurrent = (TextView)findViewById(R.id.txt_search_self_number_4);
			} else {
				textCurrent = (TextView)findViewById(R.id.txt_search_letter_number_4);
			}
			break;
		case 5 :
			textCurrent = (TextView)findViewById(R.id.txt_search_self_number_5);
			break;
		}
		
		return (String)textCurrent.getText();
	}
	
	private void ShowMessageCommon(int close, String title, String message)
	{
		if (m_layoutMessageCommon != null) {
			return;
		}
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		if (close == CLOSE_AUTO || close == CLOSE_AUTO_LONG) {
			m_layoutMessageCommon = (LinearLayout)inf.inflate(R.layout.message_common, null);
		} else {
			m_layoutMessageCommon = (LinearLayout)inf.inflate(R.layout.message_common_bottomright, null);
		}
		
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutMessageCommon, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    TextView textTitle = null;
	    TextView textMessage = null;
	    
	    if (close == CLOSE_AUTO || close == CLOSE_AUTO_LONG) {
	    	textTitle = (TextView)findViewById(R.id.btn_message_common_title);
	    	textMessage = (TextView)findViewById(R.id.btn_message_common_message);
	    } else {
	    	textTitle = (TextView)findViewById(R.id.btn_message_common_bottomright_title);
	    	textMessage = (TextView)findViewById(R.id.btn_message_common_bottomright_message);
	    }
	    
	    textTitle.setText(title);
	    textMessage.setText(message);
	    
	    if (close == CLOSE_AUTO) {
		    m_timerHideMessageCommon = new Timer();
		    TaskHideMessageCommon hideTask = new TaskHideMessageCommon();
			m_timerHideMessageCommon.schedule(hideTask, 2000);
	    } else if (close == CLOSE_AUTO_LONG) {
	    	m_timerHideMessageCommon = new Timer();
		    TaskHideMessageCommon hideTask = new TaskHideMessageCommon();
			m_timerHideMessageCommon.schedule(hideTask, 5000);
	    } else if (close == CLOSE_AUTO_MID_BOTTOMRIGHT) {
	    	m_timerHideMessageCommon = new Timer();
		    TaskHideMessageCommon hideTask = new TaskHideMessageCommon();
			m_timerHideMessageCommon.schedule(hideTask, 3000);
	    }
	}
	
	private void HideMessageCommon()
	{
		if (m_layoutMessageCommon != null) {
			if ((ViewManager)m_layoutMessageCommon.getParent() != null) {
				((ViewManager)m_layoutMessageCommon.getParent()).removeView(m_layoutMessageCommon);
				m_layoutMessageCommon = null;
			}
		}
	}
	
	private void ShowMessageNotResponse(String title, String message)
	{
		if (m_layoutLoading == null) {
			return;
		}
		
		LOG(CLASS, "ShowMessageNotResponse");
		
		HideLoading();
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutMessageCommon = (LinearLayout)inf.inflate(R.layout.message_common, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutMessageCommon, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    TextView textTitle = (TextView)findViewById(R.id.btn_message_common_title);
	    TextView textMessage = (TextView)findViewById(R.id.btn_message_common_message);
	    
	    textTitle.setText(title);
	    textMessage.setText(message);
	    
	    m_timerHideMessageCommon = new Timer();
	    
	    TaskHideMessageCommon hideTask = new TaskHideMessageCommon();
		
	    m_timerHideMessageCommon.schedule(hideTask, 2000);
	}
	
	private void ShowMessageOkCancel(String title, String message)
	{
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutMessageOkCancel = (LinearLayout)inf.inflate(R.layout.message_okcancel, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutMessageOkCancel, param);
		ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
	    setGlobalFont(root);
	    
	    TextView textTitle = (TextView)findViewById(R.id.txt_message_okcancel_title);
	    TextView textMessage = (TextView)findViewById(R.id.txt_message_okcancel_message);
	    
	    textTitle.setText(title);
	    textMessage.setText(message);
	}
	
	private void HideMessageOkCancel()
	{
		if (m_layoutMessageOkCancel != null) {
			((ViewManager)m_layoutMessageOkCancel.getParent()).removeView(m_layoutMessageOkCancel);
			m_layoutMessageOkCancel = null;
			m_iMessageOkCancelFocus = CANCEL;
		}
	}
	
	class TaskHideMessageCommon extends TimerTask {
	   @Override
	   public void run() {
		   sendMessage(TIMER_HIDE_MESSAGE_COMMON);
	   }
	}
	
	class TaskShowMessageNotResponse extends TimerTask {
	   @Override
	   public void run() {
		   sendMessage(TIMER_SHOW_MESSAGE_NOT_RESPONSE);
	   }
	}
	
	private int PixelFromDP(int pixel) 
	{
		float density = getApplicationContext().getResources().getDisplayMetrics().density; 
		return (int) (pixel  * density + 0.5f);
	}
	
	@SuppressWarnings("unused")
	private String GetMacAddress()
	{
		WifiManager mngr = (WifiManager)this.getSystemService(Context.WIFI_SERVICE);
		WifiInfo wifi = mngr.getConnectionInfo();
		String addrMAC = wifi.getMacAddress();
  
		return addrMAC;
	}
	
	private void SetTopNumber(String num) {
		TextView txtSongNumber = (TextView)findViewById(R.id.txt_top_song_number);
		TextView txtSongNumberSearch = (TextView)findViewById(R.id.txt_top_song_number_search);
		txtSongNumber.setText(num);
		txtSongNumberSearch.setText(num);
	}
	
	private void SetCertifyState() {
		TextView txtCertifyStatePhone = (TextView)findViewById(R.id.txt_certify_state_phone);
		TextView txtCertifyStateDate = (TextView)findViewById(R.id.txt_certify_state_date);
		TextView txtCertifyStateMark = (TextView)findViewById(R.id.txt_certify_state_mark);
		TextView txtCertifyStateModify = (TextView)findViewById(R.id.txt_certify_state_modify);
		txtCertifyStatePhone.setText(readKaraoke());
		txtCertifyStateDate.setText(requestKP.m_strAuthDate);
		txtCertifyStateMark.setText("- 인증번호 변경은 월 " + requestKP.m_strAuthMark + "회에 한해 가능합니다.");
		int iModifyCount = Integer.valueOf(requestKP.m_strAuthModify);
		if (iModifyCount <= 0) {
			txtCertifyStateModify.setText("- 고객님의 변경 가능 횟수는 0회 입니다.");
		} else {
			txtCertifyStateModify.setText("- 고객님의 변경 가능 횟수는 " + requestKP.m_strAuthModify + "회 입니다.");
		}

		m_imgCertifyProfile = (ImageView)findViewById(R.id.img_certify_profile);
		
		if (util_certifyProfile != null) {
			if (util_certifyProfile.m_bitMap != null) {
				util_certifyProfile.m_bitMap.recycle();
			}
		}
		util_certifyProfile = new Util(karaokeHandler);
		util_certifyProfile.setUtilType(UTIL_CERTIFY_PROFILE_IMAGE);
		util_certifyProfile.setImageUrl(requestKP.m_strAuthProfileURL);
		util_certifyProfile.start();
	}
	
	public void ShowScore() {
		if (m_layoutScore != null) {
			((ViewManager)m_layoutScore.getParent()).removeView(m_layoutScore);
			m_layoutScore = null;
		}
		
		LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
		m_layoutScore = (LinearLayout)inf.inflate(R.layout.score, null);
		@SuppressWarnings("deprecation")
		LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
		addContentView(m_layoutScore, param);
		
		String scoreTemp1= MakeRandomScore(5, 9);
		String scoreTemp2= MakeRandomScore(0, 9);
		
		String score1 =  scoreTemp1.substring(0, 1);
		String score2 =  scoreTemp2.substring(0, 1);
		
		LOG(CLASS, "SCORE 1 = " + score1);
		LOG(CLASS, "SCORE 2 = " + score2);
		
		ImageView imgScore01 = (ImageView)findViewById(R.id.img_score_01);
		imgScore01.setImageResource(GetScoreImage(score1));
		
		ImageView imgScore02 = (ImageView)findViewById(R.id.img_score_02);
		imgScore02.setImageResource(GetScoreImage(score2));
		
		ImageView imgScoreComment = (ImageView)findViewById(R.id.img_score_comment);
		
		int s = Integer.parseInt(score1);
		switch(s)
		{
		case 0 :
		case 1 :
		case 2 :
		case 3 :
		case 4 :
		case 5 :
			imgScoreComment.setImageResource(R.drawable.play_comment_50);
			break;
		case 6 :
			imgScoreComment.setImageResource(R.drawable.play_comment_60);
			break;
		case 7 :
			imgScoreComment.setImageResource(R.drawable.play_comment_70);
			break;
		case 8 :
			imgScoreComment.setImageResource(R.drawable.play_comment_80);
			break;
		case 9 :
			imgScoreComment.setImageResource(R.drawable.play_comment_9);
			break;
		}
		
		//String strNextSong = getEngageSong();
		//if (!strNextSong.equals("")) {
			//m_strRequestPlaySongID = strNextSong;
			
			m_timerHideScore = new Timer();
		    
		    TaskHideScore hideTask = new TaskHideScore();
			
		    m_timerHideScore.schedule(hideTask, 3000);
		//}
	}
	
	public void HideScore() {
		if (m_layoutScore != null) {
			((ViewManager)m_layoutScore.getParent()).removeView(m_layoutScore);
			m_layoutScore = null;
			
			String strNextSong = getEngageSong();
			if (!strNextSong.equals("")) {
				// 점수를 제거한 뒤 예약곡 재생
				// 140422 예약된 반주곡을 자동 시작할 때는 중지 처리가 완전히 끝난 뒤에 새 요청 시작 (점수 제거 후)
				m_strRequestPlaySongID = strNextSong;
				m_timerStartNextSong = new Timer();
				TaskStartNextSong startTask = new TaskStartNextSong();
				
				ShowLoading(LONG);
			    m_timerStartNextSong.schedule(startTask, 4000);
			}
		}
	}
	
	public void StartNextSong() {
		deleteEngageSong();
		KP(REQUEST_SONG_PLAY, KP_1016, "", "");
	}
	
	class TaskHideScore extends TimerTask {
	   @Override
	public void run() {
		   sendMessage(TIMER_HIDE_SCORE);
	   }
	}
	
	class TaskStartNextSong extends TimerTask {
	   @Override
	public void run() {
		   sendMessage(TIMER_START_NEXT_SONG);
	   }
	}
	
	class TaskStartCurrentSong extends TimerTask {
		@Override
		public void run() {
			sendMessage(TIMER_START_CURRENT_SONG);
		}
	}
	
	private int GetScoreImage(String s) {
		int score = Integer.parseInt(s);
		
		int d = 0;
		
		switch(score)
		{
		case 0 :
			d = R.drawable.play_score_0;
			break;
		case 1 :
			d = R.drawable.play_score_1;
			break;
		case 2 :
			d = R.drawable.play_score_2;
			break;
		case 3 :
			d = R.drawable.play_score_3;
			break;
		case 4 :
			d = R.drawable.play_score_4;
			break;
		case 5 :
			d = R.drawable.play_score_5;
			break;
		case 6 :
			d = R.drawable.play_score_6;
			break;
		case 7 :
			d = R.drawable.play_score_7;
			break;
		case 8 :
			d = R.drawable.play_score_8;
			break;
		case 9 :
			d = R.drawable.play_score_9;
			break;
		}
		
		return d;
	}
	
	private String MakeRandomScore(int s, int e) {
		return String.valueOf((Math.floor(Math.random() * (e-s+1)) + s));
	}
	
	private void writeKaraoke(String line) {
		String noteName = "kykaraoke.txt";
		
		if (line != null) {
			try {
				OutputStreamWriter out = new OutputStreamWriter(openFileOutput(noteName, 0));
 
				out.write(line);
				out.close();
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
	}
	
	@SuppressLint("SdCardPath")
	private String readKaraoke() {
		final String PATH = "/data/data/kr.kymedia.kykaraoke/files/";
		
		String fileName = "kykaraoke.txt";
		boolean filecheck = false;
		File iFile = new File(PATH);
		if (!iFile.exists()) {
			m_strCertifyedHPNumber = "00000000000";
			return "00000000000";
		}
		
		File[] fList2 = iFile.listFiles();
 
		for (int i = 0; i < fList2.length; i++) {
			String searchFileName = fList2[i].getName();
 
			if (fileName.equals(searchFileName)) {
				filecheck = true;
			}
		}

		if (filecheck == true) {
			try {
				InputStream in = openFileInput(fileName);
 
				if (in != null) {
					InputStreamReader tmp = new InputStreamReader(in);
					BufferedReader reader = new BufferedReader(tmp);
					String str;
					StringBuffer buf = new StringBuffer();
 
					try {
						while ((str = reader.readLine()) != null) {
							buf.append(str);
						}
					} catch (IOException e1) {
						e1.printStackTrace();
					}
					
					try {
						in.close();
						LOG(CLASS, "READ TEXT IS : " + buf.toString());
						m_strCertifyedHPNumber = buf.toString();
						return buf.toString();
					} catch (IOException e) {
						e.printStackTrace();
					}
				}
			} catch (FileNotFoundException e) {
				e.printStackTrace();
			}
		}
		
		m_strCertifyedHPNumber = "00000000000"; 
		return "00000000000";
	}
	
	public void StartPlayActivity() {
		HideLoading();
		
		Intent intent = new Intent(getApplicationContext(), Play.class);
		Bundle bundle = new Bundle();
		bundle.putInt(KEY_ACTIVITY, ACTIVITY_PLAYER);
		bundle.putStringArrayList(SONGPLAYER_SKYM, arrStartPlayList);
		intent.putExtras(bundle);
		startActivity(intent);
	}
	
	public void sendMessage(int state) {
		Bundle b = new Bundle();
		b.putInt("state", state);
		
		Message msg = karaokeHandler.obtainMessage();
		msg.setData(b);
		karaokeHandler.sendMessage(msg);
	}
	
	@SuppressLint({ "HandlerLeak", "CutPasteId" })
	final Handler karaokeHandler = new Handler() {
		@SuppressLint("DefaultLocale")
		@SuppressWarnings("deprecation")
		@Override
		public void handleMessage(Message msg) {
			int state = msg.getData().getInt("state");
    		
    		LOG(CLASS, "handleMessage = " + String.valueOf(state));
    		
    		if (state != TIMER_SHOW_MESSAGE_NOT_RESPONSE) {
    			if (m_taskShowMessageNotResponse!= null) {
    				m_taskShowMessageNotResponse.cancel();
    				m_taskShowMessageNotResponse = null;
    			}
    			
    			if (m_timerShowMessageNotResponse != null) {
	    			m_timerShowMessageNotResponse.cancel();
	    			m_timerShowMessageNotResponse.purge();
	    			m_timerShowMessageNotResponse = null;
    			}
    		}
    		
    		switch(state)
    		{
    		case COMPLETE_MAIN :																							// 메인
    			LOG(CLASS, "[COMPLETE_MAIN]");
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (requestKP.m_strResultCode.equals("99998")) {
    					HideLoading();
    					LOG(CLASS, requestKP.m_strResultMessage);
    					ShowMessageOk(EXIT, getString(R.string.new_version), requestKP.m_strResultMessage);
        			} else {
        				HideLoading();
        				ShowMessageCommon(CLOSE_OK, getString(R.string.info), requestKP.m_strResultMessage);
        			}
    				return;
    			}
    			
    			m_strMid = requestKP.m_strMid;
    			LOG(CLASS, "[m_strMid] = " + m_strMid);
    			m_strMainSingID = requestKP.m_strMainSingID;
    			m_strMainEventID = requestKP.m_strMainEventID;
    			m_strMainCustomerID = requestKP.m_strMainCustomerID;
    			m_strMainRequestListenSongID = requestKP.m_strMainListenID;
    			
    			submenuQuickBtn02 = requestKP.subMainQuickBtn02;
    			
    			m_strMainBackgroundVideoUrl = requestKP.m_strMainBackgroundVideoUrl;
    			LOG(CLASS, "bg video url is " + m_strMainBackgroundVideoUrl);
    			
    			if (requestKP.m_strIsCoupon.equals("Y")) {
    				m_bCouponUser = true;
    				m_strCouponTerm = requestKP.m_strCouponTerm;
    			}
    			
    			setMain();
    			break;
    		case COMPLETE_PROFILE_IMAGE_HOME :																		// 메인 LISTEN 프로필 이미지
    			HideLoading();
    			m_imgProfileHome.setImageBitmap(null);
    			m_imgProfileHome.setImageBitmap(GetBitmapClippedCircle(util_profileHome.m_bitMap));
    			break;
    		case COMPLETE_EVENT_IMAGE :																					// 메인 이벤트 이미지
    			HideLoading();
    			
    			ImageView imgEvent = (ImageView)findViewById(R.id.img_main_event);
    			imgEvent.setImageBitmap(util.m_bitMap);
    			break;
    		case COMPLETE_SONG_LIST :																					// 반주곡 리스트
    			LOG(CLASS, "[COMPLETE_SONG_LIST]");
    			
    			HideLoading();
    			
    			if (m_iPaneState == HOME) {
    				return;
    			}
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					// 에러가 생겨서 곡 목록을 못 불러왔음 : 현재 목록 상태를 다 비워줘
    					LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    					LinearLayout layoutContent = null;
						LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);

    					layoutContent = (LinearLayout)inf.inflate(R.layout.sing_list, null);
    					layoutContent.setLayoutParams(lp);
    					addViewKaraoke(m_layoutContent, layoutContent);
    					
    					// 페이지 정보도 Hidden
    					if (remote.m_iSubMainMenuFocus == 1) {
    						TextView txtPage = (TextView)findViewById(R.id.txt_sing_sub_page);
    						txtPage.setVisibility(View.INVISIBLE);
    					} else if (remote.m_iSubMainMenuFocus == 3) {
    						TextView txtPage = (TextView)findViewById(R.id.txt_my_sub_page);
    						txtPage.setVisibility(View.INVISIBLE);
    					}
    					
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				}
    				return;
    			} else {
    				if (remote.m_iSubMainMenuFocus == 1) {
    					if (remote.m_iSingSubMenuFocus != 3) {
    						TextView txtPage = (TextView)findViewById(R.id.txt_sing_sub_page);
    						txtPage.setVisibility(View.VISIBLE);
    					}
					} else if (remote.m_iSubMainMenuFocus == 3) {
						TextView txtPage = (TextView)findViewById(R.id.txt_my_sub_page);
						txtPage.setVisibility(View.VISIBLE);
					}
    			}
    			
    			// 애창곡 목록에서 애창곡을 삭제한 후 리스트 갱신인 경우 인덱스 / 페이지 보정
				if (m_bIsRefreshFavorList) {
					LOG(CLASS, "MY Favor Refresh");
					
					// 마지막 페이지에서, 마지막 곡을 삭제했을 때
					if (m_iCurrentViewSongListPage == m_iTotalSongListPage && CheckNotContentsSongList()) {
						if (m_iTotalSongListPage == requestKP.m_iTotalPage) {
							LOG(CLASS, "MY Favor Refresh : focus");
							
							// 마지막 곡을 삭제했는데 전페 페이지 수는 그대로 : 포커스만 하나 위로 올림
							remote.m_iSongListFocus = remote.m_iSongListFocus - 1; 
						} else {
							LOG(CLASS, "MY Favor Refresh : page");
							
							// 마지막 곡을 삭제했더니 전체 페이지 수가 줄어듬 : 페이지를 하나 좌로 밈
							m_iCurrentViewSongListPage = m_iCurrentViewSongListPage - 1;
							m_iCurrentSongListPage = m_iCurrentSongListPage - 1;
							remote.m_iSongListFocus = 6;
						}
						
						displayMyList(NONE);
					}
					
					m_bIsRefreshFavorList = false;
				}
    			
    			arraySongListItem = requestKP.arraySongItem; 
    			m_iTotalSongListPage = requestKP.m_iTotalPage;
    			
    			if (remote.m_iSubMainMenuFocus == 3) {
    				moveMyListPage();
    			} else if (remote.m_iSubMainMenuFocus == 1) {
    				moveSongListPage();
    			}
    			
    			if (remote.m_iState == STATE_SONG_LIST) {
    				displaySongList(NONE);
    			} else if (remote.m_iState == STATE_MY_LIST) {
    				displayMyList(NONE);
    			}
    			break;
    		case COMPLETE_SONG_PLAY :																					// 반주곡 시작
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				}
    				return;
    			}
    			
    			m_strPlaySongUrl = requestKP.m_strPlaySongUrl;
    			m_strPlayVideoUrl = requestKP.m_strPlayVideoUrl;
    			m_strPlaySongType = requestKP.m_strPlaySongType;
    			
    			download = new Download(karaokeHandler);
    			download.setFileName("sing.skym");
    			download.setType(FILE_SONG);
    			download.setUrl(m_strPlaySongUrl);
    			download.newPath = sdPath;
    			download.start();
    			break;
    		case COMPLETE_SONG :																							// 반주곡 파일 다운로드
    			Log.i("BOXTEST", "COMPLETE_SONG");
    			//HideLoading();
    			
    			String temp = sdPath + File.separator + "sing.skym";
    			arrStartPlayList.clear();
    			arrStartPlayList.add(temp);

    			/*
    			 * 동영상 배경화면을 사용할 시, 반주곡 재생시키면서 플레이
    			 */
    			
    			if (!m_strPlayVideoUrl.equals("")) {
    	    		video.startBackgroundVideo(m_strPlayVideoUrl, NEWDRAW);
    	    	}
    	    	
    	    	
    	    	//StartPlayActivity();
    			break;
    		case COMPLETE_SONG_PLAYED_TIME :																		// 반주곡 재생 종료 시간 로그
    			break;
    		case COMPLETE_FAVOR :																							// 애창곡 등록 or 삭제
    			LOG(CLASS, "[COMPLETE_FAVOR]");
    			
    			HideLoading();
    			
    			LOG(CLASS, "FAVOR Result Code : " + requestKP.m_strResultCode);
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strFavorResult);
    			
    			// 애창곡 목록에서 애창곡이 삭제된 경우 현재 페이지의 목록을 다시 불러와야 함
    			if (m_bIsRefreshFavorList) {
    				// 애창곡이 하나밖에 없었는데 삭제한거면 목록 요청 없이 첫번째 곡 비워주고 서브메뉴로 포커스 이동
    				if (m_iCurrentViewSongListPage == 1 && remote.m_iSongListFocus == 1 && CheckNotContentsSongList()) {
    					m_bIsRefreshFavorList = false;
    					
    					TextView txt_number = (TextView)findViewById(R.id.txt_sing_number_1);
    					TextView txt_title = (TextView)findViewById(R.id.txt_sing_title_1);
    					TextView txt_singer = (TextView)findViewById(R.id.txt_sing_singer_1);
    					ImageView imgIcon = (ImageView)findViewById(R.id.img_sing_icon_1);
    					
    					txt_number.setText("");
    					txt_title.setText("");
    					txt_singer.setText("");
    					imgIcon.setVisibility(View.INVISIBLE);
    					
    					exitMyList();
    					return;
    				}
    			}
    			
    			String OP = "";
    			String M1 = "";
    			String M2 = "";
    			
    			switch(remote.m_iState)
    			{
    			case STATE_SONG_LIST :
    				OP = KP_1000;
    				
    				switch(remote.m_iSingSubMenuFocus)
        			{
        			case 1 :
        				M1 = MENU_SING;
        				M2 = SING_HOT;
        				break;
        			case 2 :
        				M1 = MENU_SING;
        				M2 = SING_RECENT;
        				break;
        			case 3 :
        				M1 = SING_GENRE;
        				
        				if (remote.m_iSingSubGenreMenuFocus == 1) {
    						M2 = GENRE_1;
    					} else if (remote.m_iSingSubGenreMenuFocus == 2) {
    						M2 = GENRE_2;
    					} else if (remote.m_iSingSubGenreMenuFocus == 3) {
    						M2 = GENRE_3;
    					} else if (remote.m_iSingSubGenreMenuFocus == 4) {
    						M2 = GENRE_4;
    					} else if (remote.m_iSingSubGenreMenuFocus == 5) {
    						M2 = GENRE_5;
    					} else {
    						M2 = GENRE_6;
    					}
        				break;
        			}
    				
    				KP(REQUEST_SONG_LIST, OP, M1, M2);
    				break;
    			case STATE_MY_LIST :
    				OP = KP_3000;
    				
    				switch(remote.m_iMySubMenuFocus)
					{
					case 1 :
						M1 = MENU_MYLIST;
						M2 = MYLIST_RECENT;
						break;
					case 2 :
						M1 = MENU_MYLIST;
						M2 = MYLIST_FAVORITE;
						break;
					}
    				
    				KP(REQUEST_SONG_LIST, OP, M1, M2);
    				break;
    			case STATE_SEARCH_LIST :
    				OP = KP_0020;
    				M1 = MENU_SEARCH;
    				
    				switch(remote.m_iSearchSubMenuFocus)
					{
					case 1 :
						if (m_iSearchSelfMode == TITLE) {
							M2 = SEARCH_1;
						} else {
							M2 = SEARCH_2;
						}
						break;
					case 2 :
						M2 = SEARCH_4;
						break;
					}
    				
    				KP(REQUEST_SEARCH_LIST, OP, M1, M2);
    				break;
    			}
    			break;
    		case COMPLETE_LISTEN_LIST :																					// 녹음곡 리스트
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				HideLoading();
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			m_iTotalListenListPage = requestKP.m_iTotalPage;
    			arrayListenListItem = requestKP.arrayListenItem;
    			
    			moveListenListPage();
    			
    			if (m_iCurrentViewListenListPage == m_iTotalListenListPage) {
    				CheckNotItemOnListenList();
    			}
    			break;
    		case COMPLETE_MY_RECORD_LIST :																			// (마이)녹음곡 리스트
    			HideLoading();
    			
    			LayoutInflater infMyRecord = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				LinearLayout layoutMy = null;
				
    			if (requestKP.m_strMyDate.equals("null")) {
    				HideLoading();
    				
    				m_iTotalListenListPage = -1;
    				
    				layoutMy = (LinearLayout)infMyRecord.inflate(R.layout.my_record_before_certify, null);
    				layoutMy.setLayoutParams(lp);
    				addViewKaraoke(m_layoutContent, layoutMy);
    				return;
    			}
    			
    			m_iTotalListenListPage = requestKP.m_iTotalPage;
    			arrayListenListItem = requestKP.arrayListenItem;
    			
    			if (m_iTotalListenListPage == 0) {
    				m_bIsCertifyedUser = true;
    				layoutMy = (LinearLayout)infMyRecord.inflate(R.layout.my_record, null);
    			} else {
    				m_bIsCertifyedUser = true;
    				layoutMy = (LinearLayout)infMyRecord.inflate(R.layout.my_record_list, null);
    			}
    			
    			layoutMy.setLayoutParams(lp);
				addViewKaraoke(m_layoutContent, layoutMy);
    			
    			moveMyRecordListPage();
    			break;
    		case COMPLETE_MY_RECORD_PROFILE_IMAGE :																// 녹음곡 리스트 : 프로필 이미지 8
    			HideLoading();
    			m_imgMyRecordProfile.setImageBitmap(null);
    			m_imgMyRecordProfile.setImageBitmap(util_myRecordProfile.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_1 :																			// 녹음곡 리스트 : 프로필 이미지 1
    			HideLoading();
    			m_imgProfile01.setImageBitmap(null);
    			m_imgProfile01.setImageBitmap(util_profile01.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_2 :																			// 녹음곡 리스트 : 프로필 이미지 2
    			HideLoading();
    			m_imgProfile02.setImageBitmap(null);
    			m_imgProfile02.setImageBitmap(util_profile02.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_3 :																			// 녹음곡 리스트 : 프로필 이미지 3
    			HideLoading();
    			m_imgProfile03.setImageBitmap(null);
    			m_imgProfile03.setImageBitmap(util_profile03.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_4 :																			// 녹음곡 리스트 : 프로필 이미지 4
    			HideLoading();
    			m_imgProfile04.setImageBitmap(null);
    			m_imgProfile04.setImageBitmap(util_profile04.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_5 :																			// 녹음곡 리스트 : 프로필 이미지 5
    			HideLoading();
    			m_imgProfile05.setImageBitmap(null);
    			m_imgProfile05.setImageBitmap(util_profile05.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_6 :																			// 녹음곡 리스트 : 프로필 이미지 6
    			HideLoading();
    			m_imgProfile06.setImageBitmap(null);
    			m_imgProfile06.setImageBitmap(util_profile06.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_7 :																			// 녹음곡 리스트 : 프로필 이미지 7
    			HideLoading();
    			m_imgProfile07.setImageBitmap(null);
    			m_imgProfile07.setImageBitmap(util_profile07.m_bitMap);
    			break;
    		case COMPLETE_PROFILE_IMAGE_8 :																			// 녹음곡 리스트 : 프로필 이미지 8
    			HideLoading();
    			m_imgProfile08.setImageBitmap(null);
    			m_imgProfile08.setImageBitmap(util_profile08.m_bitMap);
    			break;
    		case COMPLETE_LISTEN_OTHER :																				// 이 녹음곡의 다른 사람 녹음곡 리스트
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				HideLoading();
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			m_iTotalListenOtherListPage = requestKP.m_iTotalPage;
    			arrayListenListItem = requestKP.arrayListenItem;
    			setListenOtherPage();
    			SetListenOtherFocus(NONE);
    			break;
    		case COMPLETE_LISTEN_SONG :																					// 녹음곡 재생 정보
    		case COMPLETE_LISTEN_OTHER_SONG :
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				HideLoading();
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			m_strListenSongUrl = requestKP.m_strListenSongUrl;
    			m_strListeningSongID = requestKP.m_strListeningSongID;
    			
    			download = new Download(karaokeHandler);
    			download.setFileName("listen.m4a");
    			if (state == COMPLETE_LISTEN_SONG) {
    				download.setType(FILE_LISTEN);
    			} else {
    				download.setType(FILE_LISTEN_OTHER);
    			}
    			download.setUrl(m_strListenSongUrl);
    			download.newPath = sdPath;
    			download.start();
    			break;
    		case COMPLETE_LISTEN :																							// 녹음곡 파일 다운로드
    		case COMPLETE_LISTEN_OTHER_DOWN :
    			HideLoading();
    			
    			String path = getApplicationContext().getExternalFilesDir(null) + "/listen.m4a";
    			
    			listen = new ListenPlay();
    			listen.setFile(path);
    			
    			remote.m_iState = STATE_LISTENING;
    			
    			if (state == COMPLETE_LISTEN) {
    				setListeningState();
    			} else {
    				setListeningOtherState();
    			}
    			break;
    		case COMPLETE_CUSTOMER_LIST :																				// 공지사항 or 이용안내 리스트
    			LOG(CLASS, "[COMPLETE_CUSTOMER_LIST]");
    			
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    					return;
    				}
    			}
    			
    			arrayCustomerListItem = requestKP.arrayCustomerItem; 
    			m_iTotalCustomerListPage = requestKP.m_iTotalPage;
    			m_iCustomerListItemCount = 0;
    			
    			moveCustomerListPage();
    			break;
    		case COMPLETE_CUSTOMER_LIST_DETAIL :																	// 공지사항 or 이용안내 상세 정보
    			LOG(CLASS, "[COMPLETE_CUSTOMER_LIST_DETAIL]");
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				HideLoading();
    				
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    					return;
    				}
    			}
    			
    			LinearLayout layoutCustomerBack = (LinearLayout)findViewById(R.id.layout_sing);
    			SettingListBackground(layoutCustomerBack, R.drawable.sing_bg);
    			
    			arrayCustomerDetailUrl = requestKP.arrayCustomerDetailUrl;
    			
    			if (remote.m_iCustomerSubMenuFocus == 1) {
    				m_strEventDetailType = requestKP.m_strEventDetailType;
    				m_strEventDetailTerm = requestKP.m_strEventDetailTerm;
    				m_strEventDetailStats = requestKP.m_strEventDetailStats;
    			}
    			
    			setCustomerDetailContent();
    			break;
    		case COMPLETE_CUSTOMER_DETAIL_IMAGE :																// 공지사항 or 이용안내 상세 이미지
    			HideLoading();
    			
    			ImageView imgCustomer = (ImageView)findViewById(R.id.img_customer_detail_content);
    			imgCustomer.setImageBitmap(util.m_bitMap);
    			break;
    		case COMPLETE_EVENT_DETAIL_ON :
    			m_bitMapEventOn = util.m_bitMap;
    			
    			util = new Util(karaokeHandler);
    			util.setUtilType(UTIL_EVENT_DETAIL_OFF);
    			String tempEventDetailUrl = arrayCustomerDetailUrl.get(0);
    			String off = tempEventDetailUrl.substring(0, tempEventDetailUrl.length() - 5);
    			off = off + "2.png";
    			util.setImageUrl(off);
    			util.start();
    			break;
    		case COMPLETE_EVENT_DETAIL_OFF :																// 공지사항 or 이용안내 상세 이미지
    			HideLoading();
    			
    			m_bitMapEventOff = util.m_bitMap;
    			
    			ImageView imgEventDetailOn = (ImageView)findViewById(R.id.img_customer_detail_content);
    			imgEventDetailOn.setImageBitmap(m_bitMapEventOn);
    			break;
    		case COMPLETE_SEARCH_LIST :																					// 검색 리스트
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			// 직접 검색
    			if (remote.m_iSearchSubMenuFocus == 1) {
	    			LinearLayout layoutTip = (LinearLayout)findViewById(R.id.layout_search_self_list_tip);
	    			layoutTip.setVisibility(View.GONE);
	    			
	    			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_search_self_list_list);
	    			layoutList.setVisibility(View.VISIBLE);
	    		// 색인 검색
    			} else {
    				LinearLayout layoutTip = (LinearLayout)findViewById(R.id.layout_search_letter_list_tip);
	    			layoutTip.setVisibility(View.GONE);
	    			
	    			LinearLayout layoutList = (LinearLayout)findViewById(R.id.layout_search_letter_list_list);
	    			layoutList.setVisibility(View.VISIBLE);
    			}
    			
    			arraySearchListItem = requestKP.arraySongItem; 
    			m_iTotalSearchListPage = requestKP.m_iTotalPage;
    			
    			moveSearchListPage();
    			
    			if (m_iRequestSearchListPage == 1) {
    				if (remote.m_iSearchSubMenuFocus == 1) {
    					EditText editWord = (EditText)findViewById(R.id.edit_search_self_word);
    					editWord.setBackgroundResource(R.drawable.search_input_off);
    					if (m_iVender != SMART_BOX) {
    						Button btnOk = (Button)findViewById(R.id.btn_search_self_ok);
    						btnOk.setBackgroundResource(R.drawable.search_ok_btn_off);
    					}
    				} else {
    					m_iSearchLetterDisplay = SELECTED;
    					displaySearchLetter(INIT);
    					m_iSearchLetterDisplay = ON;
    				}
    			}
    			
    			remote.m_iState = STATE_SEARCH_LIST;
    			displaySearchList(NONE);
    			break;
    		case COMPLETE_NUMBER_SEARCH :																				// 곡번호 검색
    			HideLoading();
    			
    			if (requestKP.m_strResultCode.equals("00901")) {
    				LOG(CLASS, "NO Number Search Result");
    				m_bHaveNumberSearchResult = false;
    				ShowNumberSearchResult(getString(R.string.search_not_result));
    				return;
    			}
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				m_bHaveNumberSearchResult = false;
    				ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    				return;
    			}
    			
    			LOG(CLASS, "Got Number Search Result");
    			m_bHaveNumberSearchResult = true;
    			ShowNumberSearchResult(requestKP.m_strNumberSearchResult);
    			break;
    		case COMPLETE_AUTH_NUMBER :
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				// auth_num 인증번호, 즉 requestKP.m_strResponseAuthNumber가 안왔으면 문제가 있는거고,
    				// 이 경우 추가 메세지 박스를 띄우지 않고 인증번호 입력 팝업창 텍스트에 바로 결과를 찍어준다
    				if (requestKP.m_strResponseAuthNumber.equals("null") || requestKP.m_strResponseAuthNumber.equals("")) {
    					if (remote.m_iState == STATE_CERTIFY_HP) {
	    					TextView txtCertifyHPMessage = (TextView)findViewById(R.id.txt_certify_hp_message_auth);
	    					txtCertifyHPMessage.setText(requestKP.m_strResultMessage);
    					} else {
	    					TextView txtCertifyMessage = (TextView)findViewById(R.id.txt_certify_message);
	    					txtCertifyMessage.setText(requestKP.m_strResultMessage);
	    					
	    					if (m_bIsCertifyTimerActivated) {
	        					m_cdTimer.cancel();
	        				}
	        				
	        				TextView txtCertifyLastTimer = (TextView)findViewById(R.id.txt_certify_last_time);
	        				TextView txtCertifyTimer = (TextView)findViewById(R.id.txt_certify_timer);
	        				txtCertifyLastTimer.setText("");
	    					txtCertifyTimer.setText("");
    					}
    					return;
    				}
    			}
    			
    			m_strResponseAuthNumber = requestKP.m_strResponseAuthNumber;
    			
    			// 휴대폰 번호 입력 팝업 삭제
    			if (remote.m_iState != STATE_CERTIFY) {
					remote.m_iCertifyHPFocusX = 1;
					remote.m_iCertifyHPFocusY = 1;
					((ViewManager)m_layoutCertifyHP.getParent()).removeView(m_layoutCertifyHP);
    			} else {
    				if (m_bIsCertifyTimerActivated) {
    					m_cdTimer.cancel();
    				}
    				
    				exitCertifyNumber();
    			}
				
				// 인증 번호 입력 팝업 출력
    			remote.m_iCertifyFocusX = 1;
    			remote.m_iCertifyFocusY = 1;
    			
				LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				m_layoutCertify = (LinearLayout)inf.inflate(R.layout.message_certify, null);
				LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				addContentView(m_layoutCertify, param);
				ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
			    setGlobalFont(root);
				
				remote.m_iState = STATE_CERTIFY;
				
				displayCertify(NONE);
				
				m_iCertifyTimerSec = 0;
				m_iCertifyTimerMin = 3;
				
				TextView txtCertifyLastTime = (TextView)findViewById(R.id.txt_certify_last_time);
				txtCertifyLastTime.setVisibility(View.VISIBLE);
				
				m_cdTimer = new CountDownTimer(180000, 1000) {
					@Override
					public void onTick(long millisUntilFinished) {
						m_iCertifyTimerSec--;
						
						if (m_iCertifyTimerSec == -1) {
							m_iCertifyTimerSec = 59;
							m_iCertifyTimerMin--;
						}
						
						String strCertifyTimerSec = String.format("%02d", m_iCertifyTimerSec);
						String strCertifyTimerMin = String.format("%02d", m_iCertifyTimerMin);
						
						TextView txtCertifyTimer = (TextView)findViewById(R.id.txt_certify_timer);
						txtCertifyTimer.setText(strCertifyTimerMin + " : " + strCertifyTimerSec);
						
						if (m_iCertifyTimerSec == 0 && m_iCertifyTimerMin == 0) {
							this.cancel();
						}
					}
					
					@Override
					public void onFinish() {
						m_bIsCertifyTimerActivated = false;
						
						TextView txtCertifyLastTime = (TextView)findViewById(R.id.txt_certify_last_time);
						txtCertifyLastTime.setVisibility(View.GONE);
						
						TextView txtCertifyTimer = (TextView)findViewById(R.id.txt_certify_timer);
						txtCertifyTimer.setText("3분이 초과되어 인증 번호 재전송이 필요합니다.");
					}
				}.start();
				
				m_bIsCertifyTimerActivated = true;
				
				m_iCertifyTimerMinPopup = 3;
				m_iCertifyTimerSecPopup = 0;
				
				m_cdTimerPopup = new CountDownTimer(180000, 1000) {
					@Override
					public void onTick(long millisUntilFinished) {
						m_iCertifyTimerSecPopup--;
						
						if (m_iCertifyTimerSecPopup == -1) {
							m_iCertifyTimerSecPopup = 59;
							m_iCertifyTimerMinPopup--;
						}
						
						if (m_iCertifyTimerSecPopup == 0 && m_iCertifyTimerMinPopup == 0) {
							this.cancel();
						}
					}
					
					@Override
					public void onFinish() {
						m_bIsCertifyTimerActivatedPopup = false;
					}
				}.start();
				
				m_bIsCertifyTimerActivatedPopup = true;
    			break;
    		case COMPLETE_CERTIFY_STATE :
    			LayoutInflater infCertify = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
				LinearLayout.LayoutParams lpShopCertify = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
				
    			if (requestKP.m_strAuthDate.equals("null")) {
					HideLoading();
    				
    				LinearLayout layoutShopCertify = (LinearLayout)infCertify.inflate(R.layout.shop_certify, null);
    				layoutShopCertify.setLayoutParams(lpShopCertify);
    				addViewKaraoke(m_layoutContent, layoutShopCertify);
    				
    				m_iAuthModify = 1;
				} else {
    				LinearLayout layoutShopCertify = (LinearLayout)infCertify.inflate(R.layout.shop_certify_already, null);
    				layoutShopCertify.setLayoutParams(lpShopCertify);
    				addViewKaraoke(m_layoutContent, layoutShopCertify);
    				
    				SetCertifyState();
    				
    				m_iAuthModify = Integer.parseInt(requestKP.m_strAuthModify);
    				
    				m_bIsCertifyedUser = true;
    				
    				if (remote.m_iState == STATE_SHOP_CERTIFY) {
    					LinearLayout layoutCertify = (LinearLayout)findViewById(R.id.layout_already_certify);
        				layoutCertify.setBackgroundResource(R.drawable.shop_already_notify_on);
    				}
				}
    			break;
    		case COMPLETE_EVENT_APPLY :
    			LOG(CLASS, "[COMPLETE_EVENT_APPLY]");
    			
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    					return;
    				}
    			}
    			
    			remote.m_iCertifyHPFocusX = 1;
    			remote.m_iCertifyHPFocusY = 1;
    			
    			LayoutInflater infEvent = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    			m_layoutEventHP = (LinearLayout)infEvent.inflate(R.layout.message_hp_event, null);

    			LinearLayout.LayoutParams paramEvent = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
    			addContentView(m_layoutEventHP, paramEvent);
    			ViewGroup rootEvent = (ViewGroup)findViewById(android.R.id.content);
    		    setGlobalFont(rootEvent);
    			
    			remote.m_iState = STATE_EVENT_HP;
    			
    			displayCertifyHP(NONE);
    			break;
    		case COMPLETE_EVENT_HP :
    			LOG(CLASS, "[COMPLETE_EVENT_APPLY]");
    			
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    					return;
    				}
    			}
    			
    			exitCertifyHP();
    			ShowMessageOk(OK, getString(R.string.info), requestKP.m_strResultMessage);
    			break;
    		case COMPLETE_CERTIFY_PROFILE_IMAGE :
    			HideLoading();
    			m_imgCertifyProfile.setImageBitmap(null);
    			m_imgCertifyProfile.setImageBitmap(util_certifyProfile.m_bitMap);
    			break;
    		case COMPLETE_AUTH_NUMBER_CORRECT :
    			HideLoading();
    			
    			//if (m_strInputAuthNumber.equals(m_strResponseAuthNumber)) {
    			if (requestKP.m_strResultCode.equals("00001")) {
    				if (m_bIsCertifyTimerActivated) {
    					m_cdTimer.cancel();
    				}
    				
    				exitCertifyNumber();
    				
    				ShowMessageOk(OK, getString(R.string.certify_success), requestKP.m_strResultMessage);
    				//ShowMessageOk(OK, getString(R.string.certify_success), getString(R.string.certify_success_message));
    				m_bIsCertifyedUser = true;
    				
    				// 인증이 완료되었으므로 전화번호를 로컬에 저장하자
    				writeKaraoke(m_strHPNumber);
    				
    				KP(REQUEST_CERTIFY_STATE, KP_9000, MAIN, MENU);
    			} else {
    				/*
    				if (m_bIsCertifyTimerActivated) {
    					m_cdTimer.cancel();
    				}
    				
    				TextView txtCertifyLastTimer = (TextView)findViewById(R.id.txt_certify_last_time);
    				TextView txtCertifyTimer = (TextView)findViewById(R.id.txt_certify_timer);
    				txtCertifyLastTimer.setText("");
					txtCertifyTimer.setText("");
					*/
    				
					TextView txtCertifyMessage = (TextView)findViewById(R.id.txt_certify_message);
					txtCertifyMessage.setText(requestKP.m_strResultMessage);
    			}
    			break;
    		case COMPLETE_MY_SUB_MENU :
    			HideLoading();
    			/*
    			if (requestKP.arraySubMenuItem.size() == 3) {
    				if (requestKP.arraySubMenuItem.get(2).m2.equals(MYLIST_RECORD)) {
    					Button btnRecord = (Button)findViewById(R.id.btn_my_sub_record);
    					btnRecord.setVisibility(View.VISIBLE);
    				}
    			}
    			*/
    			
    			if (remote.m_iSubMainMenuFocus == 3) {
    				Button btnRecord = (Button)findViewById(R.id.btn_my_sub_record);
    				btnRecord.setVisibility(View.VISIBLE);
    			
    				KP(REQUEST_SONG_LIST, KP_3000, MENU_MYLIST, MYLIST_RECENT);
    			}
    			break;
    		case COMPLETE_SHOP_SUB_MENU :
    			HideLoading();
    			/*
    			if (requestKP.arraySubMenuItem.size() == 2) {
    				if (requestKP.arraySubMenuItem.get(1).m2.equals(SHOP_AUTH)) {
    					Button btnCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
    					btnCertify.setVisibility(View.VISIBLE);
    				}
    			}
    			*/
    			
    			
    			Button btnCertify = (Button)findViewById(R.id.btn_shop_sub_certify);
				btnCertify.setVisibility(View.VISIBLE);
    			
    			
    			break;
    		case TIMER_HIDE_MESSAGE_COMMON :
    			HideMessageCommon();
    			break;
    		case TIMER_SHOW_MESSAGE_NOT_RESPONSE :
    			if (m_timerShowMessageNotResponse == null) {
    				return;
    			}
    			
    			if (remote.m_iState == STATE_SEARCH_SELF) {
    				ShowMessageNotResponse(getString(R.string.info), getString(R.string.search_not_result));
    			} else {
    				ShowMessageNotResponse(getString(R.string.info), getString(R.string.network_timeout));
    			}
    			break;
    		case TIMER_HIDE_SCORE :
    			HideScore();
    			break;
    		case TIMER_START_NEXT_SONG :
    			StartNextSong();
    			break;
    		case TIMER_START_CURRENT_SONG :
    			KP(REQUEST_SONG_PLAY, KP_1016, "", "");
    			break;
    		case COMPLETE_MAIN_QUICK_IMAGE_01_ON :
    			break;
    		case COMPLETE_MAIN_QUICK_IMAGE_01_OFF :
    			break;
    		case COMPLETE_MAIN_QUICK_IMAGE_02_ON :
    			break;
    		case COMPLETE_MAIN_QUICK_IMAGE_02_OFF :
    			m_imgMainQuickBtn02.setImageBitmap(util_mainQuickBtnOff02.m_bitMap);
    			break;
    		case COMPLETE_TICKET_SALES_STATE :
    			//HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				HideLoading();
    				return;
    			}
    			
    			ticketitem01 = requestKP.ticketitem01;
    			ticketitem02 = requestKP.ticketitem02;
    			
    			LayoutInflater infShopTicket = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
    			LinearLayout.LayoutParams lpShopTicket = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
    			
    			LinearLayout layoutShopTicket = (LinearLayout)infShopTicket.inflate(R.layout.shop_ticket, null);
    			layoutShopTicket.setLayoutParams(lpShopTicket);
    			addViewKaraoke(m_layoutContent, layoutShopTicket);
    			
    			if (requestKP.m_bShowCouponMenu) {
    				remote.m_bShowCouponMenu = true;
    				findViewById(R.id.btn_shop_tab_coupon).setVisibility(View.VISIBLE);
    			} else {
    				remote.m_bShowCouponMenu = false;
    				findViewById(R.id.btn_shop_tab_coupon).setVisibility(View.INVISIBLE);
    			}
    			
    			TextView txtTicketPrice = (TextView)findViewById(R.id.txt_shop_price);
    			txtTicketPrice.setText(ticketitem01.prise + "원");
    			
    			
    			util_shopItem01 = new Util(karaokeHandler);
    			util_shopItem01.setUtilType(UTIL_SHOP_ITEM_01);
    			util_shopItem01.setImageUrl(ticketitem01.url);
    			util_shopItem01.start();
    			
    			break;
    		case COMPLETE_SHOP_ITEM_01 :
    			ImageView item1 = (ImageView)findViewById(R.id.img_shop_item_01);
    			item1.setImageBitmap(util_shopItem01.m_bitMap);
    			
    			m_bitMapShopItem01 = util_shopItem01.m_bitMap;
    			
    			util_shopItem02 = new Util(karaokeHandler);
    			util_shopItem02.setUtilType(UTIL_SHOP_ITEM_02);
    			util_shopItem02.setImageUrl(ticketitem02.url);
    			util_shopItem02.start();
    			break;
    		case COMPLETE_SHOP_ITEM_02 :
    			HideLoading();
    			
    			m_bitMapShopItem02 = util_shopItem02.m_bitMap;
    			break;
    		case COMPLETE_COUPON_REGIST :
    			HideLoading();
    			
    			if (!requestKP.m_strResultCode.equals("00000")) {
    				if (!requestKP.m_strResultMessage.equals("")) {
    					ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    					return;
    				}
    			}
    			
    			ShowMessageCommon(CLOSE_AUTO, getString(R.string.info), requestKP.m_strResultMessage);
    			
    			m_bCouponUser = true;
    			m_strCouponTerm = requestKP.m_strCouponTerm;
    			
    			m_bIsFocusedOnTicket = false;
    			m_iCouponFocus = 1;
    			remote.m_iShopTicketFocusY = 1;
    			
    			LinearLayout layoutTicket = (LinearLayout)findViewById(R.id.layout_shop_ticket);
    			Button btnCoupon = (Button)findViewById(R.id.btn_shop_tab_coupon);
    			LinearLayout layoutRegisted = (LinearLayout)findViewById(R.id.layout_coupon_registed);
				LinearLayout layoutRegist = (LinearLayout)findViewById(R.id.layout_coupon_not_regist);
    			
    			layoutRegisted.setVisibility(View.VISIBLE);
				layoutRegist.setVisibility(View.GONE);
				
				btnCoupon.setBackgroundResource(R.drawable.shop_ticket_tab_on);
				layoutTicket.setBackgroundResource(R.drawable.shop_coupon_bg_registed_on);
				
				TextView txtCouponTerm = (TextView)findViewById(R.id.txt_coupon_term);
				txtCouponTerm.setText(m_strCouponTerm);
				
				TextView txtBottomProduct = (TextView)findViewById(R.id.txt_bottom_product);
				txtBottomProduct.setText(m_strCouponTerm);
    			break;
    		case COMPLETE_KY_LOGO :
    			ImageView logo = (ImageView)findViewById(R.id.img_ky_logo);
    			logo.setImageBitmap(util_kyLogo.m_bitMap);
    			
    			m_bitMapKYLogo = util_kyLogo.m_bitMap;
    			break;
    		case COMPLETE_MIC :
    			m_bitMapMic = util_MIC.m_bitMap;
    			break;
    		}
		}
	};
	
	@SuppressLint("HandlerLeak")
	final Handler vassHandler = new Handler() {
		@SuppressLint({ "SimpleDateFormat", "CutPasteId" })
		@SuppressWarnings("deprecation")
		@Override
		public void handleMessage(Message msg) {
			int state = msg.getData().getInt("state");
    		
    		LOG(CLASS, "handleMessage = " + String.valueOf(state));
    		
    		switch(state)
    		{
    		case COMPLETE_VASS_DAY_CHECK :
    			/*
    			m_strHasTicket = TICKET_DAY;
    			m_strPassType = m_strHasTicket;
    			LOG(CLASS, "TICKET = " + m_strPassType);
    			TextView txtBottomProductDay = (TextView)findViewById(R.id.txt_bottom_product);
    			txtBottomProductDay.setText("1일 이용권 사용 중 " + requestVASS.m_strTicketDayAvailableDate);
    			
    			KP(REQUEST_MAIN, KP_0000, MAIN, MENU);
    			*/
    			/*
    			m_strHasTicket = TICKET_NONE;
    			m_strPassType = TICKET_NONE;
    			KP(REQUEST_MAIN, KP_0000, MAIN, MENU);
    			*/
    			
    			if (requestVASS.m_strResult.equals("Y")) {
	    			m_strHasTicket = TICKET_DAY;
	    			m_strPassType = m_strHasTicket;
	    			LOG(CLASS, "TICKET = " + m_strPassType);
	    			TextView txtBottomProductDay = (TextView)findViewById(R.id.txt_bottom_product);
	    			txtBottomProductDay.setText("1일 이용권 사용 중 " + requestVASS.m_strTicketDayAvailableDate);
	    			
	    			
	    			
	    			KP(REQUEST_MAIN, KP_0000, MAIN, MENU);
    			} else {
    				VASS(REQUEST_VASS_MONTH_CHECK);
    			}
    			
    			break;
    		case COMPLETE_VASS_MONTH_CHECK :
    			
    			TextView txtBottomProductMonth = (TextView)findViewById(R.id.txt_bottom_product);
    			
    			if (requestVASS.m_strResult.equals("Y")) {
	    			m_strHasTicket = TICKET_MONTH;
	    			m_strPassType = m_strHasTicket;
	    			LOG(CLASS, "TICKET = " + m_strPassType);
	    			txtBottomProductMonth.setText("월정액 이용권 사용 중");
    			} else {
    				m_strPassType = m_strHasTicket;
    				LOG(CLASS, "TICKET = " + m_strPassType);
	    			txtBottomProductMonth.setText("사용 중인 이용권이 없습니다.");
    			}
    			
    			
    			//m_strHasTicket = TICKET_NONE;
    			//m_strPassType = TICKET_NONE;
    			
    			KP(REQUEST_MAIN, KP_0000, MAIN, MENU);
    			break;
    		case COMPLETE_VASS_DAY_CHECK_PLAY :
    			if (requestVASS.m_strResult.equals("Y")) {
	    			m_strHasTicket = TICKET_DAY;
	    			m_strPassType = m_strHasTicket;

	    			TextView txtBottomProductDay = (TextView)findViewById(R.id.txt_bottom_product);
	    			txtBottomProductDay.setText("1일 이용권 사용 중 " + requestVASS.m_strTicketDayAvailableDate);
	    			
	    			TryPlaySong();
    			} else {
    				VASS(REQUEST_VASS_MONTH_CHECK_PLAY);
    			}
    			break;
    		case COMPLETE_VASS_MONTH_CHECK_PLAY :
    			TextView txtBottomProductMonthPlay = (TextView)findViewById(R.id.txt_bottom_product);
    			
    			if (requestVASS.m_strResult.equals("Y")) {
	    			m_strHasTicket = TICKET_MONTH;
	    			m_strPassType = m_strHasTicket;

	    			txtBottomProductMonthPlay.setText("월정액 이용권 사용 중");
    			} else {
    				m_strHasTicket = TICKET_NONE;
    				m_strPassType = m_strHasTicket;

    				if (m_bCouponUser) {
    					txtBottomProductMonthPlay.setText(m_strCouponTerm);
    				} else {
    					txtBottomProductMonthPlay.setText("사용 중인 이용권이 없습니다.");
    				}
    			}
    			
    			TryPlaySong();
    			break;
    		case COMPLETE_VASS_PASSWORD_FOR_DAY :
    			LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_DAY");
    			
    			if (requestVASS.m_strResult.equals("Y")) {
    				VASS(REQUEST_VASS_DAY_PURCHASE);
    				
    				LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_DAY - result is Y end");
    			} else {
    				HideLoading();
    				
    				TextView txtPassResult = (TextView)findViewById(R.id.txt_message_ticket_pass_info_sub);
					txtPassResult.setText("구매 인증 비밀번호가 올바르지 않습니다.");
					
					LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_DAY - result is not Y end");
    			}
    			break;
    		case COMPLETE_VASS_PASSWORD_FOR_MONTH :
    			LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_MONTH");
    			
    			if (requestVASS.m_strResult.equals("Y")) {
    				VASS(REQUEST_VASS_MONTH_PURCHASE);
    				
    				LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_MONTH - result is Y end");
    			} else {
    				HideLoading();
    				
    				TextView txtPassResult = (TextView)findViewById(R.id.txt_message_ticket_pass_info_sub);
					txtPassResult.setText("구매 인증 비밀번호가 올바르지 않습니다.");
					
					LOG("Main - vassHandler", "COMPLETE_VASS_PASSWORD_FOR_MONTH - result is not Y end");
    			}
    			break;
    		case COMPLETE_VASS_DAY_PURCHASE :
    		case COMPLETE_VASS_MONTH_PURCHASE :
    			LOG("Main - vassHandler", "COMPLETE_VASS_*****_PURCHASE");
    			
    			HideLoading();
    			
    			if (requestVASS.m_strResult.equals("Y")) {
    				LOG("Main - vassHandler", "COMPLETE_VASS_*****_PURCHASE : result is Y");
    				
    				m_layoutPPV.removeAllViews();

					exitPPV();

					LayoutInflater inf = (LayoutInflater)getSystemService(Context.LAYOUT_INFLATER_SERVICE);
					if (m_iProcessTicket == DAY) {
						m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppv_info, null);
					} else {
						m_layoutPPV = (LinearLayout)inf.inflate(R.layout.message_ticket_ppm_info, null);
					}
					LinearLayout.LayoutParams param = new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT);
					addContentView(m_layoutPPV, param);
					ViewGroup root = (ViewGroup)findViewById(android.R.id.content);
				    setGlobalFont(root);
				    
				    remote.m_iState = STATE_MESSAGE_PPV_SUCCESS;
				    
				    LinearLayout layoutOKCancel = (LinearLayout)findViewById(R.id.layout_ppv_okcancel);
				    layoutOKCancel.setVisibility(View.GONE);
				    
				    LinearLayout layoutComment = (LinearLayout)findViewById(R.id.layout_ppv_comment);
				    layoutComment.setVisibility(View.VISIBLE);
				    
				    TextView txtRed = (TextView)findViewById(R.id.txt_message_ticket_day_bill_red);
				    TextView txtBlack = (TextView)findViewById(R.id.txt_message_ticket_day_bill_black);
				    txtRed.setVisibility(View.VISIBLE);
				    txtBlack.setVisibility(View.VISIBLE);
				    
				    if (m_iProcessTicket == DAY) {
				    	//==============================================================tamashii
				    	String temp = requestVASS.m_strPurchaseResult;
				    	
				    	if (m_iVender == SMART_BOX) {
				    		//==============================================================tamashii
				    		temp = temp + "^" + VASS_PRODUCT_ID_DAY_BOX;
				    	} else {
				    		//==============================================================tamashii
				    		temp = temp + "^" + VASS_PRODUCT_ID_DAY_STB;
				    	}
				    	
				    	//TextView txtEngageListMain = (TextView)findViewById(R.id.txt_top_engage_list);
			    		//txtEngageListMain.setText(temp);
				    	
				    	LOG("Main", m_strPurchaseResult);
				    	
				    	m_strPurchaseResult = Base64.encodeToString(temp.getBytes(), Base64.NO_WRAP);
				    	KP(REQUEST_DAY_PURCHASE_COMPLETE, KP_4001, MENU_SHOP, SHOP_TICKET);
				    	
					    long lTime = System.currentTimeMillis();
					    Date date = new Date(lTime);
					    Calendar cal = Calendar.getInstance();
					    cal.setTime(date);
					    cal.add(Calendar.DATE, 1);
					    SimpleDateFormat CurDateFormat = new SimpleDateFormat("yyyy년MM월dd일HH시");
					    String strCurDate = CurDateFormat.format(cal.getTime());
					    
					    TextView txtDate = (TextView)findViewById(R.id.txt_message_ticket_day_late_content);
					    txtDate.setText("1일 (" + strCurDate + "까지)");
					    
					    TextView txtTicketInfo = (TextView)findViewById(R.id.txt_bottom_product);
					    txtTicketInfo.setText("1일 이용권 사용 중 (" + strCurDate + "까지)");
					    
					    m_strHasTicket = TICKET_DAY;
				    } else {
				    	String temp = requestVASS.m_strPurchaseResult;
				    	
				    	if (m_iVender == SMART_BOX) {
				    		//==============================================================tamashii
				    		temp = temp + "^" + "20991231235959" + "^" + VASS_PRODUCT_ID_MONTH_BOX;
				    	} else {
				    		//==============================================================tamashii
				    		temp = temp +  "^" + "20991231235959" + "^" + VASS_PRODUCT_ID_MONTH_STB;
				    	}
				    	
				    	//TextView txtEngageListMain = (TextView)findViewById(R.id.txt_top_engage_list);
			    		//txtEngageListMain.setText(temp);
				    	
				    	LOG("Main", m_strPurchaseResult);
				    	
						m_strPurchaseResult = Base64.encodeToString(temp.getBytes(), Base64.NO_WRAP);
				    	KP(REQUEST_MONTH_PURCHASE_COMPLETE, KP_4001, MENU_SHOP, SHOP_TICKET);
				    	
				    	TextView txtTicketInfo = (TextView)findViewById(R.id.txt_bottom_product);
					    txtTicketInfo.setText(getString(R.string.ticket_have_ppm));
					    
					    TextView txtTicketInfoMonth = (TextView)findViewById(R.id.txt_bottom_product);
					    txtTicketInfoMonth.setText("월정액 이용권 사용 중");
					    
					    m_strHasTicket = TICKET_MONTH;
					    m_bIsGoToCertifyMessage = true;
				    }
				    
				    LOG("Main - vassHandler", "COMPLETE_VASS_*****_PURCHASE : result is Y end");
    			} else {
    				LOG("Main - vassHandler", "COMPLETE_VASS_*****_PURCHASE : result is not Y");
    				
    				String strVASSErrorCode = requestVASS.m_strPurchaseResult.substring(requestVASS.m_strPurchaseResult.length()-4, requestVASS.m_strPurchaseResult.length());
    				
    				TextView txtPassResult = (TextView)findViewById(R.id.txt_message_ticket_pass_info_sub);
					txtPassResult.setText("이용권 구매에 실패했습니다.(" + strVASSErrorCode + ")");
					
					LOG("Main - vassHandler", "COMPLETE_VASS_*****_PURCHASE : result is not Y end");
    			}
    			break;
    		}
		}
	};
	
	public void TryPlaySong() {
		HideBottomGuide01();
		HideBottomGuide02();
		
		// 이용권이 없으면 알림 팝업 띄우고 리턴
		if (m_strHasTicket == TICKET_NONE && !m_bCouponUser) {
			HideLoading();
			
			if (m_taskShowMessageNotResponse!= null) {
				m_taskShowMessageNotResponse.cancel();
				m_taskShowMessageNotResponse = null;
			}
			
			if (m_timerShowMessageNotResponse != null) {
    			m_timerShowMessageNotResponse.cancel();
    			m_timerShowMessageNotResponse.purge();
    			m_timerShowMessageNotResponse = null;
			}
			
			m_bIsGoToPurchaseMessage = true;
			ShowMessageOkCancel(getString(R.string.info), getString(R.string.ticket_have_no));
			return;
		}
		
		requestKP.setSongPlayUrl(KP_1016, "", "", m_strRequestPlaySongID);
		
		requestKP.start();
	}
	
	private void LOG(String tag, String msg) {
		if (P_DEBUG == "debug") {
			Log.i(tag, msg);
		}
	}
}