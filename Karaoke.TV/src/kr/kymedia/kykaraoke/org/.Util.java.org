package kr.kymedia.kykaraoke;

import java.io.*;
import java.net.*;

import android.graphics.*;
import android.os.*;

public class Util extends Thread implements Const {
	Handler m_handler;
	Bitmap m_bitMap;
	String m_strImgUrl;
	int m_iUtilType;
	
	public Util(Handler h) {
		m_handler= h;
		m_bitMap = null;
		m_strImgUrl = "";
		m_iUtilType = 0;
	}
	
	public void setUtilType(int type) {
		m_iUtilType = type;
	}
	
	public void setImageUrl(String url) {
		m_strImgUrl = url;
	}
	
	public void sendMessage(int state) {
		Bundle b = new Bundle();
		b.putInt("state", state);
		
		Message msg = m_handler.obtainMessage();
		msg.setData(b);
		m_handler.sendMessage(msg);
	}
	
	@Override
	public void run() {
		try{
			LoadImageFromWeb();
		}catch(Exception e){
			e.printStackTrace();
		}
	}
	
	public void LoadImageFromWeb() {
        try{
        	/*
            InputStream is = (InputStream) new URL(url).getContent();
            Drawable d = Drawable.createFromStream(is, "src");
            return d;
            */
        	
        	/*
        	URL imageURL = new URL(m_strImgUrl);
        	HttpURLConnection conn = (HttpURLConnection)imageURL.openConnection();             
        	BufferedInputStream bis = new BufferedInputStream(conn.getInputStream(), 10240);
        	Bitmap bm = BitmapFactory.decodeStream(bis);
        	Drawable d = new BitmapDrawable(bm);
        	*/
        	
        	URL imageURL = new URL(m_strImgUrl);
        	HttpURLConnection conn = (HttpURLConnection)imageURL.openConnection();             
        	BufferedInputStream bis = new BufferedInputStream(conn.getInputStream(), 10240);
        	Bitmap bm = BitmapFactory.decodeStream(bis);
        	bis.close();
        	m_bitMap = bm;
        	
        	switch(m_iUtilType)
        	{
        	case UTIL_MAIN_EVENT_IMAGE :
        		sendMessage(COMPLETE_EVENT_IMAGE);
        		break;
        	case UTIL_CUSTOMER_DETAIL_IMAGE :
        		sendMessage(COMPLETE_CUSTOMER_DETAIL_IMAGE);
        		break;
        	case UTIL_PROFILE_IMAGE_1 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_1);
        		break;
        	case UTIL_PROFILE_IMAGE_2 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_2);
        		break;
        	case UTIL_PROFILE_IMAGE_3 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_3);
        		break;
        	case UTIL_PROFILE_IMAGE_4 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_4);
        		break;
        	case UTIL_PROFILE_IMAGE_5 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_5);
        		break;
        	case UTIL_PROFILE_IMAGE_6 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_6);
        		break;
        	case UTIL_PROFILE_IMAGE_7 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_7);
        		break;
        	case UTIL_PROFILE_IMAGE_8 :
        		sendMessage(COMPLETE_PROFILE_IMAGE_8);
        		break;
        	case UTIL_PROFILE_IMAGE_HOME :
        		sendMessage(COMPLETE_PROFILE_IMAGE_HOME);
        		break;
        	case UTIL_CERTIFY_PROFILE_IMAGE :
        		sendMessage(COMPLETE_CERTIFY_PROFILE_IMAGE);
        		break;
        	case UTIL_MY_RECORD_PROFILE_IMAGE :
        		sendMessage(COMPLETE_MY_RECORD_PROFILE_IMAGE);
        		break;
        	case UTIL_MAIN_QUICK_IMAGE_01_ON :
        		sendMessage(COMPLETE_MAIN_QUICK_IMAGE_01_ON);
        		break;
        	case UTIL_MAIN_QUICK_IMAGE_01_OFF :
        		sendMessage(COMPLETE_MAIN_QUICK_IMAGE_01_OFF);
        		break;
        	case UTIL_MAIN_QUICK_IMAGE_02_ON :
        		sendMessage(COMPLETE_MAIN_QUICK_IMAGE_02_ON);
        		break;
        	case UTIL_MAIN_QUICK_IMAGE_02_OFF :
        		sendMessage(COMPLETE_MAIN_QUICK_IMAGE_02_OFF);
        		break;
        	}
        }catch(Exception e){
            System.out.println(e);
        }
    }
}