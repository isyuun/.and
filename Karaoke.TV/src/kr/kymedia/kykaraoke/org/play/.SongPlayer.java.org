package kr.kymedia.kykaraoke.play;

import java.io.*;
import java.util.*;

import kr.kymedia.kykaraoke.*;
import android.annotation.*;
import android.app.*;
import android.content.*;
import android.graphics.*;
import android.media.*;
import android.os.*;
import android.util.*;
import android.view.*;

public class SongPlayer extends Activity implements Const {	
	final static String __CLASSNAME__ = (new Exception()).getStackTrace()[0].getClassName();
	
	private SongData m_data = new SongData();
	private MediaPlayer m_mp = new MediaPlayer();
	private ArrayList<String> m_songList = null;
	private int m_songIdx = 0;
	private int m_imgIdx = 0;
	private PowerManager.WakeLock m_wakeLock = null;
	private Bitmap m_srcBack = null;
	private Bitmap m_dstBack = null;
	private PlayView m_playView = null;
	private boolean m_redraw = false;
	private long m_time = 0L;
	private int m_state = STATE_STOP;
	private int m_marginBottom = 0;
	
	// bgkim 해상도별 폰트 사이즈 유동 조절
	// 아직 시작 안된 가사가 완료된 것으로 표시되는 증상 수정
	private int m_iSongInfoPosition = 0;
	private int m_iTitleFontSize = 0;
	private int m_iLyricsFontSize = 0;
	private int m_iSingerFontSize = 0;
	private int m_iReadyFontSize = 0;
	private int m_iBeforeEnd = 0;
	private int m_iStrokeSize = 0;
	private String m_strContinueLyrics = "";
	private boolean m_bContinue = false;
	private boolean m_bSkipChangeColor = false;
	
	public boolean getReady() {
		return m_playView.playViewThread.m_bReady;
	}
	
	public String getSongTitle() {
		String songTitle = m_data.getLyricsInfoTag().strTitle1 + m_data.getLyricsInfoTag().strTitle2;
		songTitle.replace("\n", "");
		return songTitle;
	}

	public int setSongIdx(int songIdx) {
		this.m_songIdx = songIdx;
		return this.m_songIdx;
	}

	public int getSongIdx() {
		if (m_songIdx < 0 && m_songIdx > m_songList.size()-1) {
			m_songIdx = 0;
		}
		return m_songIdx;
	}

	public void setSongList(ArrayList<String> songList) {
		this.m_songList = songList;
		for (int i = 0; i < m_songList.size(); i++) {
			LOG("songList()", m_songList.get(i));
		}
	}

	public ArrayList<String> getSongList() {
		return m_songList;
	}

	public void setRedraw(boolean redraw) {
		this.m_redraw = redraw;
	}

	public boolean isRedraw() {
		return m_redraw;
	}

	public void setTime(long time) {
		this.m_time = time;
		updateTime();
	}

	public long getTime() {
		return m_time;
	}

	public void setMediaPlayer(MediaPlayer mp) {
		this.m_mp = mp;
	}

	public MediaPlayer getMediaPlayer() {
		return m_mp;
	}

	public void setPlayView(PlayView playView) {
		this.m_playView = playView;
	}

	public PlayView getPlayView() {
		return m_playView;
	}

	public void setDstBack(Bitmap dstBack) {
		this.m_dstBack = dstBack;
	}

	public Bitmap getDstBack() {
		return m_dstBack;
	}

	public int setImgIdx(int imgIdx) {
		this.m_imgIdx = imgIdx;
		return this.m_imgIdx;
	}

	public int getImgIdx() {
		return this.m_imgIdx;
	}

	public void setSrcBack(Bitmap srcBack) {
		this.m_srcBack = srcBack;
	}

	public Bitmap getSrcBack() {
		return m_srcBack;
	}

	public void setState(int state) {
		this.m_state = state;
	}

	public int getState() {
		return m_state;
	}

	public void setMarginBottom(int marginBottom) {
		this.m_marginBottom = marginBottom;
	}

	public int getMarginBottom() {
		return m_marginBottom;
	}

	@SuppressWarnings("deprecation")
	@Override
    public void onCreate(Bundle savedInstanceState) {
		// bgkim 각각의 폰트 사이즈는 비율로 조절
		int h = getWindowManager().getDefaultDisplay().getHeight();
		int w = getWindowManager().getDefaultDisplay().getWidth();
		
		m_iSongInfoPosition = w / 2;
		
		m_iTitleFontSize = h / 13;
		m_iLyricsFontSize = h / 12;
		m_iSingerFontSize = h / 14;
		m_iReadyFontSize = h / 18;
		
        super.onCreate(savedInstanceState);
	}

	@SuppressWarnings("deprecation")
	@Override
	protected void onPostCreate(Bundle savedInstanceState) {
		super.onPostCreate(savedInstanceState);
        
		PowerManager pm = (PowerManager) getSystemService(Context.POWER_SERVICE);
		m_wakeLock = pm.newWakeLock(PowerManager.SCREEN_DIM_WAKE_LOCK, "SongPlayer");
		m_wakeLock.acquire();
		
		String path = "";
        Bundle bundle = getIntent().getExtras();
    	if ( bundle != null ) {
			m_songList = bundle.getStringArrayList(SONGPLAYER_SKYM);
        	
	        if ( m_songList == null || m_songList.size() == 0 ) {
	            path = getApplicationContext().getExternalFilesDir(null) + "/test.skym";
	        } else {
	        	path = m_songList.get(m_songIdx).toString();
	        }
    	} else {
        	path = getApplicationContext().getExternalFilesDir(null) + "/test.skym";
    	}
        
        open(path);
    	play();
	}

    @SuppressLint("Wakelock")
	@Override
    public void onDestroy() {
    	super.onDestroy();

    	if (m_mp != null) {
	    	m_mp.release();
	    	m_mp = null;
	    }
	    
	    if (m_data != null) {
	    	m_data.release();
	    	m_data = null;
	   	}
	    
	    if (m_wakeLock != null) {
	    	m_wakeLock.release();
	    	m_wakeLock = null;
	    }
    }

	public void updateTime() {
		Thread thread = new Thread(null, songTime, "songtime");  
		thread.start();        
	}
	
	private Runnable songTime = new Runnable() {
		@Override
		public void run() {
    		m_playView.playViewThread.rePaint((int)m_time);
			seek((int)m_time);
    		m_redraw = false;
		}
	};
    
    protected boolean open(String path) {
    	LOG(__CLASSNAME__, "open()"+path+"()");
    	
    	try {
    		m_data.release();
			m_data.load(path);
			
			File sourceFile = new File(path);
			if ( sourceFile.exists() )
			{
			    FileInputStream fs = new FileInputStream(sourceFile);
			    FileDescriptor fd = fs.getFD();
			    m_mp.setDataSource(fd);
			    fs.close(); // 데이터 소스를 설정한 후 스트림을 닫았다.
			    m_mp.prepare();
			}
        } catch ( Exception e ) {
        	e.printStackTrace();
        	Log.e(__CLASSNAME__, e.getLocalizedMessage());
        	close();
        	return false;
        }
        
    	return true;
    }
    
    protected void close() {
    	// 반주곡 끝까지 재생 완료, 점수 표시
    	Main mainActivity = (Main)Main.ActivityMain;
		if (mainActivity != null) {
			mainActivity.StopPlaying(STOP);
			mainActivity.ShowScore();
		}
		
    	finish(); 
    }

    MediaPlayer.OnCompletionListener onMediaPlayerComplete = new MediaPlayer.OnCompletionListener() {
		@Override
		public void onCompletion(MediaPlayer arg) {
			close();
		}
	};
    
	MediaPlayer.OnErrorListener onMediaPlayerError = new MediaPlayer.OnErrorListener() {
		@Override
		public boolean onError(MediaPlayer mp, int what, int extra) {
			LOG(__CLASSNAME__, "onMediaPlayerError()"+m_songIdx+"()"+mp+""+what+"()"+extra+"()");
			return true;
		}
	};
	
	public boolean isPlaying() {
		if (m_mp != null) {
			if (m_mp.isPlaying()) {
				return true;
			}
		}
		
		return false;
	}
	
    protected boolean play() {
    	LOG(__CLASSNAME__, "play()");
    	
    	try {
    		if ( m_state == STATE_STOP )
    		{
    			m_mp.start();
        		
    			m_state = STATE_PLAY;

    	    	m_mp.setOnCompletionListener(onMediaPlayerComplete);
    	    	m_mp.setOnErrorListener(onMediaPlayerError);
    		}

        } catch ( Exception e ) {
        	e.printStackTrace();
        	Log.e(__CLASSNAME__, e.getLocalizedMessage());
        	close();
        	return false;
        }
    	
    	return true;
    }

    protected boolean stop() {
    	try {
			m_playView.playViewThread.init();

    		if ( m_state != STATE_STOP ) {
    			m_mp.stop();
    			m_state = STATE_STOP;
    			
        		m_data.release();
                m_mp.reset();
    		}
    	} catch ( Exception e ) {
        	return false;
        }
    	
    	return true;
    }
    
    protected boolean pause() {
    	try {
    		if ( m_state == STATE_PLAY ) {
    			m_mp.pause();
    			m_state = STATE_PAUSE;
    		}
    	} catch ( Exception e ) {
        	return false;
        }
    	
    	return true;
    }
    
    protected boolean resume() {
    	try {
    		if ( m_state == STATE_PAUSE ) {
    			m_mp.start();
    			m_state = STATE_PLAY;
    		}
    	} catch ( Exception e ) {
        	return false;
        }
    	
    	return true;
    }
    
    protected boolean seek(int msec) {
    	try {
    		m_mp.seekTo(msec);
    	} catch ( Exception e ) {
        	return false;
        }
    	
    	return true;
    }
    
	public class PlayView extends SurfaceView implements SurfaceHolder.Callback {
    	private SurfaceHolder 	holder;
    	public PlayViewThread 	playViewThread;
    	private boolean 		hasSurface;

    	public PlayView(Context context) {
    		super(context);
    		init();
    	}
    	
    	private void init() {
    		holder = getHolder();
    		// bgkim 배경을 투명하게
    		holder.setFormat(PixelFormat.TRANSLUCENT);
    		holder.addCallback(this);
    		hasSurface = false;
    		setFocusable(true);
    		setFocusableInTouchMode(true);
    	}
    	
    	public void resume() {
    		LOG("PlayView()", "resume()");
    		if ( playViewThread == null ) {
    			playViewThread = new PlayViewThread();
    			
				if ( hasSurface == true )
					playViewThread.start();
    		}
    	}
    	
    	public void pause() {
    		LOG("PlayView()", "pause()");
    		if ( playViewThread != null ) {
    			playViewThread.requestExitAndWait();
    			playViewThread = null;
    		}
    	}

    	@Override
		public void surfaceCreated(SurfaceHolder holder) {
    		LOG("PlayView()", "surfaceCreated()"+holder+"()");
    		hasSurface = true;

    		if ( playViewThread == null )
    			playViewThread = new PlayViewThread();

   			playViewThread.start();
    	}

    	@Override
		public void surfaceDestroyed(SurfaceHolder holder) {
    		LOG("PlayView()", "surfaceDestroyed()"+holder+"()");
    		hasSurface = false;
    		pause();
    	}

    	@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int w, int h) {
    		LOG("PlayView()", "surfaceChanged()"+holder+"()"+format+"()"+w+"()"+h+"()");
    		if ( playViewThread != null )
    			playViewThread.onWindowResize(w, h);
    	}
    	
    	class PlayViewThread extends Thread {
    		private boolean done;
            private Paint m_paintLyrics;
            private Paint m_paintSinger;
            private Paint m_paintTitle;
            private Paint m_paintReady;
    		private boolean m_bReady;
    		private int m_nInterval;
    		private int m_nTickTime;
    		private int m_nFirstTick;
    		private int m_nEndTime;
    		private int m_nDisplay;
    		private int m_nLinePos;
    		private int m_nSpanTime;
    		private int m_itor;
    		private String m_strReady;
    		private String[] m_strLine = new String[2];
    		private String[] m_strLyrics = new String[2];
    		private Point[] m_ptDrawPos = new Point[2];
    		private String m_strPrev;
    		private String m_strGo;
    		private Point m_ptLyrics;
        	private int	m_width;
        	private int	m_height;
        	private int[] m_nInColor = new int[2];
        	private int[] m_nOutColor = new int[2];
        	private int m_line;
    		
    		PlayViewThread() {
    			super();
    			
    			init();
    			
    			done = false;
    			m_width = 0;
    			m_height = 0;
    			
    			m_ptLyrics	= new Point();
    			m_ptDrawPos[0] = new Point();
    			m_ptDrawPos[1] = new Point();
    			
    			// bgkim 폰트 TYPE 적용
    			Typeface typefaceNanum =  null;
    			Main mainActivity = (Main)Main.ActivityMain;
    			if (mainActivity != null) {
    				if (mainActivity.m_iVender == SMART_BOX || mainActivity.m_iVender == SMART_TEST) {
    					typefaceNanum = Typeface.createFromAsset(getAssets(), "nanum.ttf.mp3");
    					m_iStrokeSize = 6;
    				} else {
    					m_iStrokeSize = 4;
    				}
    			}
    			
    			m_paintLyrics = new Paint();
    			m_paintLyrics.setAntiAlias(true);
    			m_paintLyrics.setStyle(Paint.Style.STROKE);
    			m_paintLyrics.setStrokeWidth(m_iStrokeSize);
    			m_paintLyrics.setTextSize(m_iLyricsFontSize);
    			m_paintLyrics.setTypeface(typefaceNanum);
    			
    			m_paintTitle = new Paint();    			
    			m_paintTitle.setAntiAlias(true);
    			m_paintTitle.setStyle(Paint.Style.STROKE);
    			m_paintTitle.setStrokeWidth(m_iStrokeSize);
    			m_paintTitle.setTextSize(m_iTitleFontSize);
    			m_paintTitle.setTypeface(typefaceNanum);
    			
    			m_paintSinger = new Paint();    			
    			m_paintSinger.setAntiAlias(true);
    			m_paintSinger.setStyle(Paint.Style.STROKE);
    			m_paintSinger.setStrokeWidth(m_iStrokeSize);
    			m_paintSinger.setTextSize(m_iSingerFontSize);
    			m_paintSinger.setTypeface(typefaceNanum);

    			m_paintReady = new Paint();    			
    			m_paintReady.setAntiAlias(true);
    			m_paintReady.setStyle(Paint.Style.STROKE);
    			m_paintReady.setStrokeWidth(m_iStrokeSize);
    			m_paintReady.setTextSize(m_iReadyFontSize);
    			m_paintReady.setTypeface(typefaceNanum);
    		}
    		
    		private void init() {
    			m_itor		= 0;
    			m_bReady	= false;
    			m_nInterval = 0;
    			m_nTickTime = 0;
    			m_nFirstTick= 0;
    			m_nEndTime 	= 0;
    			m_nDisplay	= 0;
    			m_nLinePos	= 0;
    			m_nSpanTime = 0;
    			m_line      = 0;

    			// bgkim LYRICS COLOR 정의
    			m_nInColor[0]  = Color.WHITE;
    			m_nOutColor[0] = Color.BLACK;    			
    			m_nInColor[1]  = Color.WHITE;
    			m_nOutColor[1] = Color.BLACK;
    		}
    		
    		@Override
    		public void run() {
    			LOG("PlayViewThread", "run()");
    			
    			SurfaceHolder surfaceHolder = holder;
				Canvas canvas = null;
    			
    			while (!done) {
					if (!m_redraw) {
	    				try {
        					canvas = surfaceHolder.lockCanvas();
        					// bgkim 투명 배경이라서 뭘 그리기 전에 한번 지워줌
        					canvas.drawColor(0, PorterDuff.Mode.CLEAR);
            				doDraw(canvas);
	    				} catch(Exception e) {
	    					e.printStackTrace();
						} finally {
							if (canvas != null) {
								surfaceHolder.unlockCanvasAndPost(canvas);
							}
						}
					}
				}
    		}
    		
    		public void requestExitAndWait() {
    			done = true;
    			
    			try {
    				join();
    			} catch (InterruptedException ex) {
    			}
    		}
        	
        	public void onWindowResize(int w, int h) {
        		LOG("PlayViewThread", "onWindowResize()"+w+"()"+h+"()");
        		
        		m_width = w;
        		m_height = h;
        	}
        	
        	private void outTextWithOutStroke(Canvas canvas, Paint paint, String str, int x, int y, int inColor) {
        		paint.setColor(inColor);
	            paint.setStyle(Paint.Style.FILL);
	            canvas.drawText(str, x, y, paint);
        	}
        	
        	private void outText(Canvas canvas, Paint paint, String str, int x, int y, int inColor, int outColor) {
        		paint.setColor(outColor);
        		paint.setStyle(Paint.Style.STROKE);
        		paint.setStrokeWidth(m_iStrokeSize);
        		canvas.drawText(str, x, y, paint);
	            
	            paint.setColor(inColor);
	            paint.setStyle(Paint.Style.FILL);
	            canvas.drawText(str, x, y, paint);
        	}
        	
        	private Rect outSize(Paint paint, String str) {
        		Rect rect = new Rect();
        		
        		if (str.length() == 0) {
        			rect.set(0, 0, 0, 0);
        			return rect;
        		}
        		
        		paint.getTextBounds(str, 0, str.length(), rect);
        		
        		if (rect.width() > 0) {
        			rect.right += 2;
        			rect.bottom += 2;
        		}
        		
        		return rect;
        	}
        	
        	protected void doDraw(Canvas canvas) {
        		try {
            		if (!m_redraw) {
	           			drawLyrics(canvas, m_mp.getCurrentPosition());
            		}
					
				} catch (Exception e) {
					e.printStackTrace();
				}
        	}
        	
        	protected void drawLyrics(Canvas canvas, int t) {        		
        		int nState = SYNC_STATUS_NO;
        		int nType = timeOut(t);
    			int nLinePos = getLinePos();
    			
    			if (m_bReady == false) {
        			nState = 0;
    				setSinger(canvas, m_paintSinger,
    						  m_data.getLyricsInfoTag().strSinger, 
    						  m_data.getLyricsInfoTag().strAuthor, 
    						  m_data.getLyricsInfoTag().strLyricsAuthor
    				);

    				setTitle(canvas, m_paintTitle,
    						 m_data.getLyricsInfoTag().strTitle1,
    						 m_data.getLyricsInfoTag().strTitle2
    				);
    			} else {
          			nState = 1;
          		  
          			if (nType == SYNC_STATUS_NUM) {
          				setReady(canvas, m_paintReady, m_strReady);
          			}
        			
          			setLyrics(canvas, m_paintLyrics, m_strLine[0], 0, m_nInColor[0], m_nOutColor[0]);
        			setLyrics(canvas, m_paintLyrics, m_strLine[1], 1, m_nInColor[1], m_nOutColor[1]);
        		}
        		
        		if (nState == 1) {
            		Rect curRect = outSize(m_paintLyrics, m_strGo);
            		Rect preRect = outSize(m_paintLyrics, m_strPrev);
 
        			int nPixel = (int)(curRect.width() * ((float)m_nTickTime / (float)m_nSpanTime)) + preRect.width();
        			
        			//LOG("BGKIM", "[nPixel] : " + String.valueOf(nPixel));
        			
        			redrawLyrics(canvas, m_paintLyrics, m_strLine[nLinePos], nPixel, nLinePos);
        		}
        	}
        	
        	void redrawLyrics(Canvas canvas, Paint paint, String str, int end, int type) {
        		Rect rect = outSize(paint, str);
        		
        		m_iBeforeEnd = end;
        		
        		if (end == 0) {
        			if (m_iBeforeEnd != end) {
		    			int pos = 1 - getLinePos();
		    			m_nInColor[pos] = Color.BLACK;
		    			m_nOutColor[pos] = Color.YELLOW;
        			}
        		}
        		
        		if (end > rect.width()) {
        			end = rect.width();
        			
        			// bgkim
        			if (!m_strContinueLyrics.equals("")) {
        			int pos = getLinePos();
	    			m_nInColor[pos] = Color.BLACK;
	    			m_nOutColor[pos] = Color.YELLOW;
        			}
        		}
        		
        		canvas.save();
        		
                canvas.translate(m_ptDrawPos[type].x, m_ptDrawPos[type].y);
                // bgkim 진행 중인 가사를 그릴 때 높이 유동 조정 (기존 25로 고정)
                canvas.clipRect(0, (m_iLyricsFontSize * -1) + 10, end, rect.height() - 25);
        		outText(canvas, paint, str, 0, 0, Color.BLACK, Color.YELLOW); // LYRICS COLOR

                canvas.restore();
        	}

        	void setReady(Canvas canvas, Paint paint, String str) {
        		Rect rect = outSize(paint, str);
        		
        		// bgkim Ready 표시 위치 y 값 유동 조정 (기존 -18 고정)
        		outText(canvas, paint, str, m_ptLyrics.x, m_ptLyrics.y - rect.height() - (m_iLyricsFontSize / 2), Color.YELLOW, Color.BLACK);
        	}
        	
        	@SuppressWarnings("deprecation")
			void setTitle(Canvas canvas, Paint paint, String str1, String str2) {
        		int orient = getWindowManager().getDefaultDisplay().getOrientation();
        		int marginBottom = 0;
        		
        		if (orient == Surface.ROTATION_0) {
        			marginBottom = m_marginBottom; 
				} else {
        			marginBottom -= m_marginBottom; 
        		}
        		
        		Rect rect1 = outSize(paint, str1);
        		Rect rect2 = outSize(paint, str2);

        		if (str2 != null && !str2.equals("")) {
        			int x1 = (m_width - rect1.width()) / 2;
        			int y1 = (m_height - rect1.height() - rect2.height() - 80) / 2;
        			int x2 = (m_width - rect2.width()) / 2;
        			int y2 = (m_height - rect2.height()) / 2;
        			
        			y1 += marginBottom;
        			y2 += marginBottom;

        			outText(canvas, paint, str1, x1, y1, Color.WHITE, Color.BLACK);
        			outText(canvas, paint, str2, x2, y2, Color.WHITE, Color.BLACK);
        		} else {
        			int x = (m_width - rect1.width()) / 2;
        			int y = (m_height - rect1.height()) / 2;
        			
        			y += marginBottom;
        			
        			outText(canvas, paint, str1, x, y, Color.WHITE, Color.BLACK);
        		}
        	}
        	
        	void setSinger(Canvas canvas, Paint paint, String str1, String str2, String str3) {
        		String strSinger, strAuthor, strLyricsAuthor;
        		strSinger = "노래   " + str1;
        		strAuthor = "작곡   " + str2;
        		strLyricsAuthor = "작사   " + str3;
        		
        		Rect rect1 = outSize(paint, strSinger);
        		Rect rect2 = outSize(paint, strAuthor);
        		Rect rect3 = outSize(paint, strLyricsAuthor);
        		
        		int iBackWidth = 0; 
        		
        		if (rect1.width() > rect2.width() && rect1.width() > rect3.width()) {
        			iBackWidth = rect1.width();
        		} else if (rect2.width() > rect1.width() && rect2.width() > rect3.width()) {
        			iBackWidth = rect2.width();
        		} else if (rect3.width() > rect1.width() && rect3.width() > rect2.width()) {
        			iBackWidth = rect3.width();
        		}

        		/*
        		outText(canvas, paint, strSinger, 10, m_height - (rect1.height() * 3 + 15), Color.WHITE, Color.BLACK);
        		outText(canvas, paint, strAuthor, 10, m_height - (rect1.height() * 2 + 10), Color.WHITE, Color.BLACK);
        		outText(canvas, paint, strLyricsAuthor, 10, m_height - (rect1.height() + 5), Color.WHITE, Color.BLACK);
        		*/
        		
        		//#70608F
        		//#4D4379
        		
        		int iSingerY = m_height - (rect1.height() * 3 + 150);
        		int iAuthorY = m_height - (rect1.height() * 2 + 110);
        		int iLyricsAuthorY = m_height - (rect1.height() + 70);
        		
        		outRect(canvas, paint, 30, iBackWidth, iSingerY, iSingerY, Color.parseColor("#70608F"), Color.parseColor("#4D4379"));
        		outRect(canvas, paint, 30, iBackWidth, iAuthorY, iAuthorY, Color.parseColor("#70608F"), Color.parseColor("#4D4379"));
        		outRect(canvas, paint, 30, iBackWidth, iLyricsAuthorY, iLyricsAuthorY, Color.parseColor("#70608F"), Color.parseColor("#4D4379"));
        		
        		outTextWithOutStroke(canvas, paint, strSinger, 50 + m_iSongInfoPosition, iSingerY, Color.WHITE);
        		outTextWithOutStroke(canvas, paint, strAuthor, 50 + m_iSongInfoPosition, iAuthorY, Color.WHITE);
        		outTextWithOutStroke(canvas, paint, strLyricsAuthor, 50 + m_iSongInfoPosition, iLyricsAuthorY, Color.WHITE);
        	}
        	
        	private void outRect(Canvas canvas, Paint paint, int x, int x2, int y, int y2, int colorTitle, int colorName) {
        		/*
        		if (x2 == 0) {
        			return;
        		}
        		*/
        		
        		int iCenter = 0;
        		
        		if (m_iSongInfoPosition > 950) {
        		// 1920 x 1080
        			iCenter = 220;
        		} else if (m_iSongInfoPosition > 630) {
        		// 1280 x 720
        			iCenter = 220;
        		} else {
        		// 960 x 540
        			iCenter = 220;
        		}
        		
        		x = x + m_iSongInfoPosition;
        		iCenter = iCenter + m_iSongInfoPosition;
        		
        		paint.setColor(colorTitle);
        		paint.setAlpha(200);
        		canvas.drawRect(x, y - m_iSingerFontSize, iCenter, y2 + (m_iSingerFontSize / 3), paint);
        		
        		paint.setColor(colorName);
        		paint.setAlpha(200);
        		canvas.drawRect(iCenter, y - m_iSingerFontSize, (m_iSongInfoPosition * 2) - 30, y2 + (m_iSingerFontSize / 3), paint);
        	}
        	
        	void setLyrics(Canvas canvas, Paint paint, String str, int type, int inColor, int outColor) {
        		Rect rect = outSize(paint, str);
        		if (type == 0) {
        			m_ptDrawPos[type].x = (m_width - rect.width()) / 2;
        			// bgkim 가사 위치 조절 (메뉴 단 감안)
        			m_ptDrawPos[type].y = m_height - rect.height() * 2 - 30;
        			m_strLyrics[0] = str;
        			m_ptLyrics = m_ptDrawPos[type];
        		} else {
        			m_ptDrawPos[type].x = (m_width - rect.width()) / 2;
        			// bgkim 가사 위치 조절 (메뉴 단 감안)
        			m_ptDrawPos[type].y = m_height - rect.height() - 10;
        			m_strLyrics[1] = str;
        		}
        		
        		outText(canvas, paint, str, m_ptDrawPos[type].x, m_ptDrawPos[type].y, inColor, outColor);
        	}
        	
        	int getLinePos() {
        		return (m_nLinePos + m_nDisplay) % 2;
        	}
        	
        	int timeOut(int nTime) {        		
        		int nCodeFlag 	= -1;
        		int nInterval = 0;
        		int nState = SYNC_STATUS_NO;

        		if (nTime < 0) {
        			nTime = 0;
        		}

        		nInterval = nTime - m_nInterval;
        		
        		if (nInterval > 0) {
        			m_nInterval = nTime;
        		}

        		m_nTickTime += nInterval;
        	            		
        		if (m_itor < m_data.getListSyncTag().size()) {
        			if (m_nFirstTick != 0) {
        				nState = SYNC_STATUS_NUM;
        				int nPercent = (int)(100 * ((float)m_nTickTime / (float)m_nFirstTick ));

        				if (nPercent > 95) {
        					m_strReady = "GO";
        				} else if (nPercent > 80) {
        					m_strReady = "1";
        				} else if (nPercent > 60) {
        					m_strReady = "2";
        				} else if (nPercent > 40) {
        					m_strReady = "3";
        				} else if (nPercent > 20) {
        					m_strReady = "4";
        				} else if (nPercent >= 0) {
        					m_strReady = "5";
        				}
        			}

        			if (m_data.getListSyncTag().get(m_itor).lTimeSyncStart <= nTime) {
        				nCodeFlag = m_data.getListSyncTag().get(m_itor).nAttribute;
        			}

        			if (m_nEndTime > 0 && nTime > m_nEndTime + 2000) {
        				if (m_data.getListSyncTag().get(m_itor).nLineDisplay % 2 == 1) {
        					m_nDisplay++;
        				}
        				
        				m_strLine[0] = "(간주중)";
        				m_strLine[1] = "";
        				
        				m_nInColor[0] = Color.WHITE;
						m_nOutColor[0] = Color.BLACK;
						
						m_nInColor[1] = Color.WHITE;
						m_nOutColor[1] = Color.BLACK;

        				m_iBeforeEnd = 0;
        				m_strContinueLyrics = "";
        				m_bContinue = false;
        				m_bSkipChangeColor = true;
        				
        				m_nEndTime = 0;
        				nState = SYNC_STATUS_DIVISION;
        			}

        			switch(nCodeFlag)
        			{
        			case SYNC_ENDDIVISION:
        			case SYNC_TEXT:
        				if (!m_bReady) {
        					for ( int i = 0; i < LINE_VIEW; i++ ) {
        						m_strLine[i] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(m_itor).nLineDisplay+i).strLineLyrics);
        					}
        					
        					//LOG("BGKIM", "[0] : " + m_strLine[0]);
        					//LOG("BGKIM", "[1] : " + m_strLine[1]);
        				
        					m_nFirstTick = 1;
        					m_bReady = true;
        				}
        				
        				if (m_nFirstTick == 0 && m_data.getListSyncTag().get(m_itor).nPosLyrics == 0) {
        					nState = SYNC_STATUS_START;
        					m_nLinePos += 1;
        				} else if ( m_nFirstTick != 0 ) {
        					nState = SYNC_STATUS_DEL;				
        					m_nLinePos = m_data.getListSyncTag().get(m_itor).nPosOneLine;
        				} else {
        					nState = SYNC_STATUS_TEXT;
        					m_nLinePos = m_data.getListSyncTag().get(m_itor).nPosOneLine;
        				}

        				m_nFirstTick = 0;
        				m_strReady = "";

        				m_nSpanTime = (int)(m_data.getListSyncTag().get(m_itor).lTimeSyncEnd - m_data.getListSyncTag().get(m_itor).lTimeSyncStart);
        				m_nTickTime = 1;

        				int bufSize = m_data.getListSyncTag().get(m_itor).nPosLyrics;
        				byte[] buff = new byte[bufSize+1];
        				for(int i = 0; i < bufSize; i++) {
        					buff[i] = m_data.getListLyricsTag().get(m_data.getListSyncTag().get(m_itor).nPosOneLine).strLineLyrics[i];
        				}

        				buff[bufSize] = '\0';

        				int bufSize2 = m_data.getListSyncTag().get(m_itor).nPosLen;
        				byte[] buff2 = new byte[bufSize2+1];
        				for(int i = 0; i < bufSize2; i++) {
        					buff2[i] = m_data.getListLyricsTag().get(m_data.getListSyncTag().get(m_itor).nPosOneLine).strLineLyrics[bufSize + i];
        				}

        				buff2[bufSize2] = '\0';

        				m_strPrev = SongUtil.byteToString(buff);
        				m_strGo = SongUtil.byteToString(buff2);

        				if ((m_data.getListSyncTag().get(m_itor).nNextDisplay == 1) && (nState != SYNC_STATUS_DEL && m_data.getListSyncTag().get(m_itor).nLineDisplay < m_data.getListLyricsTag().size() - 1)) {
        					m_strLine[(m_data.getListSyncTag().get(m_itor).nLineDisplay+m_nDisplay+1)%2] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(m_itor).nLineDisplay+1).strLineLyrics);
        					nState = SYNC_STATUS_NEXT;

        					int pos = 1 - getLinePos();

							// bgkim LYRICS COLOR
							if (!m_bContinue) {
								m_bSkipChangeColor = false;
								m_strContinueLyrics = m_strLine[pos];
							} else {
								m_bSkipChangeColor = true;
							}

							m_bContinue = true;

							m_nInColor[pos] = Color.WHITE;
							m_nOutColor[pos] = Color.BLACK;
							
							//LOG("BGKIM", "[pos] : " + String.valueOf(pos));
							//LOG("BGKIM", "[pos] : " + m_strLine[pos]);
        				}

        				if (nCodeFlag == SYNC_ENDDIVISION) {
        					m_nEndTime = (int)(m_data.getListSyncTag().get(m_itor).lTimeSyncEnd);
        				}

        				m_itor++;
        				break;
        			case SYNC_READY:
        				for(int i = 0; i < LINE_VIEW; i++) {
        					m_strLine[i] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(m_itor).nLineDisplay+i).strLineLyrics);
        				}

        				nState = SYNC_STATUS_READY;
        				m_strPrev = "";
        				m_strGo = "";
        				m_nSpanTime = 0;
        				m_nTickTime = 1;
        				m_nFirstTick = (int)(m_data.getListSyncTag().get(m_itor).lTimeSyncEnd - m_data.getListSyncTag().get(m_itor).lTimeSyncStart);
        				m_bReady = true;

        				m_itor++;
        				break;
        			}
        		}

        		if (getLinePos() != m_line) {
					m_bContinue = false;

					if (!m_bSkipChangeColor) {
						// bgkim LYRICS COLOR 완료색으로 처리하는 부분 보완
						if (m_strContinueLyrics != m_strLine[m_line]) {
							m_nInColor[m_line] = Color.BLACK;
							m_nOutColor[m_line] = Color.YELLOW;
							
							//LOG("BGKIM", "[m_line] 01 : " + String.valueOf(m_line));
							//LOG("BGKIM", "[m_line] 01 : " + m_strLine[m_line]);

							m_bSkipChangeColor = false;
						}
					} else {
						if (m_strContinueLyrics == m_strLine[m_line]) {
							m_nInColor[m_line] = Color.BLACK;
							m_nOutColor[m_line] = Color.YELLOW;
							
							//LOG("BGKIM", "[m_line] 02 : " + String.valueOf(m_line));
							//LOG("BGKIM", "[m_line] 02 : " + m_strLine[m_line]);

							m_bSkipChangeColor = false;
						}
					}
					
					// bgkim 마지막 태그일 경우 흰색(진행 안된 부분)이 남는 경우가 생겨 보완 처리
					if (m_itor >= m_data.getListSyncTag().size()) {
	        			m_nInColor[m_line] = Color.BLACK;
						m_nOutColor[m_line] = Color.YELLOW;
					}

					m_line = getLinePos();
				}

    			return nState;
        	}
        	
        	void rePaint(int nTime) {
        		init();        		

        		int nCodeFlag = -1;
    			int nState = SYNC_STATUS_NO;
    			
        		boolean find = false;
        		for(int itor = 0; itor < m_data.getListSyncTag().size(); itor++) {
            		nCodeFlag = -1;
        			nState = SYNC_STATUS_NO;
        			
        			if (m_nFirstTick != 0) {
        				nState = SYNC_STATUS_NUM;
        				int nPercent = (int)( 100 * ((float)m_nTickTime / (float)m_nFirstTick ));

        				if (nPercent > 95) {
        					m_strReady = "GO!";
        				} else if (nPercent > 80) {
        					m_strReady = "1";
        				} else if (nPercent > 60) {
        					m_strReady = "2";
        				} else if (nPercent > 40) {
        					m_strReady = "3";
        				} else if (nPercent > 20) {
        					m_strReady = "4";
        				} else if (nPercent >= 0) {
        					m_strReady = "5";
        				}
        			}

        			if (m_data.getListSyncTag().get(itor).lTimeSyncStart <= nTime) {
        				nCodeFlag = m_data.getListSyncTag().get(itor).nAttribute;
        			}

        			if (m_nEndTime > 0 && nTime > m_nEndTime + 2000) {
        				if (m_data.getListSyncTag().get(itor).nLineDisplay % 2 == 1) {
        					m_nDisplay++;
        				}

        				m_strLine[0] = "(반주중)";
        				m_strLine[1] = "";

        				m_nInColor[0] = Color.WHITE;
						m_nOutColor[0] = Color.BLACK;
						
						m_nInColor[1] = Color.WHITE;
						m_nOutColor[1] = Color.BLACK;

        				m_iBeforeEnd = 0;
        				m_strContinueLyrics = "";
        				m_bContinue = false;
        				m_bSkipChangeColor = true;

        				m_nEndTime = 0;
        				nState = SYNC_STATUS_DIVISION;
        			}

        			switch(nCodeFlag)
        			{
        			case SYNC_ENDDIVISION:
        			case SYNC_TEXT:
        				if (!m_bReady) {
        					for(int i = 0; i < LINE_VIEW; i++) {
        						m_strLine[i] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(itor).nLineDisplay+i).strLineLyrics);
        					}
        				
        					m_nFirstTick = 1;
        					m_bReady = true;
        				}

        				if (m_nFirstTick == 0 && m_data.getListSyncTag().get(itor).nPosLyrics == 0) {
        					nState = SYNC_STATUS_START;
        					m_nLinePos += 1;
        				} else if (m_nFirstTick != 0) {
        					nState = SYNC_STATUS_DEL;				
        					m_nLinePos = m_data.getListSyncTag().get(itor).nPosOneLine;
        				} else {
        					nState = SYNC_STATUS_TEXT;
        					m_nLinePos = m_data.getListSyncTag().get(itor).nPosOneLine;
        				}

        				m_nFirstTick = 0;
        				m_strReady = "";

        				m_nSpanTime = (int)(m_data.getListSyncTag().get(itor).lTimeSyncEnd - m_data.getListSyncTag().get(itor).lTimeSyncStart);
        				m_nTickTime = 1;

        				if ((m_data.getListSyncTag().get(itor).nNextDisplay == 1) && (nState != SYNC_STATUS_DEL && m_data.getListSyncTag().get(itor).nLineDisplay < m_data.getListLyricsTag().size() - 1)) {
        					m_strLine[(m_data.getListSyncTag().get(itor).nLineDisplay+m_nDisplay+1)%2] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(itor).nLineDisplay+1).strLineLyrics);
        					nState = SYNC_STATUS_NEXT;
        				}

        				if (nCodeFlag == SYNC_ENDDIVISION) {
        					m_nEndTime = (int)(m_data.getListSyncTag().get(itor).lTimeSyncEnd);
        				}

        				break;
        			case SYNC_READY:
        				for(int i = 0; i < LINE_VIEW; i++) {
        					m_strLine[i] = SongUtil.byteToString(m_data.getListLyricsTag().get(m_data.getListSyncTag().get(itor).nLineDisplay+i).strLineLyrics);
        				}

        				nState = SYNC_STATUS_READY;
        				m_strPrev = "";
        				m_strGo = "";
        				m_nSpanTime = 0;
        				m_nTickTime = 1;
        				m_nFirstTick = (int)(m_data.getListSyncTag().get(itor).lTimeSyncEnd - m_data.getListSyncTag().get(itor).lTimeSyncStart);
        				m_bReady = true;

        				break;
        			}

          			if (getLinePos() != m_line) {
          				// bgkim LYRICS COLOR
            			m_nInColor[m_line] = Color.BLACK;
            			m_nOutColor[m_line] = Color.YELLOW;
            			m_line = getLinePos();
          			}

    				m_nTickTime = 1;
    				m_nInterval = nTime;
    		
    				if (m_nFirstTick > 0) {
    					m_nFirstTick = (int)(m_data.getListSyncTag().get(itor).lTimeSyncStart) - nTime;
    				}

    				m_itor = itor;

        			if (m_data.getListSyncTag().get(itor).lTimeSyncStart >= nTime) {
        				find = true;
        				break;
        			}
        		}
        	
				long start = m_data.getListSyncTag().get(m_itor).lTimeSyncStart;
    			long end = m_data.getListSyncTag().get(m_itor).lTimeSyncEnd;
    			
        		if (find) {
    				LOG("rePaint()", "OK()"+nState+"()"+nCodeFlag+"()"+m_itor+"()"+m_data.getListSyncTag().size()+"()"+nTime+"()"+start+"()"+end+"()"+m_nEndTime+"()");
				} else {
    				LOG("rePaint()", "NG()"+nState+"()"+nCodeFlag+"()"+m_itor+"()"+m_data.getListSyncTag().size()+"()"+nTime+"()"+start+"()"+end+"()"+m_nEndTime+"()");
				}
        	
        	}
    	}
    }
	
	private void LOG(String tag, String msg) {
		if (P_DEBUG == "debug") {
			Log.i(tag, msg);
		}
	}
}