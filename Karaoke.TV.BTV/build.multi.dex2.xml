<?xml version="1.0" encoding="UTF-8"?>
<project name="android.multi.dex" default="help">

		<!-- version-tag: custom -->
		<!-- (1) Override -package target to add additional JAR to the apk -->
		<property name="multidex-secondary-classes.jar" value="classes-secondary.jar" />
		<target name="-package" depends="-dex, -package-resources, -create-multidex-secondary-classes-jar">
				<!-- Copied from SDK/tools/ant/build.xml -->
				<!-- only package apk if *not* a library project -->
				<do-only-if-not-library elseText="Library project: do not package apk..." >
						<if condition="${build.is.instrumented}">
								<then>
										<package-helper>
												<extra-jars>
														<!-- Injected from external file -->
														<jarfile path="${emma.dir}/emma_device.jar" />
												</extra-jars>
										</package-helper>
								</then>
								<else>
										<!-- We can finesse apkbuilder by putting secondary classes file(s) in a jar file -->
										<if condition="${build.is.multidex}">
												<then>
														<package-helper>
																<extra-jars>
																		<jarfile path="${out.dir}/${multidex-secondary-classes.jar}" />
																</extra-jars>
														</package-helper>
												</then>
												<else>
														<package-helper>
																<extra-jars />
														</package-helper>
												</else>
										 </if>
								</else>
						</if>
				</do-only-if-not-library>
		</target>

		<!-- (2) Create a JAR file of the secondary classes*.dex files -->
		<target name="-create-multidex-secondary-classes-jar" if="${build.is.multidex}">
				<jar destfile="${out.dir}/${multidex-secondary-classes.jar}"
						 basedir="${out.dir}"
						 includes="classes*.dex"
						 excludes="classes.dex"
						 filesonly="true"
						 />
		</target>

		<!-- Standard import of Android build.xml -->
		<import file="${sdk.dir}/tools/ant/build.xml" />

		<!-- (3) Replacement of "dex-helper" to support multidex -->
		<macrodef name="dex-helper">
				<element name="external-libs" optional="yes" />
				<attribute name="nolocals" default="false" />
				<sequential>
						<!-- sets the primary input for dex. If a pre-dex task sets it to
								 something else this has no effect -->
						<property name="out.dex.input.absolute.dir" value="${out.classes.absolute.dir}" />

						<!-- set the secondary dx input: the project (and library) jar files
								 If a pre-dex task sets it to something else this has no effect -->
						<if>
								<condition>
										<isreference refid="out.dex.jar.input.ref" />
								</condition>
								<else>
										<path id="out.dex.jar.input.ref">
												<path refid="project.all.jars.path" />
										</path>
								</else>
						</if>

						<if condition="${build.is.multidex}" >
								<then>
										<if condition="${dex.force.jumbo}" >
												<else>
														<fail message="The following assumes dex.force.jumbo is true" />
												</else>
										</if>
										<apply executable="${dx}" failonerror="true" parallel="true">
												<arg value="--dex" />
												<arg value="--force-jumbo" />

												<!-- Specify a multi-dex APK -->
												<arg value="--multi-dex" />

												<!-- For multidex output to a folder -->
												<arg value="--output" />
												<arg value="${out.dir}" />

												<path path="${out.dex.input.absolute.dir}" />
										</apply>
								</then>
								<else>
										<!-- The value from SDK/tools/ant/build.xml -->
										<dex executable="${dx}"
														output="${intermediate.dex.file}"
														dexedlibs="${out.dexed.absolute.dir}"
														nolocals="@{nolocals}"
														forceJumbo="${dex.force.jumbo}"
														disableDexMerger="${dex.disable.merger}"
														verbose="${verbose}">
												<path path="${out.dex.input.absolute.dir}"/>
												<path refid="out.dex.jar.input.ref" />
												<external-libs />
										</dex>
								</else>
						</if>
				</sequential>
		</macrodef>

</project>
